{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"themes/matery/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/matery/source/js/matery.js","path":"js/matery.js","modified":0,"renderable":1},{"_id":"themes/matery/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/matery/source/css/gitment.css","path":"css/gitment.css","modified":0,"renderable":1},{"_id":"themes/matery/source/css/matery.css","path":"css/matery.css","modified":0,"renderable":1},{"_id":"themes/matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":0,"renderable":1},{"_id":"themes/matery/source/css/my.css","path":"css/my.css","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/comment_bg.png","path":"medias/comment_bg.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/icp.png","path":"medias/icp.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/logo - 副本.png","path":"medias/logo - 副本.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/timgcore.jpg","path":"medias/timgcore.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/cover.jpg","path":"medias/cover.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/15.jpg","path":"medias/featureimages/15.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/16.jpg","path":"medias/featureimages/16.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/21.jpg","path":"medias/featureimages/21.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/22.jpg","path":"medias/featureimages/22.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/23.jpg","path":"medias/featureimages/23.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/logo.png","path":"medias/logo.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/nekokecore.png","path":"medias/nekokecore.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/reward/wechat.png","path":"medias/reward/wechat.png","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/background/canvas-nest.js","path":"libs/background/canvas-nest.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/background/ribbon-dynamic.js","path":"libs/background/ribbon-dynamic.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/background/ribbon-refresh.min.js","path":"libs/background/ribbon-refresh.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/background/ribbon.min.js","path":"libs/background/ribbon.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/codeBlock/codeBlockFuction.js","path":"libs/codeBlock/codeBlockFuction.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/codeBlock/codeCopy.js","path":"libs/codeBlock/codeCopy.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/codeBlock/codeLang.js","path":"libs/codeBlock/codeLang.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/codeBlock/codeShrink.js","path":"libs/codeBlock/codeShrink.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/instantpage/instantpage.js","path":"libs/instantpage/instantpage.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/14.jpg","path":"medias/featureimages/14.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/17.jpg","path":"medias/featureimages/17.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/18.jpg","path":"medias/featureimages/18.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/19.jpg","path":"medias/featureimages/19.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/20.jpg","path":"medias/featureimages/20.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/reward/alipay.jpg","path":"medias/reward/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/jquery/jquery.min.js","path":"libs/jquery/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.eot","path":"libs/awesome/webfonts/fa-regular-400.eot","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.ttf","path":"libs/awesome/webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.woff","path":"libs/awesome/webfonts/fa-regular-400.woff","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.woff2","path":"libs/awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.eot","path":"libs/lightGallery/fonts/lg.eot","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/css/all.css","path":"libs/awesome/css/all.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.eot","path":"libs/awesome/webfonts/fa-brands-400.eot","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.ttf","path":"libs/awesome/webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.woff","path":"libs/awesome/webfonts/fa-brands-400.woff","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.woff2","path":"libs/awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.woff","path":"libs/awesome/webfonts/fa-solid-900.woff","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.woff2","path":"libs/awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.svg","path":"libs/awesome/webfonts/fa-regular-400.svg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.eot","path":"libs/awesome/webfonts/fa-solid-900.eot","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.ttf","path":"libs/awesome/webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.svg","path":"libs/awesome/webfonts/fa-brands-400.svg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.svg","path":"libs/awesome/webfonts/fa-solid-900.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/matery/.gitignore","hash":"5340c994462c7345373e075529f40e60c1952f00","modified":1581616376597},{"_id":"themes/matery/LICENSE","hash":"b314c7ebb7d599944981908b7f3ed33a30e78f3a","modified":1581616376645},{"_id":"themes/matery/README.md","hash":"43a6d7959409a703084ecc1a6bb63839cab47cc1","modified":1581616376647},{"_id":"themes/matery/README_CN.md","hash":"357035b1fe45155e4a25b19469ed69fbf29a6d74","modified":1581616376648},{"_id":"themes/matery/_config.yml","hash":"4ed0e204e281572beb531e7339365da98dc45dd9","modified":1637766594967},{"_id":"source/_data/friends.json","hash":"378f231574a933b983da966921b3ef45edca4c97","modified":1637818305209},{"_id":"source/_posts/ATwo-DimensionalWebMulti-PersonOnlineNetworkChatSystem.md","hash":"f8e659f99b4a9373c003005d90af1cdcb8e47a5f","modified":1637817707785},{"_id":"source/_posts/AnOpenSource-LightweightIntranetPenetrationToolSimilarToServo-Ngrok.md","hash":"04e2a4893734ae826bf8e62d000b462bd04c1d34","modified":1637751632102},{"_id":"source/_posts/CentOSCommandScreen.md","hash":"f2e1fa16010d667a24f22d525892bb26dd2006e3","modified":1637817628967},{"_id":"source/_posts/HexoReferencesToLocalImagesCannotBeDisplayed.md","hash":"95c57ef5d4b634c56cbe212d9eb3be1e85495e87","modified":1637816210521},{"_id":"source/_posts/UseKaliWirelessPenetrationToGetTheWifiPassword.md","hash":"2b905ec25b756b44e5799d23623360b1deab8a8b","modified":1637829987259},{"_id":"source/_posts/hello-world.md","hash":"220a933d0c44041233c6dcd98683c1b3861e16c1","modified":1637817820681},{"_id":"source/_posts/hexo.md","hash":"fb66d3da7edcb6c6d109915d33826007b189e787","modified":1637815981899},{"_id":"source/_posts/密码破解与心理学.md","hash":"feb3613d566a358d7392b6df1d99accd229f9f90","modified":1637835690473},{"_id":"source/contact/index.md","hash":"ed3b64b1584cdffe75ca6bedbfabc1eee78b9df1","modified":1637751632129},{"_id":"source/about/index.md","hash":"d65f832e50c852d52d2767a81ec6f98d23651f68","modified":1637751632129},{"_id":"source/categories/index.md","hash":"416f20b92c87f7e51526e831945b3d6e95a92b76","modified":1637751632129},{"_id":"source/friends/index.md","hash":"5e192c153111a18b61483f49a01551e23ce4f1ed","modified":1637751632129},{"_id":"source/tags/index.md","hash":"04e3e06b261c08cc84bddc49385ec8dba2105392","modified":1637751632129},{"_id":"themes/matery/languages/default.yml","hash":"9baf9370d0d7494e8575934e4bd0fa6d24484052","modified":1581616376650},{"_id":"themes/matery/languages/zh-CN.yml","hash":"13ce732a54ce08b0ca01f14fd09cbe8fc418de21","modified":1581616376650},{"_id":"themes/matery/source/favicon.png","hash":"20674c497b75fc889194b47fd18ecea12303d8ec","modified":1581616376685},{"_id":"themes/matery/layout/about.ejs","hash":"228f5075f17ad540cee5481d91dbe2c5555cc73b","modified":1581616376675},{"_id":"themes/matery/layout/archive.ejs","hash":"7c43c5ab8dc7a8f6ee38e200329280f684237852","modified":1581616376676},{"_id":"themes/matery/layout/categories.ejs","hash":"c431e772d0f7700592228bbd9502793bdc28a893","modified":1581616376676},{"_id":"themes/matery/layout/category.ejs","hash":"c993c74db4b31782d6c8f8eccc96065fc300ec19","modified":1581616376677},{"_id":"themes/matery/layout/contact.ejs","hash":"c3396cc5b1cbb102f500554f76946f5b45ee6d54","modified":1581616376677},{"_id":"themes/matery/layout/friends.ejs","hash":"56523c35cd7b3e1279089b3d2b38f0a521d787ef","modified":1581616376678},{"_id":"themes/matery/layout/index.ejs","hash":"d68ede26574a5006a24f9d6613738726e4f10bdf","modified":1581616376679},{"_id":"themes/matery/layout/layout.ejs","hash":"ad6f85189df88c42adeea1b2fc4039b9f7439895","modified":1581616376679},{"_id":"themes/matery/layout/post.ejs","hash":"50de0534a025d830758abc9d542960a66df2b1ba","modified":1581616376680},{"_id":"themes/matery/layout/tag.ejs","hash":"7404bc54d8aedf150a5f4e574a908152ed8f067c","modified":1581616376680},{"_id":"themes/matery/layout/tags.ejs","hash":"851c0ee599e91e7b1d657673859e8b6ff79cf50b","modified":1581616376681},{"_id":"source/_posts/HexoReferencesToLocalImagesCannotBeDisplayed/20181115112933605.png","hash":"e4195d9311975eac900601ca80ba7b17ff5edf03","modified":1637751632103},{"_id":"source/_posts/HexoReferencesToLocalImagesCannotBeDisplayed/20181115112941162.png","hash":"0336a346831d223c7d81ef0a3d76d04f61372e2c","modified":1637751632103},{"_id":"source/_posts/hello-world/image-20200215031832012.png","hash":"86cbf62f40084426bba39cd00f492cc5d93870d6","modified":1637751632119},{"_id":"source/_posts/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802220104192-1581710292747.png","hash":"53a62110f4b3005a5aa7aa1073e9d090e8e1b41d","modified":1637751632115},{"_id":"source/_posts/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802220104192.png","hash":"53a62110f4b3005a5aa7aa1073e9d090e8e1b41d","modified":1637751632115},{"_id":"source/_posts/hexo/11-29-08.jpg","hash":"4ecf8387144aca7adeadedec8968b16a0a453b3f","modified":1637751632120},{"_id":"source/_posts/hexo/11-29-10.jpg","hash":"aaf58a036d6c4cb8c2f8a9876b1e7b0b9ae801d7","modified":1637751632120},{"_id":"source/_posts/hexo/11-29-11.jpg","hash":"693ea8006b8b727cfb15968b949fab835971a37f","modified":1637751632121},{"_id":"source/_posts/hexo/11-29-12.jpg","hash":"ac647ad720867cfca7df36d6e64bc320fecb9f0c","modified":1637751632121},{"_id":"source/_posts/hexo/11-29-13.jpg","hash":"db80a67bb6b000caa658a1e398214e930e3ab7ea","modified":1637751632121},{"_id":"source/_posts/hexo/11-29-14.jpg","hash":"4f31988fc3528d13e55454332d00849f3ccee3c3","modified":1637751632122},{"_id":"source/_posts/hexo/11-29-16.jpg","hash":"2daf12faece99a6e72435873ea47288e4182771a","modified":1637751632123},{"_id":"source/_posts/hexo/11-29-15.jpg","hash":"4d90dd1913efe3c46280713b31018c26f305af70","modified":1637751632122},{"_id":"source/_posts/hexo/11-29-17.jpg","hash":"e30bd38d96a123a2264ff2e22d08266d8db0a527","modified":1637751632123},{"_id":"source/_posts/hexo/11-29-19.jpg","hash":"43dd474db7cdf8e1f765273f89c93349325b3021","modified":1637751632124},{"_id":"source/_posts/hexo/11-29-18.jpg","hash":"027c70cc0303e82c380037048fbed4b0fc152437","modified":1637751632123},{"_id":"source/_posts/hexo/11-29-20.jpg","hash":"d5dee6034e5a2489c62526b16838daabf5286b86","modified":1637751632124},{"_id":"source/_posts/hexo/11-29-22.jpg","hash":"d05eb08ab610a37576c41fd1c911c0ceb63d8631","modified":1637751632124},{"_id":"source/_posts/hexo/11-29-21.jpg","hash":"1e3a3147346583080c48ae3f6ca8a7c421981b9d","modified":1637751632124},{"_id":"source/_posts/hexo/11-29-23.jpg","hash":"fd0d690a9b81e88507beb54106adad9fda085d9d","modified":1637751632125},{"_id":"source/_posts/hexo/11-29-24.jpg","hash":"53fabfb54b4038ea18c557304606868897fc1527","modified":1637751632125},{"_id":"source/_posts/hexo/11-29-25.jpg","hash":"ad1d80aad8c98e1d4d7042f1ac9c8dbb9b47809f","modified":1637751632126},{"_id":"source/_posts/hexo/11-29-26.jpg","hash":"67e8b9b3ec75ee00cfadda3c4130d718e2a6e5d8","modified":1637751632126},{"_id":"source/_posts/hexo/11-29-28.jpg","hash":"99b7ba8e4723657545d343e73edc6ddf10331a35","modified":1637751632127},{"_id":"source/_posts/hexo/11-29-29.jpg","hash":"03646dd8e13fe1f8a36ccac39dba37d0b4c329b7","modified":1637751632127},{"_id":"source/_posts/hexo/11-29-30.jpg","hash":"e69702393291a05c1ae1dd995adf440b8cf97769","modified":1637751632128},{"_id":"source/_posts/hexo/11-29-31.jpg","hash":"9c1f30d499029af9d4915688f61fef45dbba99e4","modified":1637751632128},{"_id":"source/_posts/hexo/11-29-32.jpg","hash":"211be5c97bffca888732975ab8e5a66ff6355f37","modified":1637751632128},{"_id":"source/_posts/hexo/image-20200215031519029.png","hash":"1c14fd3097182725ae4934f67243f076b19bc547","modified":1637751632128},{"_id":"themes/matery/source/js/matery.js","hash":"290a8761a90f9c23904caa0ac40be2a92a4008cb","modified":1581616376686},{"_id":"themes/matery/source/js/search.js","hash":"77ecae23dd3edd8ad962c5b12954652bb2f7a1b6","modified":1581616376686},{"_id":"themes/matery/source/css/gitment.css","hash":"d5ef623065d1fbc897119f7b70ccf7563e329917","modified":1581616376682},{"_id":"themes/matery/source/css/matery.css","hash":"3a4d87ba735da57bcb7299ba9310bf3bbf4ba39d","modified":1582119302972},{"_id":"themes/matery/source/css/my-gitalk.css","hash":"4e3e855767ac5a48b13af1d6a42df13d8975e03f","modified":1581616376684},{"_id":"themes/matery/source/css/my.css","hash":"b3c32b573a4a9ef3dfeffbd544a9c3f451e67a54","modified":1581616376685},{"_id":"themes/matery/source/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1581616376994},{"_id":"themes/matery/source/medias/icp.png","hash":"5d1a1f3051c8a4ad70afa0a5488dfa7f0bb27bd5","modified":1581616377064},{"_id":"themes/matery/source/medias/logo - 副本.png","hash":"4050259723bd418648ec40028a8020364e57a6a3","modified":1581616377065},{"_id":"themes/matery/source/medias/timgcore.jpg","hash":"a0080d3032be57a2500222f79959a48bf70f0bbb","modified":1581704018698},{"_id":"themes/matery/layout/_partial/back-top.ejs","hash":"be527741c39c9dc4a13ad712b49fe8db0147fe1e","modified":1581616376651},{"_id":"themes/matery/layout/_partial/baidu-analytics.ejs","hash":"4b01030b7136192bdbd704e29a0fe12f92767551","modified":1581616376652},{"_id":"themes/matery/layout/_partial/baidu-push.ejs","hash":"2841870e0c625787de348221e5ddb7bbe99ec5a2","modified":1581616376652},{"_id":"themes/matery/layout/_partial/bg-cover-content.ejs","hash":"00121f03a7944a99b437191d31cd90fd62fcaec9","modified":1582117605526},{"_id":"themes/matery/layout/_partial/bg-cover.ejs","hash":"d5a7b9bb96e04c0a3485dd873748f19c50a6a04f","modified":1581616376654},{"_id":"themes/matery/layout/_partial/disqus.ejs","hash":"42dda8e67f7f09d148347887e52f18aea546df26","modified":1581616376654},{"_id":"themes/matery/layout/_partial/footer.ejs","hash":"c9d4a691f0c15136c85795473b784337236e0fc9","modified":1581616376655},{"_id":"themes/matery/layout/_partial/gitalk.ejs","hash":"117cade32db096798e4f270305cc129bac565332","modified":1581616376655},{"_id":"themes/matery/layout/_partial/github-link.ejs","hash":"fd4034bca2eb3987dcf113e6477260bee97eb1e7","modified":1581616376656},{"_id":"themes/matery/layout/_partial/gitment.ejs","hash":"d2d8c54432fce2468ee699a3bcba35bf8fcdf859","modified":1581616376656},{"_id":"themes/matery/layout/_partial/google-analytics.ejs","hash":"890c8f04c1f4905dfceb3ea9fd6efdd040d79c01","modified":1581616376657},{"_id":"themes/matery/layout/_partial/head.ejs","hash":"743a6d42eaa0e3f4fe9d10da3cbd9a92cee4f1db","modified":1581616376657},{"_id":"themes/matery/layout/_partial/header.ejs","hash":"9570641c5c823621bea4ee8bca377c204a72a089","modified":1582114619096},{"_id":"themes/matery/layout/_partial/index-cover.ejs","hash":"9fe7c9ea94b79084f3246551af62c01f854b855f","modified":1581616376658},{"_id":"themes/matery/layout/_partial/livere.ejs","hash":"42728561c09589f79b698eb059ab4def53ed3642","modified":1581616376659},{"_id":"themes/matery/layout/_partial/mobile-nav.ejs","hash":"a447919226bd51bdb9270b7b401129e1919ea9c1","modified":1582118535005},{"_id":"themes/matery/layout/_partial/navigation.ejs","hash":"7b0cd7bcde29cd6b2fc5d2d9345e1793b27359b7","modified":1581616376660},{"_id":"themes/matery/layout/_partial/paging.ejs","hash":"d8773abab5d0b672b70a9df20a8f9f7f6b0a2dae","modified":1581616376660},{"_id":"themes/matery/layout/_partial/post-cover.ejs","hash":"994d837755405aff3c7d54f62755ac1c79f75859","modified":1581616376661},{"_id":"themes/matery/layout/_partial/post-detail-toc.ejs","hash":"2779c6e8b25b216fc400423e561de5f0664b1c79","modified":1581616376661},{"_id":"themes/matery/layout/_partial/post-detail.ejs","hash":"f912575e60150230830324287181313f9c839ef4","modified":1581616376662},{"_id":"themes/matery/layout/_partial/post-statis.ejs","hash":"de0d5763ddd64463f43135678b64c044884b8406","modified":1581616376662},{"_id":"themes/matery/layout/_partial/prev-next.ejs","hash":"c91fa19c61e3625e8c7c7332466d819c0d544cb4","modified":1581616376663},{"_id":"themes/matery/layout/_partial/reprint-statement.ejs","hash":"cd556472b2d25270be359282854af1a166ca7092","modified":1581616376664},{"_id":"themes/matery/layout/_partial/reward.ejs","hash":"64041be4dea2ec9467164a14232b9af664c99315","modified":1581616376665},{"_id":"themes/matery/layout/_partial/search.ejs","hash":"125fc994c559d3234de91ed036851983666299b9","modified":1581616376666},{"_id":"themes/matery/layout/_partial/share.ejs","hash":"14fee5f7aaa0d00c21605a1619a0d992b47f85d3","modified":1581616376666},{"_id":"themes/matery/layout/_partial/social-link.ejs","hash":"f640583d45179abc1ef57951e7f61fb9e10f44c9","modified":1581616376667},{"_id":"themes/matery/layout/_partial/valine.ejs","hash":"8ce89390323bfc936e403b3e9bd8117b241e8e42","modified":1581616376667},{"_id":"themes/matery/layout/_widget/category-cloud.ejs","hash":"fbef418bc9e758486a155e4723804e722306ed1f","modified":1581616376668},{"_id":"themes/matery/layout/_widget/category-radar.ejs","hash":"7fcf36e06d428a983282bdce7b1aaa10c647dab2","modified":1581616376668},{"_id":"themes/matery/layout/_widget/dream.ejs","hash":"70122ee04acf56ad569d893e92e78b222d02342c","modified":1581616376669},{"_id":"themes/matery/layout/_widget/music.ejs","hash":"78f0e953f97820155a7383973a8a14af6e4e92dc","modified":1582118201192},{"_id":"themes/matery/layout/_widget/my-gallery.ejs","hash":"c4491329d6c7da2bc9dd5566e4d278633c4f5676","modified":1581616376670},{"_id":"themes/matery/layout/_widget/my-projects.ejs","hash":"48dfd9089c28de5025957d4d34006b4e960eacf1","modified":1581616376671},{"_id":"themes/matery/layout/_widget/my-skills.ejs","hash":"9edbeb1ec6212762d597ae7a05b5a219f72c8f98","modified":1581616376672},{"_id":"themes/matery/layout/_widget/post-calendar.ejs","hash":"853d950056f3437c04122064dab82758d2cb6d5c","modified":1581616376672},{"_id":"themes/matery/layout/_widget/post-charts.ejs","hash":"0824972bbf24533c6d8c35e973dc08271750f957","modified":1581616376673},{"_id":"themes/matery/layout/_widget/recommend.ejs","hash":"3907a5bbdf18a756af969e10591115009a88798b","modified":1581616376673},{"_id":"themes/matery/layout/_widget/tag-cloud.ejs","hash":"d32898104477acef56c33d00a68b48db15dcf2e6","modified":1581616376674},{"_id":"themes/matery/layout/_widget/tag-wordcloud.ejs","hash":"2c5ffabb205870d03fa074e8a340456dbe7dc84a","modified":1581616376674},{"_id":"themes/matery/layout/_widget/video.ejs","hash":"e7df5b08de55deb12662f6bc224497a013bb6745","modified":1581616376675},{"_id":"source/_posts/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215316131-1581710292501.png","hash":"9f931abebe88b928e5adaa8797764551419388f0","modified":1637751632104},{"_id":"source/_posts/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215316131.png","hash":"99b4bbc47e78385af06c6b58dfa5591a3f26f02e","modified":1637751632104},{"_id":"source/_posts/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215328854-1581710292745.png","hash":"450e19867c7c1302520cfcc5091a2388bac68ac1","modified":1637751632105},{"_id":"source/_posts/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215328854.png","hash":"450e19867c7c1302520cfcc5091a2388bac68ac1","modified":1637751632105},{"_id":"source/_posts/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215338473-1581710292744.png","hash":"7861f4e7002109e90d25dbf69a6e4118c0e6df2c","modified":1637751632106},{"_id":"source/_posts/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215338473.png","hash":"97c0dc75c43d480b1ec39297a1a3b80a7002c5ac","modified":1637751632107},{"_id":"source/_posts/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215350265.png","hash":"58b4d01e5f0d8da94860b6fecfbbe75bf5f7df1f","modified":1637751632108},{"_id":"source/_posts/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215350265-1581710292556.png","hash":"58b4d01e5f0d8da94860b6fecfbbe75bf5f7df1f","modified":1637751632107},{"_id":"source/_posts/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215956812-1581710292746.png","hash":"2231e509a086de5aa0c4493dabeafd9cd386182c","modified":1637751632114},{"_id":"source/_posts/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215956812.png","hash":"2231e509a086de5aa0c4493dabeafd9cd386182c","modified":1637751632115},{"_id":"source/_posts/hexo/11-29-09.jpg","hash":"4e4442c9ba5afbeff0ace48d2415a1769eb5789b","modified":1637751632120},{"_id":"source/_posts/hexo/11-29-27.jpg","hash":"d0b117c8340f95fd45383a453ccfd2c4cba7666d","modified":1637751632127},{"_id":"themes/matery/source/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1581616376995},{"_id":"themes/matery/source/medias/featureimages/13.jpg","hash":"66706dfde7d910182c2f1dbadd0e9e917630b8dd","modified":1581616377035},{"_id":"themes/matery/source/medias/featureimages/15.jpg","hash":"5cf9fc64d5d74ab6ba69bb8bff580fdc22ba32d0","modified":1581616377037},{"_id":"themes/matery/source/medias/featureimages/16.jpg","hash":"9cac6b80b0cc8959fc8aabfbd1adcab79ebebfc9","modified":1581616377038},{"_id":"themes/matery/source/medias/featureimages/2.jpg","hash":"16f1d89cdba4dce935ac0f12599e0fcfda543a93","modified":1581616377042},{"_id":"themes/matery/source/medias/featureimages/21.jpg","hash":"d70b088850c3565e5b5bb9eb8fe4abe688c964cf","modified":1581616377044},{"_id":"themes/matery/source/medias/featureimages/22.jpg","hash":"bf5b59d193e5ca089a7fff034c222bfa2c4dc41f","modified":1581616377045},{"_id":"themes/matery/source/medias/featureimages/23.jpg","hash":"ed5ac9f616d3b99af5188a10b1761884c37e93e5","modified":1581616377046},{"_id":"themes/matery/source/medias/featureimages/5.jpg","hash":"c3c1f36a1b1886037db604f151f335cd4599e970","modified":1581616377050},{"_id":"themes/matery/source/medias/featureimages/7.jpg","hash":"a0246a4a560438938489cdd154e35f172b3f31b0","modified":1581616377061},{"_id":"themes/matery/source/medias/featureimages/8.jpg","hash":"5a46ca4ab4c4ab2101a2af77a31a8878bccc483c","modified":1581616377062},{"_id":"themes/matery/source/medias/logo.png","hash":"36a5ddb5dbf71ac0724708ee15f657e3c4898d67","modified":1581703329525},{"_id":"themes/matery/source/medias/nekokecore.png","hash":"36a5ddb5dbf71ac0724708ee15f657e3c4898d67","modified":1581703329525},{"_id":"themes/matery/source/medias/reward/wechat.png","hash":"aeda7c428a9a7a939b4253547a0a9c79d8e2595c","modified":1581617562827},{"_id":"themes/matery/source/libs/animate/animate.min.css","hash":"5dfcbcee866e9dc564916416281885f3e320871e","modified":1581616376688},{"_id":"themes/matery/source/libs/aos/aos.css","hash":"ded9739f803d114c9168d3351fded72b3b478b4c","modified":1581616376689},{"_id":"themes/matery/source/libs/aos/aos.js","hash":"5a8e6d07ffa55642418ab3fd4b263aa08284b77a","modified":1581616376689},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.css","hash":"7f4f8913f2d46ade2def5134e2cc8684a4b87939","modified":1581616376690},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.js","hash":"70c0c4a9bf698747b7c058c21287ad617355e5dd","modified":1581616376691},{"_id":"themes/matery/source/libs/background/canvas-nest.js","hash":"d2569ef80127ed2f4af7ef4d9f82b037794eec69","modified":1581616376824},{"_id":"themes/matery/source/libs/background/ribbon-dynamic.js","hash":"8f53dbd5f9a40c377664bf8ca0d5d5ed75b91757","modified":1581616376825},{"_id":"themes/matery/source/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1581616376827},{"_id":"themes/matery/source/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1581616376827},{"_id":"themes/matery/source/libs/cryptojs/crypto-js.min.js","hash":"33810b2b757fc4327bc1d3b83bb5e0d3dc1fec5b","modified":1581616376832},{"_id":"themes/matery/source/libs/codeBlock/codeBlockFuction.js","hash":"a8133367d48199e7505c2d831ca848b4202b9ba6","modified":1581616376829},{"_id":"themes/matery/source/libs/codeBlock/codeCopy.js","hash":"6ab7871d36cab438bbd4d781bc1fe7618b46b6e7","modified":1581616376829},{"_id":"themes/matery/source/libs/codeBlock/codeLang.js","hash":"066d2c89ad429e44f6467b9267da782ccaad57de","modified":1581616376830},{"_id":"themes/matery/source/libs/codeBlock/codeShrink.js","hash":"3edbe498f7bb9e7daa77f9db30e1b5eeab40e067","modified":1581616376831},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.css","hash":"5d52d3b34fceb9d7e11f1beaf7ed380b4249dec4","modified":1581616376834},{"_id":"themes/matery/source/libs/gitalk/gitalk.css","hash":"9c0bacfbd4519d3859e3bbb06128ba241804d8b1","modified":1581616376885},{"_id":"themes/matery/source/libs/gitment/gitment-default.css","hash":"a0625d8b432af8bdc820f8768d36cde439e7257c","modified":1581616376888},{"_id":"themes/matery/source/libs/instantpage/instantpage.js","hash":"043eba3c85c2e2009a9fabf3c4fc55537852fd86","modified":1581616376890},{"_id":"themes/matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"26849509f196a2d21bbfd15696e5d5153163b8f1","modified":1581616376891},{"_id":"themes/matery/source/libs/jqcloud/jqcloud.css","hash":"4e6538c8312aeeab845d361c37a8c1a0931241f0","modified":1581616376891},{"_id":"themes/matery/source/libs/masonry/masonry.pkgd.min.js","hash":"f81cd7bfcf7aa2d043bd3e6077df42656fc44b82","modified":1581616376903},{"_id":"themes/matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1581616376908},{"_id":"themes/matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1581616376908},{"_id":"themes/matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1581616376909},{"_id":"themes/matery/source/libs/tocbot/tocbot.css","hash":"f646f2bb75bcd1eb65b2788ac7bf15d4fd243ce9","modified":1581616376917},{"_id":"themes/matery/source/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1581616376917},{"_id":"source/_posts/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215413958-1581710292740.png","hash":"05decb4a5eee366455b54f7cfbd73f2efc3a3797","modified":1637751632113},{"_id":"source/_posts/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215413958.png","hash":"05decb4a5eee366455b54f7cfbd73f2efc3a3797","modified":1637751632114},{"_id":"themes/matery/source/medias/banner/0.jpg","hash":"1f2ec55fe7825475fde2601573bb622f0bf2acba","modified":1581616376924},{"_id":"themes/matery/source/medias/banner/2.jpg","hash":"8d3c8391ff161eec70f66d69e5545a9468cc52ef","modified":1581616376927},{"_id":"themes/matery/source/medias/featureimages/0.jpg","hash":"2066cdda98ad0035071cd4aa7bd696eb078c0b6d","modified":1581616376997},{"_id":"themes/matery/source/medias/featureimages/1.jpg","hash":"d16e28bd23ea3a63643826dde5eea6b7a9bdda5d","modified":1581616376999},{"_id":"themes/matery/source/medias/featureimages/10.jpg","hash":"838e704942de076c60894d14e5f280e2724b6f68","modified":1581616377000},{"_id":"themes/matery/source/medias/featureimages/11.jpg","hash":"9ed45f95b83626e3d91d6c405eb8bfe6fcb9736a","modified":1581616377001},{"_id":"themes/matery/source/medias/featureimages/12.jpg","hash":"047be4239dd7e0be83243ee6b49a392a61f16b9a","modified":1581616377003},{"_id":"themes/matery/source/medias/featureimages/14.jpg","hash":"8aeb816faca2d5eaea4cce9e881d6ff87b8c7cf1","modified":1581616377036},{"_id":"themes/matery/source/medias/featureimages/17.jpg","hash":"f168ca5b046d10a878a7b0bcfab540e2c4428887","modified":1581616377039},{"_id":"themes/matery/source/medias/featureimages/18.jpg","hash":"ae23fdfaa59bc57b7ed49e90c5d59e4b68e1eea5","modified":1581616377040},{"_id":"themes/matery/source/medias/featureimages/19.jpg","hash":"57bc7c804b78b5cceb4eb1f9e51b734b75151b71","modified":1581616377041},{"_id":"themes/matery/source/medias/featureimages/20.jpg","hash":"8271c4a327632b566ea62f546c083d08a0528e72","modified":1581616377043},{"_id":"themes/matery/source/medias/featureimages/3.jpg","hash":"5e879652e032f02961a331b598a50b60ebe80a39","modified":1581616377047},{"_id":"themes/matery/source/medias/featureimages/4.jpg","hash":"4eea5bdb5724ef1ed65790e481eda0d2fb176bf0","modified":1581616377049},{"_id":"themes/matery/source/medias/featureimages/6.jpg","hash":"c63ff64bdd5f6c82da8804c7248fc519d23eaf0b","modified":1581616377060},{"_id":"themes/matery/source/medias/featureimages/9.jpg","hash":"815c84778b721e3606c2bd7c099c7de7c53251ba","modified":1581616377064},{"_id":"themes/matery/source/medias/reward/alipay.jpg","hash":"399d5e0fb4a8e9285645638eb97bb94b7b6cd796","modified":1581617511506},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.js","hash":"82276be41d2001e820020a219b90ad5b026302d1","modified":1581616376835},{"_id":"themes/matery/source/libs/gitment/gitment.js","hash":"5a13983930b019450e4fe01a407c64b3dd316be4","modified":1581616376889},{"_id":"themes/matery/source/libs/jquery/jquery.min.js","hash":"a8927ac2830b2fdd4a729eb0eb7f80923539ceb9","modified":1581616376893},{"_id":"themes/matery/source/libs/valine/Valine.min.js","hash":"d6c03e8c3e547b5f48878081d10559b80f626948","modified":1581616376919},{"_id":"themes/matery/source/medias/banner/1.jpg","hash":"c3d5ab183b39a7140941b8375e29498f9d24f343","modified":1581616376926},{"_id":"themes/matery/source/medias/banner/3.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1581616376929},{"_id":"themes/matery/source/medias/banner/5.jpg","hash":"4a08deec1dd5b4f1490e8fc23adfb75a0f88b0c4","modified":1581616376992},{"_id":"themes/matery/source/medias/banner/6.jpg","hash":"62e9586a8cec91a160f147c424a3d1d1aea360f9","modified":1581616376993},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1581616376796},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1581616376806},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1581616376807},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1581616376807},{"_id":"themes/matery/source/libs/gitalk/gitalk.min.js","hash":"7a3534269fd922d722a76c3affefc68e21246898","modified":1581616376887},{"_id":"themes/matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1581616376894},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1581616376895},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1581616376896},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.svg","hash":"3480f00d284c812d623ed16a9e0ead3fb964c72e","modified":1581616376895},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1581616376897},{"_id":"themes/matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1581616376898},{"_id":"themes/matery/source/libs/lightGallery/img/video-play.png","hash":"fbfdbe06aebf7d0c00da175a4810cf888d128f11","modified":1581616376898},{"_id":"themes/matery/source/libs/lightGallery/img/vimeo-play.png","hash":"1142b47de219dddfba2e712cd3189dec0c8b7bee","modified":1581616376899},{"_id":"themes/matery/source/libs/lightGallery/img/youtube-play.png","hash":"39150b45ec5fc03155b7ebeaa44f1829281788e2","modified":1581616376900},{"_id":"themes/matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"f8cd48e1fff82ecd54a7ce3e69de8dba7c92d113","modified":1581616376902},{"_id":"themes/matery/source/libs/materialize/materialize.min.css","hash":"80ae4aa0dba3634dd9bf59586d541d2dd8d8191c","modified":1581616376905},{"_id":"themes/matery/source/libs/materialize/materialize.min.js","hash":"c843f0dc497314574c608ca28cc742bb041786d5","modified":1581616376907},{"_id":"themes/matery/source/libs/share/css/share.min.css","hash":"7126de5cec8371e580b7b1f22512da0985cc39e5","modified":1581616376910},{"_id":"themes/matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1581616376911},{"_id":"themes/matery/source/libs/share/fonts/iconfont.svg","hash":"337b4f156f6d8f4beb32c32a3db46fef361cff74","modified":1581616376912},{"_id":"themes/matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1581616376912},{"_id":"themes/matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1581616376913},{"_id":"themes/matery/source/libs/share/js/jquery.share.min.js","hash":"de34668d902ec082d17ddb6dd7ad24255fb547c5","modified":1581616376915},{"_id":"themes/matery/source/libs/share/js/social-share.min.js","hash":"ba635a17a9d9d132369f9fe4b1fbcaf001ea6ac9","modified":1581616376916},{"_id":"themes/matery/source/libs/valine/av-min.js","hash":"9cb4babc20eb8fb5a86c4b0cc894fdb0f3cd9534","modified":1581616376921},{"_id":"source/_posts/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215400518-1581710292743.png","hash":"8816f582b49588285a8c701cc911932bd8bb8a70","modified":1637751632110},{"_id":"source/_posts/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215400518.png","hash":"49674d7bfbc1117f9d01dc1bbaf6ab742abf4820","modified":1637751632112},{"_id":"source/_posts/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802220117307-1581710292747.png","hash":"96e12f1d5336b11494586ba12c1281ddb9305479","modified":1637751632117},{"_id":"source/_posts/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802220117307.png","hash":"759ae9ec549d79bde19995961de10cdbcf4a99d0","modified":1637751632119},{"_id":"themes/matery/source/libs/awesome/css/all.css","hash":"6390d0a6e6211ebbd68b49759b4dec8b2a9f04c9","modified":1581616376693},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1581616376746},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1581616376794},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1581616376795},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1581616376796},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1581616376823},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1581616376824},{"_id":"themes/matery/source/medias/banner/4.jpg","hash":"56850c3139cbd72a0eff0c35d8fac32c9c66dd6a","modified":1581616376990},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.svg","hash":"3fbb04fe98ec0dd06dcfbf9da2d56efc200d7454","modified":1581616376799},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1581616376810},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1581616376822},{"_id":"themes/matery/source/libs/echarts/echarts.min.js","hash":"8789b5e4daf0029a6c88f238f10e54d01c4fce82","modified":1581616376884},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.svg","hash":"05a5476e6911a95180006599da5f68e474efd708","modified":1581616376790},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.svg","hash":"1612cf2120a89a8c716a3bc8e07b22ce108bbec2","modified":1581616376818}],"Category":[{"name":"工具","_id":"ckweswgi50004e8vhcpt27ycl"},{"name":"学习","_id":"ckweswgia000be8vh71pe28t6"},{"name":"Bugs","_id":"ckweswgii000oe8vh10az96h7"},{"name":"Linux","_id":"ckweswgik000ue8vh2kvddqob"}],"Data":[{"_id":"friends","data":[{"avatar":"http://q1.qlogo.cn/g?b=qq&nk=2750360683&s=640","name":"核心","introduction":"来自山东的一位普通高中生,喜欢捣鼓2333，爱好编程（新手）","url":"http://www.emtips.net/","title":"Piu~"},{"avatar":"https://i2.hdslb.com/bfs/face/2433a7d4053048811fec9907bcb066e867399da7.jpg","name":"SRO","introduction":"欢迎来到SRO知识库,您在这里可以看到大多数的SRO内部，外部资料","url":"https://sromc.cn/","title":"Piu~"},{"avatar":"http://q1.qlogo.cn/g?b=qq&nk=1692565761&s=640","name":"河南省商务中等职业学校","introduction":"网络搭建竞赛组","url":"https://hnswxx.cn/","title":"Piu~"},{"avatar":"http://q1.qlogo.cn/g?b=qq&nk=2191023046&s=640","name":"贺兰星辰","introduction":"HikariLan's Blog","url":"https://my.minecraft.kim/","title":"Piu~"}]}],"Page":[{"title":"contact","date":"2020-02-13T17:59:49.000Z","type":"contact","layout":"contact","_content":"","source":"contact/index.md","raw":"---\ntitle: contact\ndate: 2020-02-14 01:59:49\ntype: \"contact\"\nlayout: \"contact\"\n---\n","updated":"2021-11-24T11:00:32.129Z","path":"contact/index.html","comments":1,"_id":"ckweswgi10001e8vh2kul1mbj","content":"","site":{"data":{"friends":[{"avatar":"http://q1.qlogo.cn/g?b=qq&nk=2750360683&s=640","name":"核心","introduction":"来自山东的一位普通高中生,喜欢捣鼓2333，爱好编程（新手）","url":"http://www.emtips.net/","title":"Piu~"},{"avatar":"https://i2.hdslb.com/bfs/face/2433a7d4053048811fec9907bcb066e867399da7.jpg","name":"SRO","introduction":"欢迎来到SRO知识库,您在这里可以看到大多数的SRO内部，外部资料","url":"https://sromc.cn/","title":"Piu~"},{"avatar":"http://q1.qlogo.cn/g?b=qq&nk=1692565761&s=640","name":"河南省商务中等职业学校","introduction":"网络搭建竞赛组","url":"https://hnswxx.cn/","title":"Piu~"},{"avatar":"http://q1.qlogo.cn/g?b=qq&nk=2191023046&s=640","name":"贺兰星辰","introduction":"HikariLan's Blog","url":"https://my.minecraft.kim/","title":"Piu~"}]}},"excerpt":"","more":""},{"title":"about","date":"2020-02-13T17:59:28.000Z","type":"about","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2020-02-14 01:59:28\ntype: \"about\"\nlayout: \"about\"\n---\n","updated":"2021-11-24T11:00:32.129Z","path":"about/index.html","comments":1,"_id":"ckweswgi40003e8vhf1c7a5bw","content":"","site":{"data":{"friends":[{"avatar":"http://q1.qlogo.cn/g?b=qq&nk=2750360683&s=640","name":"核心","introduction":"来自山东的一位普通高中生,喜欢捣鼓2333，爱好编程（新手）","url":"http://www.emtips.net/","title":"Piu~"},{"avatar":"https://i2.hdslb.com/bfs/face/2433a7d4053048811fec9907bcb066e867399da7.jpg","name":"SRO","introduction":"欢迎来到SRO知识库,您在这里可以看到大多数的SRO内部，外部资料","url":"https://sromc.cn/","title":"Piu~"},{"avatar":"http://q1.qlogo.cn/g?b=qq&nk=1692565761&s=640","name":"河南省商务中等职业学校","introduction":"网络搭建竞赛组","url":"https://hnswxx.cn/","title":"Piu~"},{"avatar":"http://q1.qlogo.cn/g?b=qq&nk=2191023046&s=640","name":"贺兰星辰","introduction":"HikariLan's Blog","url":"https://my.minecraft.kim/","title":"Piu~"}]}},"excerpt":"","more":""},{"title":"categories","date":"2020-02-13T17:58:47.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2020-02-14 01:58:47\ntype: \"categories\"\nlayout: \"categories\"\n---\n","updated":"2021-11-24T11:00:32.129Z","path":"categories/index.html","comments":1,"_id":"ckweswgi70007e8vh2k2pfoqb","content":"","site":{"data":{"friends":[{"avatar":"http://q1.qlogo.cn/g?b=qq&nk=2750360683&s=640","name":"核心","introduction":"来自山东的一位普通高中生,喜欢捣鼓2333，爱好编程（新手）","url":"http://www.emtips.net/","title":"Piu~"},{"avatar":"https://i2.hdslb.com/bfs/face/2433a7d4053048811fec9907bcb066e867399da7.jpg","name":"SRO","introduction":"欢迎来到SRO知识库,您在这里可以看到大多数的SRO内部，外部资料","url":"https://sromc.cn/","title":"Piu~"},{"avatar":"http://q1.qlogo.cn/g?b=qq&nk=1692565761&s=640","name":"河南省商务中等职业学校","introduction":"网络搭建竞赛组","url":"https://hnswxx.cn/","title":"Piu~"},{"avatar":"http://q1.qlogo.cn/g?b=qq&nk=2191023046&s=640","name":"贺兰星辰","introduction":"HikariLan's Blog","url":"https://my.minecraft.kim/","title":"Piu~"}]}},"excerpt":"","more":""},{"title":"friends","date":"2020-02-13T18:00:09.000Z","type":"friends","layout":"friends","_content":"","source":"friends/index.md","raw":"---\ntitle: friends\ndate: 2020-02-14 02:00:09\ntype: \"friends\"\nlayout: \"friends\"\n---\n","updated":"2021-11-24T11:00:32.129Z","path":"friends/index.html","comments":1,"_id":"ckweswgi90009e8vhdj9zcs6f","content":"","site":{"data":{"friends":[{"avatar":"http://q1.qlogo.cn/g?b=qq&nk=2750360683&s=640","name":"核心","introduction":"来自山东的一位普通高中生,喜欢捣鼓2333，爱好编程（新手）","url":"http://www.emtips.net/","title":"Piu~"},{"avatar":"https://i2.hdslb.com/bfs/face/2433a7d4053048811fec9907bcb066e867399da7.jpg","name":"SRO","introduction":"欢迎来到SRO知识库,您在这里可以看到大多数的SRO内部，外部资料","url":"https://sromc.cn/","title":"Piu~"},{"avatar":"http://q1.qlogo.cn/g?b=qq&nk=1692565761&s=640","name":"河南省商务中等职业学校","introduction":"网络搭建竞赛组","url":"https://hnswxx.cn/","title":"Piu~"},{"avatar":"http://q1.qlogo.cn/g?b=qq&nk=2191023046&s=640","name":"贺兰星辰","introduction":"HikariLan's Blog","url":"https://my.minecraft.kim/","title":"Piu~"}]}},"excerpt":"","more":""},{"title":"tags","date":"2020-02-13T17:59:11.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2020-02-14 01:59:11\ntype: \"tags\"\nlayout: \"tags\"\n---\n","updated":"2021-11-24T11:00:32.129Z","path":"tags/index.html","comments":1,"_id":"ckweswgib000de8vhag7n8vaj","content":"","site":{"data":{"friends":[{"avatar":"http://q1.qlogo.cn/g?b=qq&nk=2750360683&s=640","name":"核心","introduction":"来自山东的一位普通高中生,喜欢捣鼓2333，爱好编程（新手）","url":"http://www.emtips.net/","title":"Piu~"},{"avatar":"https://i2.hdslb.com/bfs/face/2433a7d4053048811fec9907bcb066e867399da7.jpg","name":"SRO","introduction":"欢迎来到SRO知识库,您在这里可以看到大多数的SRO内部，外部资料","url":"https://sromc.cn/","title":"Piu~"},{"avatar":"http://q1.qlogo.cn/g?b=qq&nk=1692565761&s=640","name":"河南省商务中等职业学校","introduction":"网络搭建竞赛组","url":"https://hnswxx.cn/","title":"Piu~"},{"avatar":"http://q1.qlogo.cn/g?b=qq&nk=2191023046&s=640","name":"贺兰星辰","introduction":"HikariLan's Blog","url":"https://my.minecraft.kim/","title":"Piu~"}]}},"excerpt":"","more":""}],"Post":[{"title":"一个开源、轻量且类似于Servo/Ngrok的内网穿透工具","typora-copy-images-to":"AnOpenSource,LightweightIntranetPenetrationToolSimilarToServo/Ngrok","date":"2020-02-14T20:11:03.000Z","_content":"\n**说明：**`sish`是一个`SSH`服务器，仅用于远程端口转发，可以快速将本地端口暴露在外网，作者声称其为`Servo`/`Ngrok`替代方案，仅使用`SSH`的`HTTP(S)`、`WS(S)`、`TCP`隧道连接到他们的`localhost`服务器，该工具和[Servo](https://www.moerats.com/archives/990/)差不多一样，不同就是`Servo`官方提供了免费的`SSH`客户端，而`sish`作者提供的客户端貌似因为滥用关闭了，所以就需要我们自己搭建了，这里就水下`Docker`和手动安装。\n\n## Docker安装\n\n**Github地址：**https://github.com/antoniomika/sish\n\n**1、安装Docker**\n\n```\n#CentOS 6\nrpm -iUvh http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm\nyum update -y\nyum -y install docker-io\nservice docker start\nchkconfig docker on\n\n#CentOS 7、Debian、Ubuntu\ncurl -sSL https://get.docker.com/ | sh\nsystemctl start docker\nsystemctl enable docker\n```\n\n**2、拉取镜像**\n这里由于直接使用`ip`的话，只能用于转发`TCP`，`HTTP(S)`等就需要配置下域名了，所以以下全部默认使用域名。\n\n先解析一个主/泛域名到服务器`ip`，比如解析`moerats.com`、`*.moerats.com`到服务器`ip`。\n\n然后再参考下面的参数详解，再自行修改部分参数后，使用命令：\n\n```\n#配置http域名\ndocker run -d --name sish \\\n  --restart=always \\\n  -v ~/sish/keys:/keys \\\n  -v ~/sish/pubkeys:/pubkeys \\\n  --net=host antoniomika/sish \\\n  -sish.addr=:3333 \\\n  -sish.http=:80 \\\n  -sish.keysdir=/pubkeys \\\n  -sish.pkloc=/keys/ssh_key \\\n  -sish.forcerandomsubdomain=false \\\n  -sish.domain moerats.com \\\n  -sish.bindrandom=false \\\n  -sish.redirectrootlocation https://www.baidu.com \n\n#配置https域名，这里需要提供泛域名证书\ndocker run -d --name sish \\\n  --restart=always \\\n  -v ~/sish/ssl:/ssl \\\n  -v ~/sish/keys:/keys \\\n  -v ~/sish/pubkeys:/pubkeys \\\n  --net=host antoniomika/sish \\\n  -sish.addr=:3333 \\\n  -sish.https=:443 \\\n  -sish.http=:80 \\\n  -sish.httpsenabled=true \\\n  -sish.httpspems=/ssl \\\n  -sish.keysdir=/pubkeys \\\n  -sish.pkloc=/keys/ssh_key \\\n  -sish.forcerandomsubdomain=false \\\n  -sish.domain moerats.com \\\n  -sish.bindrandom=false \\\n  -sish.redirectrootlocation https://www.baidu.com\n```\n\n部分参数如下：\n\n```\n-sish.addr=:3333  #ssh监听地址\n-sish.forcerandomsubdomain=false  #是否强制随机子域，这个建议关掉\n-sish.bindrandom=false  #是否随机绑定端口，这个建议关掉\n-sish.domain moerats.com  #使用的域名\n-sish.redirectrootlocation https://www.baidu.com  #主域名(-sish.domain参数)强制跳转到该地址\n-sish.httpspems=/ssl  #泛域名SSL证书路径，存放路径~/sish/ssl，证书命名格式fullchain.pem和privkey.pem\n```\n\n其他参数默认即可，也可以自行添加或修改其它参数。\n\n全部参数如下：\n\n```\nUsage of sish:\n  -sish.addr string\n        The address to listen for SSH connections (default \"localhost:2222\")\n  -sish.auth\n        Whether or not to require auth on the SSH service\n  -sish.bannedcountries string\n        A comma separated list of banned countries\n  -sish.bannedips string\n        A comma separated list of banned ips\n  -sish.bannedsubdomains string\n        A comma separated list of banned subdomains (default \"localhost\")\n  -sish.bindrandom\n        Bind ports randomly (OS chooses) (default true)\n  -sish.bindrange string\n        Ports that are allowed to be bound (default \"0,1024-65535\")\n  -sish.cleanupunbound\n        Whether or not to cleanup unbound (forwarded) SSH connections (default true)\n  -sish.debug\n        Whether or not to print debug information\n  -sish.domain string\n        The domain for HTTP(S) multiplexing (default \"ssi.sh\")\n  -sish.forcerandomsubdomain\n        Whether or not to force a random subdomain (default true)\n  -sish.http string\n        The address to listen for HTTP connections (default \"localhost:80\")\n  -sish.httpport int\n        The port for HTTP connections. This is only for output messages (default 80)\n  -sish.https string\n        The address to listen for HTTPS connections (default \"localhost:443\")\n  -sish.httpsenabled\n        Whether or not to listen for HTTPS connections\n  -sish.httpspems string\n        The location of pem files for HTTPS (fullchain.pem and privkey.pem) (default \"ssl/\")\n  -sish.httpsport int\n        The port for HTTPS connections. This is only for output messages (default 443)\n  -sish.keysdir string\n        Directory for public keys for pubkey auth (default \"pubkeys/\")\n  -sish.password string\n        Password to use for password auth (default \"S3Cr3tP4$$W0rD\")\n  -sish.pkloc string\n        SSH server private key (default \"keys/ssh_key\")\n  -sish.pkpass string\n        Passphrase to use for the server private key (default \"S3Cr3tP4$$phrAsE\")\n  -sish.proxyprotoenabled\n        Whether or not to enable the use of the proxy protocol\n  -sish.proxyprotoversion string\n        What version of the proxy protocol to use. Can either be 1, 2, or userdefined. If userdefined, the user needs to add a command to SSH called proxy:version (ie proxy:1) (default \"1\")\n  -sish.redirectroot\n        Whether or not to redirect the root domain (default true)\n  -sish.redirectrootlocation string\n        Where to redirect the root domain to (default \"https://github.com/antoniomika/sish\")\n  -sish.subdomainlen int\n        The length of the random subdomain to generate (default 3)\n  -sish.usegeodb\n        Whether or not to use the maxmind geodb\n  -sish.verifyorigin\n        Whether or not to verify origin on websocket connection (default true)\n  -sish.verifyssl\n        Whether or not to verify SSL on proxy connection (default true)\n  -sish.whitelistedcountries string\n        A comma separated list of whitelisted countries\n  -sish.whitelistedips string\n        A comma separated list of whitelisted ips\n```\n\n看不懂的，可以使用下谷歌翻译。\n\n最后`CentOS`系统建议关闭防火墙使用，或者打开部分端口也行，关闭命令：\n\n```\n#CentOS 6系统\nservice iptables stop\nchkconfig iptables off\n\n#CentOS 7系统\nsystemctl stop firewalld\nsystemctl disable firewalld\n```\n\n像阿里云等服务器，还需要去安全组那里开放下端口。\n\n## 手动安装\n\n`Docker`虽然方便很多，但也有人会喜欢手动安装，这里作者没直接给出二进制文件，所以就需要我们手动来构建二进制文件了。\n\n**1、安装Go**\n这里由于需要新版的`Go`环境，所以这里就使用`Go`二进制包安装环境，下载地址→[传送门](https://golang.org/dl/)。\n\n然后根据自己的服务器架构下载对应的最新安装包，一般可以直接使用命令：\n\n```\n#32位系统下载\nwget -O go.tar.gz https://dl.google.com/go/go1.13.3.linux-386.tar.gz\n#64位系统下载\nwget -O go.tar.gz https://dl.google.com/go/go1.13.3.linux-amd64.tar.gz\n\n#解压压缩包\ntar -zxvf go.tar.gz -C /usr/local\n#设置环境变量，将以下一起复制进ssh客户端运行\nmkdir $HOME/go\necho 'export GOROOT=/usr/local/go\nexport GOPATH=$HOME/go\nexport PATH=$PATH:$GOROOT/bin:$GOPATH/bin' >> /etc/profile\nsource /etc/profile\n#查看go版本，有输出即为安装成功\ngo version\n```\n\n**2、安装sish**\n\n```\n#下载源码到主目录\ngit clone https://github.com/antoniomika/sish\ncd sish\n#编译二进制文件\ngo install\n```\n\n这里提示`-bash: git: command not found`的，可以先使用命令：\n\n```\n#CentOS\nyum -y install git\n\n#Debian、Ubuntu\napt install git -y\n```\n\n**3、运行sish**\n运行参数这里就不贴了，直接参考上面`Docker`安装最下面的全部参数就行了。\n\n先解析一个主/泛域名到服务器`ip`，比如解析`moerats.com`、`*.moerats.com`到服务器`ip`。\n\n这里就贴个大概需要使用的参数，其它的根据需求自行修改，使用命令：\n\n```\n#配置http域名\nsish -sish.addr=:3333 -sish.http=:80 -sish.domain moerats.com -sish.forcerandomsubdomain=false -sish.bindrandom=false -sish.redirectrootlocation https://www.moerats.com -sish.keysdir=/sish/pubkeys -sish.pkloc=/sish/keys/ssh_key \n\n#配置https域名\nsish -sish.addr=:3333 -sish.https=:443 -sish.http=:80 -sish.domain moerats.com -sish.forcerandomsubdomain=false -sish.bindrandom=false -sish.httpsenabled=true -sish.redirectrootlocation https://www.moerats.com -sish.keysdir=/sish/pubkeys -sish.pkloc=/sish/keys/ssh_key -sish.httpspems=/sish/ssl\n```\n\n部分参数详解：\n\n```\n-sish.addr=:3333  #ssh监听地址，这里为3333\n-sish.forcerandomsubdomain=false  #是否强制随机子域，这个建议关掉\n-sish.bindrandom=false  #是否随机绑定端口，这个建议关掉\n-sish.domain moerats.com  #使用的域名\n-sish.redirectrootlocation https://www.baidu.com  #主域名(-sish.domain参数)强制跳转到该地址\n-sish.httpspems=/sish/ssl  #泛域名SSL证书存放路径，证书命名格式fullchain.pem和privkey.pem\n-sish.keysdir=/sish/pubkeys  #pubkey auth的公共密钥存放文件夹\n-sish.pkloc=/sish/keys/ssh_key  #SSH服务器私钥\n```\n\n这里`/sish/ssl`、`/sish/pubkeys`、`/sish/keys`目录需要自己提前创建下，使用命令：\n\n```\nmkdir -p /sish/ssl /sish/pubkeys /sish/keys\n```\n\n**4、开机自启**\n如果你使用手动命令没问题了，先使用`Ctrl+C`断开命令。\n\n再新建`systemd`配置文件，适用`CentOS 7`、`Debian 8+`、`Ubuntu 16+`。\n\n```\n#修改成你手动运行命令的全部参数\ncommand=\"-sish.addr=:3333 -sish.http=:80 -sish.domain moerats.com -sish.forcerandomsubdomain=false -sish.bindrandom=false -sish.redirectrootlocation https://www.moerats.com -sish.keysdir=/sish/pubkeys -sish.pkloc=/sish/keys\"\n#将以下代码一起复制到SSH运行\ncat > /etc/systemd/system/sish.service <<EOF\n[Unit]\nDescription=sish\nAfter=network.target\n\n[Service]\nType=simple\nExecStart=$(command -v sish) ${command}\nRestart=on-failure\n\n[Install]\nWantedBy=multi-user.target\nEOF\n```\n\n启动并设置开机自启：\n\n```\nsystemctl start sish\nsystemctl enable sish\n```\n\n最后`CentOS`系统建议关闭防火墙使用，或者打开部分端口也行，关闭命令：\n\n```\n#CentOS 6系统\nservice iptables stop\nchkconfig iptables off\n\n#CentOS 7系统\nsystemctl stop firewalld\nsystemctl disable firewalld\n```\n\n像阿里云等服务器，还需要去安全组那里开放下端口。\n\n## 使用\n\n使用要求：可以使用`SSH`，并且能连接到互联网，`Linux`、`Windows`等系统都行。\n\n以下所使用的的`moerats.com`为上面配置好的客户端域名地址，自行修改成自己的即可。\n\n**1、转发HTTP(S)**\n将本地`3000`端口穿透到公网中，使用命令：\n\n```\n#要转发其它端口的自行替换\nssh -p 3333 -R 80:localhost:3000 moerats.com\n```\n\n第一次如果有提示，选择`yes`即可，之后会为你随机生成一个`moerats.com`的二级域名，然后就可以使用浏览器间接访问本地的`localhost:3000`了。\n\n如果要指定二级域名，可以使用命令：\n\n```\n#这里默认为no1.moerats.com，自行替换即可\nssh -p 3333 -R no1:80:localhost:3000 moerats.com\n```\n\n此时你就可以在外网使用`no1.moerats.com`访问你本地的`localhost:3000`了。\n\n**2、转发TCP**\n将本地`6789`端口穿透到公网的`9876`端口中，使用命令：\n\n```\n#可以自行设置公网端口，这里默认6789，如果你要转发SSH端口，那就改成你的SSH端口\nssh -p 3333 -R 9876:localhost:6789 moerats.com\n```\n\n这里只说了下简单用法，客户端我们还可以设置国家/地区、`IP`白名单等，使用参考→[传送门](https://github.com/antoniomika/sish#whitelisting-ips)。\n\n最后没有泛域名证书的，可以查看该教程自己申请→[传送门](https://www.moerats.com/archives/900/)，或者等博主发码子→[传送门](https://www.moerats.com/archives/996/)。\n\n------\n\n> 版权声明：本文为原创文章，版权归 [Rat's Blog](https://www.moerats.com/) 所有，转载请注明出处！\n>\n> 本文链接：https://www.moerats.com/archives/1002/","source":"_posts/AnOpenSource-LightweightIntranetPenetrationToolSimilarToServo-Ngrok.md","raw":"---\ntitle: '一个开源、轻量且类似于Servo/Ngrok的内网穿透工具'\ntypora-copy-images-to: 'AnOpenSource,LightweightIntranetPenetrationToolSimilarToServo/Ngrok'\ndate: 2020-02-15 04:11:03\ntags:\n- 转载\n- Linux\n- 搭建教程\ncategories:\n- 工具\n---\n\n**说明：**`sish`是一个`SSH`服务器，仅用于远程端口转发，可以快速将本地端口暴露在外网，作者声称其为`Servo`/`Ngrok`替代方案，仅使用`SSH`的`HTTP(S)`、`WS(S)`、`TCP`隧道连接到他们的`localhost`服务器，该工具和[Servo](https://www.moerats.com/archives/990/)差不多一样，不同就是`Servo`官方提供了免费的`SSH`客户端，而`sish`作者提供的客户端貌似因为滥用关闭了，所以就需要我们自己搭建了，这里就水下`Docker`和手动安装。\n\n## Docker安装\n\n**Github地址：**https://github.com/antoniomika/sish\n\n**1、安装Docker**\n\n```\n#CentOS 6\nrpm -iUvh http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm\nyum update -y\nyum -y install docker-io\nservice docker start\nchkconfig docker on\n\n#CentOS 7、Debian、Ubuntu\ncurl -sSL https://get.docker.com/ | sh\nsystemctl start docker\nsystemctl enable docker\n```\n\n**2、拉取镜像**\n这里由于直接使用`ip`的话，只能用于转发`TCP`，`HTTP(S)`等就需要配置下域名了，所以以下全部默认使用域名。\n\n先解析一个主/泛域名到服务器`ip`，比如解析`moerats.com`、`*.moerats.com`到服务器`ip`。\n\n然后再参考下面的参数详解，再自行修改部分参数后，使用命令：\n\n```\n#配置http域名\ndocker run -d --name sish \\\n  --restart=always \\\n  -v ~/sish/keys:/keys \\\n  -v ~/sish/pubkeys:/pubkeys \\\n  --net=host antoniomika/sish \\\n  -sish.addr=:3333 \\\n  -sish.http=:80 \\\n  -sish.keysdir=/pubkeys \\\n  -sish.pkloc=/keys/ssh_key \\\n  -sish.forcerandomsubdomain=false \\\n  -sish.domain moerats.com \\\n  -sish.bindrandom=false \\\n  -sish.redirectrootlocation https://www.baidu.com \n\n#配置https域名，这里需要提供泛域名证书\ndocker run -d --name sish \\\n  --restart=always \\\n  -v ~/sish/ssl:/ssl \\\n  -v ~/sish/keys:/keys \\\n  -v ~/sish/pubkeys:/pubkeys \\\n  --net=host antoniomika/sish \\\n  -sish.addr=:3333 \\\n  -sish.https=:443 \\\n  -sish.http=:80 \\\n  -sish.httpsenabled=true \\\n  -sish.httpspems=/ssl \\\n  -sish.keysdir=/pubkeys \\\n  -sish.pkloc=/keys/ssh_key \\\n  -sish.forcerandomsubdomain=false \\\n  -sish.domain moerats.com \\\n  -sish.bindrandom=false \\\n  -sish.redirectrootlocation https://www.baidu.com\n```\n\n部分参数如下：\n\n```\n-sish.addr=:3333  #ssh监听地址\n-sish.forcerandomsubdomain=false  #是否强制随机子域，这个建议关掉\n-sish.bindrandom=false  #是否随机绑定端口，这个建议关掉\n-sish.domain moerats.com  #使用的域名\n-sish.redirectrootlocation https://www.baidu.com  #主域名(-sish.domain参数)强制跳转到该地址\n-sish.httpspems=/ssl  #泛域名SSL证书路径，存放路径~/sish/ssl，证书命名格式fullchain.pem和privkey.pem\n```\n\n其他参数默认即可，也可以自行添加或修改其它参数。\n\n全部参数如下：\n\n```\nUsage of sish:\n  -sish.addr string\n        The address to listen for SSH connections (default \"localhost:2222\")\n  -sish.auth\n        Whether or not to require auth on the SSH service\n  -sish.bannedcountries string\n        A comma separated list of banned countries\n  -sish.bannedips string\n        A comma separated list of banned ips\n  -sish.bannedsubdomains string\n        A comma separated list of banned subdomains (default \"localhost\")\n  -sish.bindrandom\n        Bind ports randomly (OS chooses) (default true)\n  -sish.bindrange string\n        Ports that are allowed to be bound (default \"0,1024-65535\")\n  -sish.cleanupunbound\n        Whether or not to cleanup unbound (forwarded) SSH connections (default true)\n  -sish.debug\n        Whether or not to print debug information\n  -sish.domain string\n        The domain for HTTP(S) multiplexing (default \"ssi.sh\")\n  -sish.forcerandomsubdomain\n        Whether or not to force a random subdomain (default true)\n  -sish.http string\n        The address to listen for HTTP connections (default \"localhost:80\")\n  -sish.httpport int\n        The port for HTTP connections. This is only for output messages (default 80)\n  -sish.https string\n        The address to listen for HTTPS connections (default \"localhost:443\")\n  -sish.httpsenabled\n        Whether or not to listen for HTTPS connections\n  -sish.httpspems string\n        The location of pem files for HTTPS (fullchain.pem and privkey.pem) (default \"ssl/\")\n  -sish.httpsport int\n        The port for HTTPS connections. This is only for output messages (default 443)\n  -sish.keysdir string\n        Directory for public keys for pubkey auth (default \"pubkeys/\")\n  -sish.password string\n        Password to use for password auth (default \"S3Cr3tP4$$W0rD\")\n  -sish.pkloc string\n        SSH server private key (default \"keys/ssh_key\")\n  -sish.pkpass string\n        Passphrase to use for the server private key (default \"S3Cr3tP4$$phrAsE\")\n  -sish.proxyprotoenabled\n        Whether or not to enable the use of the proxy protocol\n  -sish.proxyprotoversion string\n        What version of the proxy protocol to use. Can either be 1, 2, or userdefined. If userdefined, the user needs to add a command to SSH called proxy:version (ie proxy:1) (default \"1\")\n  -sish.redirectroot\n        Whether or not to redirect the root domain (default true)\n  -sish.redirectrootlocation string\n        Where to redirect the root domain to (default \"https://github.com/antoniomika/sish\")\n  -sish.subdomainlen int\n        The length of the random subdomain to generate (default 3)\n  -sish.usegeodb\n        Whether or not to use the maxmind geodb\n  -sish.verifyorigin\n        Whether or not to verify origin on websocket connection (default true)\n  -sish.verifyssl\n        Whether or not to verify SSL on proxy connection (default true)\n  -sish.whitelistedcountries string\n        A comma separated list of whitelisted countries\n  -sish.whitelistedips string\n        A comma separated list of whitelisted ips\n```\n\n看不懂的，可以使用下谷歌翻译。\n\n最后`CentOS`系统建议关闭防火墙使用，或者打开部分端口也行，关闭命令：\n\n```\n#CentOS 6系统\nservice iptables stop\nchkconfig iptables off\n\n#CentOS 7系统\nsystemctl stop firewalld\nsystemctl disable firewalld\n```\n\n像阿里云等服务器，还需要去安全组那里开放下端口。\n\n## 手动安装\n\n`Docker`虽然方便很多，但也有人会喜欢手动安装，这里作者没直接给出二进制文件，所以就需要我们手动来构建二进制文件了。\n\n**1、安装Go**\n这里由于需要新版的`Go`环境，所以这里就使用`Go`二进制包安装环境，下载地址→[传送门](https://golang.org/dl/)。\n\n然后根据自己的服务器架构下载对应的最新安装包，一般可以直接使用命令：\n\n```\n#32位系统下载\nwget -O go.tar.gz https://dl.google.com/go/go1.13.3.linux-386.tar.gz\n#64位系统下载\nwget -O go.tar.gz https://dl.google.com/go/go1.13.3.linux-amd64.tar.gz\n\n#解压压缩包\ntar -zxvf go.tar.gz -C /usr/local\n#设置环境变量，将以下一起复制进ssh客户端运行\nmkdir $HOME/go\necho 'export GOROOT=/usr/local/go\nexport GOPATH=$HOME/go\nexport PATH=$PATH:$GOROOT/bin:$GOPATH/bin' >> /etc/profile\nsource /etc/profile\n#查看go版本，有输出即为安装成功\ngo version\n```\n\n**2、安装sish**\n\n```\n#下载源码到主目录\ngit clone https://github.com/antoniomika/sish\ncd sish\n#编译二进制文件\ngo install\n```\n\n这里提示`-bash: git: command not found`的，可以先使用命令：\n\n```\n#CentOS\nyum -y install git\n\n#Debian、Ubuntu\napt install git -y\n```\n\n**3、运行sish**\n运行参数这里就不贴了，直接参考上面`Docker`安装最下面的全部参数就行了。\n\n先解析一个主/泛域名到服务器`ip`，比如解析`moerats.com`、`*.moerats.com`到服务器`ip`。\n\n这里就贴个大概需要使用的参数，其它的根据需求自行修改，使用命令：\n\n```\n#配置http域名\nsish -sish.addr=:3333 -sish.http=:80 -sish.domain moerats.com -sish.forcerandomsubdomain=false -sish.bindrandom=false -sish.redirectrootlocation https://www.moerats.com -sish.keysdir=/sish/pubkeys -sish.pkloc=/sish/keys/ssh_key \n\n#配置https域名\nsish -sish.addr=:3333 -sish.https=:443 -sish.http=:80 -sish.domain moerats.com -sish.forcerandomsubdomain=false -sish.bindrandom=false -sish.httpsenabled=true -sish.redirectrootlocation https://www.moerats.com -sish.keysdir=/sish/pubkeys -sish.pkloc=/sish/keys/ssh_key -sish.httpspems=/sish/ssl\n```\n\n部分参数详解：\n\n```\n-sish.addr=:3333  #ssh监听地址，这里为3333\n-sish.forcerandomsubdomain=false  #是否强制随机子域，这个建议关掉\n-sish.bindrandom=false  #是否随机绑定端口，这个建议关掉\n-sish.domain moerats.com  #使用的域名\n-sish.redirectrootlocation https://www.baidu.com  #主域名(-sish.domain参数)强制跳转到该地址\n-sish.httpspems=/sish/ssl  #泛域名SSL证书存放路径，证书命名格式fullchain.pem和privkey.pem\n-sish.keysdir=/sish/pubkeys  #pubkey auth的公共密钥存放文件夹\n-sish.pkloc=/sish/keys/ssh_key  #SSH服务器私钥\n```\n\n这里`/sish/ssl`、`/sish/pubkeys`、`/sish/keys`目录需要自己提前创建下，使用命令：\n\n```\nmkdir -p /sish/ssl /sish/pubkeys /sish/keys\n```\n\n**4、开机自启**\n如果你使用手动命令没问题了，先使用`Ctrl+C`断开命令。\n\n再新建`systemd`配置文件，适用`CentOS 7`、`Debian 8+`、`Ubuntu 16+`。\n\n```\n#修改成你手动运行命令的全部参数\ncommand=\"-sish.addr=:3333 -sish.http=:80 -sish.domain moerats.com -sish.forcerandomsubdomain=false -sish.bindrandom=false -sish.redirectrootlocation https://www.moerats.com -sish.keysdir=/sish/pubkeys -sish.pkloc=/sish/keys\"\n#将以下代码一起复制到SSH运行\ncat > /etc/systemd/system/sish.service <<EOF\n[Unit]\nDescription=sish\nAfter=network.target\n\n[Service]\nType=simple\nExecStart=$(command -v sish) ${command}\nRestart=on-failure\n\n[Install]\nWantedBy=multi-user.target\nEOF\n```\n\n启动并设置开机自启：\n\n```\nsystemctl start sish\nsystemctl enable sish\n```\n\n最后`CentOS`系统建议关闭防火墙使用，或者打开部分端口也行，关闭命令：\n\n```\n#CentOS 6系统\nservice iptables stop\nchkconfig iptables off\n\n#CentOS 7系统\nsystemctl stop firewalld\nsystemctl disable firewalld\n```\n\n像阿里云等服务器，还需要去安全组那里开放下端口。\n\n## 使用\n\n使用要求：可以使用`SSH`，并且能连接到互联网，`Linux`、`Windows`等系统都行。\n\n以下所使用的的`moerats.com`为上面配置好的客户端域名地址，自行修改成自己的即可。\n\n**1、转发HTTP(S)**\n将本地`3000`端口穿透到公网中，使用命令：\n\n```\n#要转发其它端口的自行替换\nssh -p 3333 -R 80:localhost:3000 moerats.com\n```\n\n第一次如果有提示，选择`yes`即可，之后会为你随机生成一个`moerats.com`的二级域名，然后就可以使用浏览器间接访问本地的`localhost:3000`了。\n\n如果要指定二级域名，可以使用命令：\n\n```\n#这里默认为no1.moerats.com，自行替换即可\nssh -p 3333 -R no1:80:localhost:3000 moerats.com\n```\n\n此时你就可以在外网使用`no1.moerats.com`访问你本地的`localhost:3000`了。\n\n**2、转发TCP**\n将本地`6789`端口穿透到公网的`9876`端口中，使用命令：\n\n```\n#可以自行设置公网端口，这里默认6789，如果你要转发SSH端口，那就改成你的SSH端口\nssh -p 3333 -R 9876:localhost:6789 moerats.com\n```\n\n这里只说了下简单用法，客户端我们还可以设置国家/地区、`IP`白名单等，使用参考→[传送门](https://github.com/antoniomika/sish#whitelisting-ips)。\n\n最后没有泛域名证书的，可以查看该教程自己申请→[传送门](https://www.moerats.com/archives/900/)，或者等博主发码子→[传送门](https://www.moerats.com/archives/996/)。\n\n------\n\n> 版权声明：本文为原创文章，版权归 [Rat's Blog](https://www.moerats.com/) 所有，转载请注明出处！\n>\n> 本文链接：https://www.moerats.com/archives/1002/","slug":"AnOpenSource-LightweightIntranetPenetrationToolSimilarToServo-Ngrok","published":1,"updated":"2021-11-24T11:00:32.102Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckweswghx0000e8vh6tma924a","content":"<p><strong>说明：</strong><code>sish</code>是一个<code>SSH</code>服务器，仅用于远程端口转发，可以快速将本地端口暴露在外网，作者声称其为<code>Servo</code>/<code>Ngrok</code>替代方案，仅使用<code>SSH</code>的<code>HTTP(S)</code>、<code>WS(S)</code>、<code>TCP</code>隧道连接到他们的<code>localhost</code>服务器，该工具和<a href=\"https://www.moerats.com/archives/990/\" target=\"_blank\" rel=\"noopener\">Servo</a>差不多一样，不同就是<code>Servo</code>官方提供了免费的<code>SSH</code>客户端，而<code>sish</code>作者提供的客户端貌似因为滥用关闭了，所以就需要我们自己搭建了，这里就水下<code>Docker</code>和手动安装。</p>\n<h2 id=\"Docker安装\"><a href=\"#Docker安装\" class=\"headerlink\" title=\"Docker安装\"></a>Docker安装</h2><p><strong>Github地址：</strong><a href=\"https://github.com/antoniomika/sish\" target=\"_blank\" rel=\"noopener\">https://github.com/antoniomika/sish</a></p>\n<p><strong>1、安装Docker</strong></p>\n<pre><code>#CentOS 6\nrpm -iUvh http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm\nyum update -y\nyum -y install docker-io\nservice docker start\nchkconfig docker on\n\n#CentOS 7、Debian、Ubuntu\ncurl -sSL https://get.docker.com/ | sh\nsystemctl start docker\nsystemctl enable docker</code></pre><p><strong>2、拉取镜像</strong><br>这里由于直接使用<code>ip</code>的话，只能用于转发<code>TCP</code>，<code>HTTP(S)</code>等就需要配置下域名了，所以以下全部默认使用域名。</p>\n<p>先解析一个主/泛域名到服务器<code>ip</code>，比如解析<code>moerats.com</code>、<code>*.moerats.com</code>到服务器<code>ip</code>。</p>\n<p>然后再参考下面的参数详解，再自行修改部分参数后，使用命令：</p>\n<pre><code>#配置http域名\ndocker run -d --name sish \\\n  --restart=always \\\n  -v ~/sish/keys:/keys \\\n  -v ~/sish/pubkeys:/pubkeys \\\n  --net=host antoniomika/sish \\\n  -sish.addr=:3333 \\\n  -sish.http=:80 \\\n  -sish.keysdir=/pubkeys \\\n  -sish.pkloc=/keys/ssh_key \\\n  -sish.forcerandomsubdomain=false \\\n  -sish.domain moerats.com \\\n  -sish.bindrandom=false \\\n  -sish.redirectrootlocation https://www.baidu.com \n\n#配置https域名，这里需要提供泛域名证书\ndocker run -d --name sish \\\n  --restart=always \\\n  -v ~/sish/ssl:/ssl \\\n  -v ~/sish/keys:/keys \\\n  -v ~/sish/pubkeys:/pubkeys \\\n  --net=host antoniomika/sish \\\n  -sish.addr=:3333 \\\n  -sish.https=:443 \\\n  -sish.http=:80 \\\n  -sish.httpsenabled=true \\\n  -sish.httpspems=/ssl \\\n  -sish.keysdir=/pubkeys \\\n  -sish.pkloc=/keys/ssh_key \\\n  -sish.forcerandomsubdomain=false \\\n  -sish.domain moerats.com \\\n  -sish.bindrandom=false \\\n  -sish.redirectrootlocation https://www.baidu.com</code></pre><p>部分参数如下：</p>\n<pre><code>-sish.addr=:3333  #ssh监听地址\n-sish.forcerandomsubdomain=false  #是否强制随机子域，这个建议关掉\n-sish.bindrandom=false  #是否随机绑定端口，这个建议关掉\n-sish.domain moerats.com  #使用的域名\n-sish.redirectrootlocation https://www.baidu.com  #主域名(-sish.domain参数)强制跳转到该地址\n-sish.httpspems=/ssl  #泛域名SSL证书路径，存放路径~/sish/ssl，证书命名格式fullchain.pem和privkey.pem</code></pre><p>其他参数默认即可，也可以自行添加或修改其它参数。</p>\n<p>全部参数如下：</p>\n<pre><code>Usage of sish:\n  -sish.addr string\n        The address to listen for SSH connections (default &quot;localhost:2222&quot;)\n  -sish.auth\n        Whether or not to require auth on the SSH service\n  -sish.bannedcountries string\n        A comma separated list of banned countries\n  -sish.bannedips string\n        A comma separated list of banned ips\n  -sish.bannedsubdomains string\n        A comma separated list of banned subdomains (default &quot;localhost&quot;)\n  -sish.bindrandom\n        Bind ports randomly (OS chooses) (default true)\n  -sish.bindrange string\n        Ports that are allowed to be bound (default &quot;0,1024-65535&quot;)\n  -sish.cleanupunbound\n        Whether or not to cleanup unbound (forwarded) SSH connections (default true)\n  -sish.debug\n        Whether or not to print debug information\n  -sish.domain string\n        The domain for HTTP(S) multiplexing (default &quot;ssi.sh&quot;)\n  -sish.forcerandomsubdomain\n        Whether or not to force a random subdomain (default true)\n  -sish.http string\n        The address to listen for HTTP connections (default &quot;localhost:80&quot;)\n  -sish.httpport int\n        The port for HTTP connections. This is only for output messages (default 80)\n  -sish.https string\n        The address to listen for HTTPS connections (default &quot;localhost:443&quot;)\n  -sish.httpsenabled\n        Whether or not to listen for HTTPS connections\n  -sish.httpspems string\n        The location of pem files for HTTPS (fullchain.pem and privkey.pem) (default &quot;ssl/&quot;)\n  -sish.httpsport int\n        The port for HTTPS connections. This is only for output messages (default 443)\n  -sish.keysdir string\n        Directory for public keys for pubkey auth (default &quot;pubkeys/&quot;)\n  -sish.password string\n        Password to use for password auth (default &quot;S3Cr3tP4$$W0rD&quot;)\n  -sish.pkloc string\n        SSH server private key (default &quot;keys/ssh_key&quot;)\n  -sish.pkpass string\n        Passphrase to use for the server private key (default &quot;S3Cr3tP4$$phrAsE&quot;)\n  -sish.proxyprotoenabled\n        Whether or not to enable the use of the proxy protocol\n  -sish.proxyprotoversion string\n        What version of the proxy protocol to use. Can either be 1, 2, or userdefined. If userdefined, the user needs to add a command to SSH called proxy:version (ie proxy:1) (default &quot;1&quot;)\n  -sish.redirectroot\n        Whether or not to redirect the root domain (default true)\n  -sish.redirectrootlocation string\n        Where to redirect the root domain to (default &quot;https://github.com/antoniomika/sish&quot;)\n  -sish.subdomainlen int\n        The length of the random subdomain to generate (default 3)\n  -sish.usegeodb\n        Whether or not to use the maxmind geodb\n  -sish.verifyorigin\n        Whether or not to verify origin on websocket connection (default true)\n  -sish.verifyssl\n        Whether or not to verify SSL on proxy connection (default true)\n  -sish.whitelistedcountries string\n        A comma separated list of whitelisted countries\n  -sish.whitelistedips string\n        A comma separated list of whitelisted ips</code></pre><p>看不懂的，可以使用下谷歌翻译。</p>\n<p>最后<code>CentOS</code>系统建议关闭防火墙使用，或者打开部分端口也行，关闭命令：</p>\n<pre><code>#CentOS 6系统\nservice iptables stop\nchkconfig iptables off\n\n#CentOS 7系统\nsystemctl stop firewalld\nsystemctl disable firewalld</code></pre><p>像阿里云等服务器，还需要去安全组那里开放下端口。</p>\n<h2 id=\"手动安装\"><a href=\"#手动安装\" class=\"headerlink\" title=\"手动安装\"></a>手动安装</h2><p><code>Docker</code>虽然方便很多，但也有人会喜欢手动安装，这里作者没直接给出二进制文件，所以就需要我们手动来构建二进制文件了。</p>\n<p><strong>1、安装Go</strong><br>这里由于需要新版的<code>Go</code>环境，所以这里就使用<code>Go</code>二进制包安装环境，下载地址→<a href=\"https://golang.org/dl/\" target=\"_blank\" rel=\"noopener\">传送门</a>。</p>\n<p>然后根据自己的服务器架构下载对应的最新安装包，一般可以直接使用命令：</p>\n<pre><code>#32位系统下载\nwget -O go.tar.gz https://dl.google.com/go/go1.13.3.linux-386.tar.gz\n#64位系统下载\nwget -O go.tar.gz https://dl.google.com/go/go1.13.3.linux-amd64.tar.gz\n\n#解压压缩包\ntar -zxvf go.tar.gz -C /usr/local\n#设置环境变量，将以下一起复制进ssh客户端运行\nmkdir $HOME/go\necho &#39;export GOROOT=/usr/local/go\nexport GOPATH=$HOME/go\nexport PATH=$PATH:$GOROOT/bin:$GOPATH/bin&#39; &gt;&gt; /etc/profile\nsource /etc/profile\n#查看go版本，有输出即为安装成功\ngo version</code></pre><p><strong>2、安装sish</strong></p>\n<pre><code>#下载源码到主目录\ngit clone https://github.com/antoniomika/sish\ncd sish\n#编译二进制文件\ngo install</code></pre><p>这里提示<code>-bash: git: command not found</code>的，可以先使用命令：</p>\n<pre><code>#CentOS\nyum -y install git\n\n#Debian、Ubuntu\napt install git -y</code></pre><p><strong>3、运行sish</strong><br>运行参数这里就不贴了，直接参考上面<code>Docker</code>安装最下面的全部参数就行了。</p>\n<p>先解析一个主/泛域名到服务器<code>ip</code>，比如解析<code>moerats.com</code>、<code>*.moerats.com</code>到服务器<code>ip</code>。</p>\n<p>这里就贴个大概需要使用的参数，其它的根据需求自行修改，使用命令：</p>\n<pre><code>#配置http域名\nsish -sish.addr=:3333 -sish.http=:80 -sish.domain moerats.com -sish.forcerandomsubdomain=false -sish.bindrandom=false -sish.redirectrootlocation https://www.moerats.com -sish.keysdir=/sish/pubkeys -sish.pkloc=/sish/keys/ssh_key \n\n#配置https域名\nsish -sish.addr=:3333 -sish.https=:443 -sish.http=:80 -sish.domain moerats.com -sish.forcerandomsubdomain=false -sish.bindrandom=false -sish.httpsenabled=true -sish.redirectrootlocation https://www.moerats.com -sish.keysdir=/sish/pubkeys -sish.pkloc=/sish/keys/ssh_key -sish.httpspems=/sish/ssl</code></pre><p>部分参数详解：</p>\n<pre><code>-sish.addr=:3333  #ssh监听地址，这里为3333\n-sish.forcerandomsubdomain=false  #是否强制随机子域，这个建议关掉\n-sish.bindrandom=false  #是否随机绑定端口，这个建议关掉\n-sish.domain moerats.com  #使用的域名\n-sish.redirectrootlocation https://www.baidu.com  #主域名(-sish.domain参数)强制跳转到该地址\n-sish.httpspems=/sish/ssl  #泛域名SSL证书存放路径，证书命名格式fullchain.pem和privkey.pem\n-sish.keysdir=/sish/pubkeys  #pubkey auth的公共密钥存放文件夹\n-sish.pkloc=/sish/keys/ssh_key  #SSH服务器私钥</code></pre><p>这里<code>/sish/ssl</code>、<code>/sish/pubkeys</code>、<code>/sish/keys</code>目录需要自己提前创建下，使用命令：</p>\n<pre><code>mkdir -p /sish/ssl /sish/pubkeys /sish/keys</code></pre><p><strong>4、开机自启</strong><br>如果你使用手动命令没问题了，先使用<code>Ctrl+C</code>断开命令。</p>\n<p>再新建<code>systemd</code>配置文件，适用<code>CentOS 7</code>、<code>Debian 8+</code>、<code>Ubuntu 16+</code>。</p>\n<pre><code>#修改成你手动运行命令的全部参数\ncommand=&quot;-sish.addr=:3333 -sish.http=:80 -sish.domain moerats.com -sish.forcerandomsubdomain=false -sish.bindrandom=false -sish.redirectrootlocation https://www.moerats.com -sish.keysdir=/sish/pubkeys -sish.pkloc=/sish/keys&quot;\n#将以下代码一起复制到SSH运行\ncat &gt; /etc/systemd/system/sish.service &lt;&lt;EOF\n[Unit]\nDescription=sish\nAfter=network.target\n\n[Service]\nType=simple\nExecStart=$(command -v sish) ${command}\nRestart=on-failure\n\n[Install]\nWantedBy=multi-user.target\nEOF</code></pre><p>启动并设置开机自启：</p>\n<pre><code>systemctl start sish\nsystemctl enable sish</code></pre><p>最后<code>CentOS</code>系统建议关闭防火墙使用，或者打开部分端口也行，关闭命令：</p>\n<pre><code>#CentOS 6系统\nservice iptables stop\nchkconfig iptables off\n\n#CentOS 7系统\nsystemctl stop firewalld\nsystemctl disable firewalld</code></pre><p>像阿里云等服务器，还需要去安全组那里开放下端口。</p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>使用要求：可以使用<code>SSH</code>，并且能连接到互联网，<code>Linux</code>、<code>Windows</code>等系统都行。</p>\n<p>以下所使用的的<code>moerats.com</code>为上面配置好的客户端域名地址，自行修改成自己的即可。</p>\n<p><strong>1、转发HTTP(S)</strong><br>将本地<code>3000</code>端口穿透到公网中，使用命令：</p>\n<pre><code>#要转发其它端口的自行替换\nssh -p 3333 -R 80:localhost:3000 moerats.com</code></pre><p>第一次如果有提示，选择<code>yes</code>即可，之后会为你随机生成一个<code>moerats.com</code>的二级域名，然后就可以使用浏览器间接访问本地的<code>localhost:3000</code>了。</p>\n<p>如果要指定二级域名，可以使用命令：</p>\n<pre><code>#这里默认为no1.moerats.com，自行替换即可\nssh -p 3333 -R no1:80:localhost:3000 moerats.com</code></pre><p>此时你就可以在外网使用<code>no1.moerats.com</code>访问你本地的<code>localhost:3000</code>了。</p>\n<p><strong>2、转发TCP</strong><br>将本地<code>6789</code>端口穿透到公网的<code>9876</code>端口中，使用命令：</p>\n<pre><code>#可以自行设置公网端口，这里默认6789，如果你要转发SSH端口，那就改成你的SSH端口\nssh -p 3333 -R 9876:localhost:6789 moerats.com</code></pre><p>这里只说了下简单用法，客户端我们还可以设置国家/地区、<code>IP</code>白名单等，使用参考→<a href=\"https://github.com/antoniomika/sish#whitelisting-ips\" target=\"_blank\" rel=\"noopener\">传送门</a>。</p>\n<p>最后没有泛域名证书的，可以查看该教程自己申请→<a href=\"https://www.moerats.com/archives/900/\" target=\"_blank\" rel=\"noopener\">传送门</a>，或者等博主发码子→<a href=\"https://www.moerats.com/archives/996/\" target=\"_blank\" rel=\"noopener\">传送门</a>。</p>\n<hr>\n<blockquote>\n<p>版权声明：本文为原创文章，版权归 <a href=\"https://www.moerats.com/\" target=\"_blank\" rel=\"noopener\">Rat’s Blog</a> 所有，转载请注明出处！</p>\n<p>本文链接：<a href=\"https://www.moerats.com/archives/1002/\" target=\"_blank\" rel=\"noopener\">https://www.moerats.com/archives/1002/</a></p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"http://q1.qlogo.cn/g?b=qq&nk=2750360683&s=640","name":"核心","introduction":"来自山东的一位普通高中生,喜欢捣鼓2333，爱好编程（新手）","url":"http://www.emtips.net/","title":"Piu~"},{"avatar":"https://i2.hdslb.com/bfs/face/2433a7d4053048811fec9907bcb066e867399da7.jpg","name":"SRO","introduction":"欢迎来到SRO知识库,您在这里可以看到大多数的SRO内部，外部资料","url":"https://sromc.cn/","title":"Piu~"},{"avatar":"http://q1.qlogo.cn/g?b=qq&nk=1692565761&s=640","name":"河南省商务中等职业学校","introduction":"网络搭建竞赛组","url":"https://hnswxx.cn/","title":"Piu~"},{"avatar":"http://q1.qlogo.cn/g?b=qq&nk=2191023046&s=640","name":"贺兰星辰","introduction":"HikariLan's Blog","url":"https://my.minecraft.kim/","title":"Piu~"}]}},"excerpt":"","more":"<p><strong>说明：</strong><code>sish</code>是一个<code>SSH</code>服务器，仅用于远程端口转发，可以快速将本地端口暴露在外网，作者声称其为<code>Servo</code>/<code>Ngrok</code>替代方案，仅使用<code>SSH</code>的<code>HTTP(S)</code>、<code>WS(S)</code>、<code>TCP</code>隧道连接到他们的<code>localhost</code>服务器，该工具和<a href=\"https://www.moerats.com/archives/990/\" target=\"_blank\" rel=\"noopener\">Servo</a>差不多一样，不同就是<code>Servo</code>官方提供了免费的<code>SSH</code>客户端，而<code>sish</code>作者提供的客户端貌似因为滥用关闭了，所以就需要我们自己搭建了，这里就水下<code>Docker</code>和手动安装。</p>\n<h2 id=\"Docker安装\"><a href=\"#Docker安装\" class=\"headerlink\" title=\"Docker安装\"></a>Docker安装</h2><p><strong>Github地址：</strong><a href=\"https://github.com/antoniomika/sish\" target=\"_blank\" rel=\"noopener\">https://github.com/antoniomika/sish</a></p>\n<p><strong>1、安装Docker</strong></p>\n<pre><code>#CentOS 6\nrpm -iUvh http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm\nyum update -y\nyum -y install docker-io\nservice docker start\nchkconfig docker on\n\n#CentOS 7、Debian、Ubuntu\ncurl -sSL https://get.docker.com/ | sh\nsystemctl start docker\nsystemctl enable docker</code></pre><p><strong>2、拉取镜像</strong><br>这里由于直接使用<code>ip</code>的话，只能用于转发<code>TCP</code>，<code>HTTP(S)</code>等就需要配置下域名了，所以以下全部默认使用域名。</p>\n<p>先解析一个主/泛域名到服务器<code>ip</code>，比如解析<code>moerats.com</code>、<code>*.moerats.com</code>到服务器<code>ip</code>。</p>\n<p>然后再参考下面的参数详解，再自行修改部分参数后，使用命令：</p>\n<pre><code>#配置http域名\ndocker run -d --name sish \\\n  --restart=always \\\n  -v ~/sish/keys:/keys \\\n  -v ~/sish/pubkeys:/pubkeys \\\n  --net=host antoniomika/sish \\\n  -sish.addr=:3333 \\\n  -sish.http=:80 \\\n  -sish.keysdir=/pubkeys \\\n  -sish.pkloc=/keys/ssh_key \\\n  -sish.forcerandomsubdomain=false \\\n  -sish.domain moerats.com \\\n  -sish.bindrandom=false \\\n  -sish.redirectrootlocation https://www.baidu.com \n\n#配置https域名，这里需要提供泛域名证书\ndocker run -d --name sish \\\n  --restart=always \\\n  -v ~/sish/ssl:/ssl \\\n  -v ~/sish/keys:/keys \\\n  -v ~/sish/pubkeys:/pubkeys \\\n  --net=host antoniomika/sish \\\n  -sish.addr=:3333 \\\n  -sish.https=:443 \\\n  -sish.http=:80 \\\n  -sish.httpsenabled=true \\\n  -sish.httpspems=/ssl \\\n  -sish.keysdir=/pubkeys \\\n  -sish.pkloc=/keys/ssh_key \\\n  -sish.forcerandomsubdomain=false \\\n  -sish.domain moerats.com \\\n  -sish.bindrandom=false \\\n  -sish.redirectrootlocation https://www.baidu.com</code></pre><p>部分参数如下：</p>\n<pre><code>-sish.addr=:3333  #ssh监听地址\n-sish.forcerandomsubdomain=false  #是否强制随机子域，这个建议关掉\n-sish.bindrandom=false  #是否随机绑定端口，这个建议关掉\n-sish.domain moerats.com  #使用的域名\n-sish.redirectrootlocation https://www.baidu.com  #主域名(-sish.domain参数)强制跳转到该地址\n-sish.httpspems=/ssl  #泛域名SSL证书路径，存放路径~/sish/ssl，证书命名格式fullchain.pem和privkey.pem</code></pre><p>其他参数默认即可，也可以自行添加或修改其它参数。</p>\n<p>全部参数如下：</p>\n<pre><code>Usage of sish:\n  -sish.addr string\n        The address to listen for SSH connections (default &quot;localhost:2222&quot;)\n  -sish.auth\n        Whether or not to require auth on the SSH service\n  -sish.bannedcountries string\n        A comma separated list of banned countries\n  -sish.bannedips string\n        A comma separated list of banned ips\n  -sish.bannedsubdomains string\n        A comma separated list of banned subdomains (default &quot;localhost&quot;)\n  -sish.bindrandom\n        Bind ports randomly (OS chooses) (default true)\n  -sish.bindrange string\n        Ports that are allowed to be bound (default &quot;0,1024-65535&quot;)\n  -sish.cleanupunbound\n        Whether or not to cleanup unbound (forwarded) SSH connections (default true)\n  -sish.debug\n        Whether or not to print debug information\n  -sish.domain string\n        The domain for HTTP(S) multiplexing (default &quot;ssi.sh&quot;)\n  -sish.forcerandomsubdomain\n        Whether or not to force a random subdomain (default true)\n  -sish.http string\n        The address to listen for HTTP connections (default &quot;localhost:80&quot;)\n  -sish.httpport int\n        The port for HTTP connections. This is only for output messages (default 80)\n  -sish.https string\n        The address to listen for HTTPS connections (default &quot;localhost:443&quot;)\n  -sish.httpsenabled\n        Whether or not to listen for HTTPS connections\n  -sish.httpspems string\n        The location of pem files for HTTPS (fullchain.pem and privkey.pem) (default &quot;ssl/&quot;)\n  -sish.httpsport int\n        The port for HTTPS connections. This is only for output messages (default 443)\n  -sish.keysdir string\n        Directory for public keys for pubkey auth (default &quot;pubkeys/&quot;)\n  -sish.password string\n        Password to use for password auth (default &quot;S3Cr3tP4$$W0rD&quot;)\n  -sish.pkloc string\n        SSH server private key (default &quot;keys/ssh_key&quot;)\n  -sish.pkpass string\n        Passphrase to use for the server private key (default &quot;S3Cr3tP4$$phrAsE&quot;)\n  -sish.proxyprotoenabled\n        Whether or not to enable the use of the proxy protocol\n  -sish.proxyprotoversion string\n        What version of the proxy protocol to use. Can either be 1, 2, or userdefined. If userdefined, the user needs to add a command to SSH called proxy:version (ie proxy:1) (default &quot;1&quot;)\n  -sish.redirectroot\n        Whether or not to redirect the root domain (default true)\n  -sish.redirectrootlocation string\n        Where to redirect the root domain to (default &quot;https://github.com/antoniomika/sish&quot;)\n  -sish.subdomainlen int\n        The length of the random subdomain to generate (default 3)\n  -sish.usegeodb\n        Whether or not to use the maxmind geodb\n  -sish.verifyorigin\n        Whether or not to verify origin on websocket connection (default true)\n  -sish.verifyssl\n        Whether or not to verify SSL on proxy connection (default true)\n  -sish.whitelistedcountries string\n        A comma separated list of whitelisted countries\n  -sish.whitelistedips string\n        A comma separated list of whitelisted ips</code></pre><p>看不懂的，可以使用下谷歌翻译。</p>\n<p>最后<code>CentOS</code>系统建议关闭防火墙使用，或者打开部分端口也行，关闭命令：</p>\n<pre><code>#CentOS 6系统\nservice iptables stop\nchkconfig iptables off\n\n#CentOS 7系统\nsystemctl stop firewalld\nsystemctl disable firewalld</code></pre><p>像阿里云等服务器，还需要去安全组那里开放下端口。</p>\n<h2 id=\"手动安装\"><a href=\"#手动安装\" class=\"headerlink\" title=\"手动安装\"></a>手动安装</h2><p><code>Docker</code>虽然方便很多，但也有人会喜欢手动安装，这里作者没直接给出二进制文件，所以就需要我们手动来构建二进制文件了。</p>\n<p><strong>1、安装Go</strong><br>这里由于需要新版的<code>Go</code>环境，所以这里就使用<code>Go</code>二进制包安装环境，下载地址→<a href=\"https://golang.org/dl/\" target=\"_blank\" rel=\"noopener\">传送门</a>。</p>\n<p>然后根据自己的服务器架构下载对应的最新安装包，一般可以直接使用命令：</p>\n<pre><code>#32位系统下载\nwget -O go.tar.gz https://dl.google.com/go/go1.13.3.linux-386.tar.gz\n#64位系统下载\nwget -O go.tar.gz https://dl.google.com/go/go1.13.3.linux-amd64.tar.gz\n\n#解压压缩包\ntar -zxvf go.tar.gz -C /usr/local\n#设置环境变量，将以下一起复制进ssh客户端运行\nmkdir $HOME/go\necho &#39;export GOROOT=/usr/local/go\nexport GOPATH=$HOME/go\nexport PATH=$PATH:$GOROOT/bin:$GOPATH/bin&#39; &gt;&gt; /etc/profile\nsource /etc/profile\n#查看go版本，有输出即为安装成功\ngo version</code></pre><p><strong>2、安装sish</strong></p>\n<pre><code>#下载源码到主目录\ngit clone https://github.com/antoniomika/sish\ncd sish\n#编译二进制文件\ngo install</code></pre><p>这里提示<code>-bash: git: command not found</code>的，可以先使用命令：</p>\n<pre><code>#CentOS\nyum -y install git\n\n#Debian、Ubuntu\napt install git -y</code></pre><p><strong>3、运行sish</strong><br>运行参数这里就不贴了，直接参考上面<code>Docker</code>安装最下面的全部参数就行了。</p>\n<p>先解析一个主/泛域名到服务器<code>ip</code>，比如解析<code>moerats.com</code>、<code>*.moerats.com</code>到服务器<code>ip</code>。</p>\n<p>这里就贴个大概需要使用的参数，其它的根据需求自行修改，使用命令：</p>\n<pre><code>#配置http域名\nsish -sish.addr=:3333 -sish.http=:80 -sish.domain moerats.com -sish.forcerandomsubdomain=false -sish.bindrandom=false -sish.redirectrootlocation https://www.moerats.com -sish.keysdir=/sish/pubkeys -sish.pkloc=/sish/keys/ssh_key \n\n#配置https域名\nsish -sish.addr=:3333 -sish.https=:443 -sish.http=:80 -sish.domain moerats.com -sish.forcerandomsubdomain=false -sish.bindrandom=false -sish.httpsenabled=true -sish.redirectrootlocation https://www.moerats.com -sish.keysdir=/sish/pubkeys -sish.pkloc=/sish/keys/ssh_key -sish.httpspems=/sish/ssl</code></pre><p>部分参数详解：</p>\n<pre><code>-sish.addr=:3333  #ssh监听地址，这里为3333\n-sish.forcerandomsubdomain=false  #是否强制随机子域，这个建议关掉\n-sish.bindrandom=false  #是否随机绑定端口，这个建议关掉\n-sish.domain moerats.com  #使用的域名\n-sish.redirectrootlocation https://www.baidu.com  #主域名(-sish.domain参数)强制跳转到该地址\n-sish.httpspems=/sish/ssl  #泛域名SSL证书存放路径，证书命名格式fullchain.pem和privkey.pem\n-sish.keysdir=/sish/pubkeys  #pubkey auth的公共密钥存放文件夹\n-sish.pkloc=/sish/keys/ssh_key  #SSH服务器私钥</code></pre><p>这里<code>/sish/ssl</code>、<code>/sish/pubkeys</code>、<code>/sish/keys</code>目录需要自己提前创建下，使用命令：</p>\n<pre><code>mkdir -p /sish/ssl /sish/pubkeys /sish/keys</code></pre><p><strong>4、开机自启</strong><br>如果你使用手动命令没问题了，先使用<code>Ctrl+C</code>断开命令。</p>\n<p>再新建<code>systemd</code>配置文件，适用<code>CentOS 7</code>、<code>Debian 8+</code>、<code>Ubuntu 16+</code>。</p>\n<pre><code>#修改成你手动运行命令的全部参数\ncommand=&quot;-sish.addr=:3333 -sish.http=:80 -sish.domain moerats.com -sish.forcerandomsubdomain=false -sish.bindrandom=false -sish.redirectrootlocation https://www.moerats.com -sish.keysdir=/sish/pubkeys -sish.pkloc=/sish/keys&quot;\n#将以下代码一起复制到SSH运行\ncat &gt; /etc/systemd/system/sish.service &lt;&lt;EOF\n[Unit]\nDescription=sish\nAfter=network.target\n\n[Service]\nType=simple\nExecStart=$(command -v sish) ${command}\nRestart=on-failure\n\n[Install]\nWantedBy=multi-user.target\nEOF</code></pre><p>启动并设置开机自启：</p>\n<pre><code>systemctl start sish\nsystemctl enable sish</code></pre><p>最后<code>CentOS</code>系统建议关闭防火墙使用，或者打开部分端口也行，关闭命令：</p>\n<pre><code>#CentOS 6系统\nservice iptables stop\nchkconfig iptables off\n\n#CentOS 7系统\nsystemctl stop firewalld\nsystemctl disable firewalld</code></pre><p>像阿里云等服务器，还需要去安全组那里开放下端口。</p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>使用要求：可以使用<code>SSH</code>，并且能连接到互联网，<code>Linux</code>、<code>Windows</code>等系统都行。</p>\n<p>以下所使用的的<code>moerats.com</code>为上面配置好的客户端域名地址，自行修改成自己的即可。</p>\n<p><strong>1、转发HTTP(S)</strong><br>将本地<code>3000</code>端口穿透到公网中，使用命令：</p>\n<pre><code>#要转发其它端口的自行替换\nssh -p 3333 -R 80:localhost:3000 moerats.com</code></pre><p>第一次如果有提示，选择<code>yes</code>即可，之后会为你随机生成一个<code>moerats.com</code>的二级域名，然后就可以使用浏览器间接访问本地的<code>localhost:3000</code>了。</p>\n<p>如果要指定二级域名，可以使用命令：</p>\n<pre><code>#这里默认为no1.moerats.com，自行替换即可\nssh -p 3333 -R no1:80:localhost:3000 moerats.com</code></pre><p>此时你就可以在外网使用<code>no1.moerats.com</code>访问你本地的<code>localhost:3000</code>了。</p>\n<p><strong>2、转发TCP</strong><br>将本地<code>6789</code>端口穿透到公网的<code>9876</code>端口中，使用命令：</p>\n<pre><code>#可以自行设置公网端口，这里默认6789，如果你要转发SSH端口，那就改成你的SSH端口\nssh -p 3333 -R 9876:localhost:6789 moerats.com</code></pre><p>这里只说了下简单用法，客户端我们还可以设置国家/地区、<code>IP</code>白名单等，使用参考→<a href=\"https://github.com/antoniomika/sish#whitelisting-ips\" target=\"_blank\" rel=\"noopener\">传送门</a>。</p>\n<p>最后没有泛域名证书的，可以查看该教程自己申请→<a href=\"https://www.moerats.com/archives/900/\" target=\"_blank\" rel=\"noopener\">传送门</a>，或者等博主发码子→<a href=\"https://www.moerats.com/archives/996/\" target=\"_blank\" rel=\"noopener\">传送门</a>。</p>\n<hr>\n<blockquote>\n<p>版权声明：本文为原创文章，版权归 <a href=\"https://www.moerats.com/\" target=\"_blank\" rel=\"noopener\">Rat’s Blog</a> 所有，转载请注明出处！</p>\n<p>本文链接：<a href=\"https://www.moerats.com/archives/1002/\" target=\"_blank\" rel=\"noopener\">https://www.moerats.com/archives/1002/</a></p>\n</blockquote>\n"},{"title":"一款二次元的Web多人在线网络聊天系统：Fiora的部署","typora-copy-images-to":"ATwo-DimensionalWebMulti-PersonOnlineNetworkChatSystem","date":"2020-02-14T20:05:21.000Z","_content":"\n# Install\n## Environmental Preparation\nTo run Fiora, you need Node.js(recommend v14 LTS version), MongoDB and redis\n\n- Install Node.js\n  - Official website https://nodejs.org/en/download/\n  - It is recommended to use nvm to install Node.js\n    - Install nvm https://github.com/nvm-sh/nvm#install--update-script\n    - Install Node.js via nvm https://github.com/nvm-sh/nvm#usage\n  - Install MongoDB\n    - Official website https://docs.mongodb.com/manual/installation/#install-mongodb\n  - Install redis\n    - Official website https://docs.mongodb.com/manual/installation/#install-mongodb\n\nRecommended to running on Linux or MacOS systems\n\n# How to run\n1. Clone the project `git clone https://github.com/yinxin630/fiora.git -b master`\n2. Ensure you have install `yarn` before, if not please run `npm install -g yarn`\n3. Install project dependencies `yarn install`\n4. Build client `yarn build:web`\n5. Config JwtSecret `echo \"JwtSecret=<string>\" > .env2`. Change `<string>` to a secret text\n6. Start the server `yarn start`\n7. Open `http://[ip]:[port]`(such as `http://127.0.0.1:9200`) in browser\n\n## Run in the background\nUsing `yarn start` to run the server will stop running after disconnecting the ssh connection, it is recommended to use pm2 to run\n\n```shell\n# install pm2\nnpm install -g pm2\n\n# use pm2 to run fiora\npm2 start yarn --name fiora -- start\n\n# view pm2 apps status\npm2 ls\n\n# view pm2 fiora logging\npm2 logs fiora\n```\n\n## Run With Develop Mode\n1. Start the server `yarn dev:server`\n2. Start the client `yarn dev:web`\n3. Open `http://localhost:8080` in browser\n\n## Running on the docker\nFirst install docker https://docs.docker.com/install/\n\n## Run directly from the DockerHub image\n```shell\n# Pull mongo\ndocker pull mongo\n\n# Pull redis\ndocker pull redis\n\n# Pull fiora\ndocker pull suisuijiang/fiora\n\n# Create a virtual network\ndocker network create fiora-network\n\n# Run mongodB\ndocker run --name fioradb -p 27017:27017 --network fiora-network mongo\n\n# Run redis\ndocker run --name fioraredis -p 6379:6379 --network fiora-network redis\n\n# Run fiora\ndocker run --name fiora -p 9200:9200 --network fiora-network -e Database=mongodb://fioradb:27017/fiora -e RedisHost=fioraredis suisuijiang/fiora\n```\n\n## Local build image and run\n1. Clone the project to the local `git clone https://github.com/yinxin630/fiora.git -b master`\n2. Build the image` docker-compose build --no-cache --force-rm`\n3. Run it `docker-compose up`","source":"_posts/ATwo-DimensionalWebMulti-PersonOnlineNetworkChatSystem.md","raw":"---\ntitle: 一款二次元的Web多人在线网络聊天系统：Fiora的部署\ntypora-copy-images-to: ATwo-DimensionalWebMulti-PersonOnlineNetworkChatSystem\ndate: 2020-02-15 04:05:21\ntags:\n- Linux\n- 搭建教程\ncategories:\n- 学习\n---\n\n# Install\n## Environmental Preparation\nTo run Fiora, you need Node.js(recommend v14 LTS version), MongoDB and redis\n\n- Install Node.js\n  - Official website https://nodejs.org/en/download/\n  - It is recommended to use nvm to install Node.js\n    - Install nvm https://github.com/nvm-sh/nvm#install--update-script\n    - Install Node.js via nvm https://github.com/nvm-sh/nvm#usage\n  - Install MongoDB\n    - Official website https://docs.mongodb.com/manual/installation/#install-mongodb\n  - Install redis\n    - Official website https://docs.mongodb.com/manual/installation/#install-mongodb\n\nRecommended to running on Linux or MacOS systems\n\n# How to run\n1. Clone the project `git clone https://github.com/yinxin630/fiora.git -b master`\n2. Ensure you have install `yarn` before, if not please run `npm install -g yarn`\n3. Install project dependencies `yarn install`\n4. Build client `yarn build:web`\n5. Config JwtSecret `echo \"JwtSecret=<string>\" > .env2`. Change `<string>` to a secret text\n6. Start the server `yarn start`\n7. Open `http://[ip]:[port]`(such as `http://127.0.0.1:9200`) in browser\n\n## Run in the background\nUsing `yarn start` to run the server will stop running after disconnecting the ssh connection, it is recommended to use pm2 to run\n\n```shell\n# install pm2\nnpm install -g pm2\n\n# use pm2 to run fiora\npm2 start yarn --name fiora -- start\n\n# view pm2 apps status\npm2 ls\n\n# view pm2 fiora logging\npm2 logs fiora\n```\n\n## Run With Develop Mode\n1. Start the server `yarn dev:server`\n2. Start the client `yarn dev:web`\n3. Open `http://localhost:8080` in browser\n\n## Running on the docker\nFirst install docker https://docs.docker.com/install/\n\n## Run directly from the DockerHub image\n```shell\n# Pull mongo\ndocker pull mongo\n\n# Pull redis\ndocker pull redis\n\n# Pull fiora\ndocker pull suisuijiang/fiora\n\n# Create a virtual network\ndocker network create fiora-network\n\n# Run mongodB\ndocker run --name fioradb -p 27017:27017 --network fiora-network mongo\n\n# Run redis\ndocker run --name fioraredis -p 6379:6379 --network fiora-network redis\n\n# Run fiora\ndocker run --name fiora -p 9200:9200 --network fiora-network -e Database=mongodb://fioradb:27017/fiora -e RedisHost=fioraredis suisuijiang/fiora\n```\n\n## Local build image and run\n1. Clone the project to the local `git clone https://github.com/yinxin630/fiora.git -b master`\n2. Build the image` docker-compose build --no-cache --force-rm`\n3. Run it `docker-compose up`","slug":"ATwo-DimensionalWebMulti-PersonOnlineNetworkChatSystem","published":1,"updated":"2021-11-25T05:21:47.785Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckweswgi20002e8vh7ygp606d","content":"<h1 id=\"Install\"><a href=\"#Install\" class=\"headerlink\" title=\"Install\"></a>Install</h1><h2 id=\"Environmental-Preparation\"><a href=\"#Environmental-Preparation\" class=\"headerlink\" title=\"Environmental Preparation\"></a>Environmental Preparation</h2><p>To run Fiora, you need Node.js(recommend v14 LTS version), MongoDB and redis</p>\n<ul>\n<li>Install Node.js<ul>\n<li>Official website <a href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"noopener\">https://nodejs.org/en/download/</a></li>\n<li>It is recommended to use nvm to install Node.js<ul>\n<li>Install nvm <a href=\"https://github.com/nvm-sh/nvm#install--update-script\" target=\"_blank\" rel=\"noopener\">https://github.com/nvm-sh/nvm#install--update-script</a></li>\n<li>Install Node.js via nvm <a href=\"https://github.com/nvm-sh/nvm#usage\" target=\"_blank\" rel=\"noopener\">https://github.com/nvm-sh/nvm#usage</a></li>\n</ul>\n</li>\n<li>Install MongoDB<ul>\n<li>Official website <a href=\"https://docs.mongodb.com/manual/installation/#install-mongodb\" target=\"_blank\" rel=\"noopener\">https://docs.mongodb.com/manual/installation/#install-mongodb</a></li>\n</ul>\n</li>\n<li>Install redis<ul>\n<li>Official website <a href=\"https://docs.mongodb.com/manual/installation/#install-mongodb\" target=\"_blank\" rel=\"noopener\">https://docs.mongodb.com/manual/installation/#install-mongodb</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>Recommended to running on Linux or MacOS systems</p>\n<h1 id=\"How-to-run\"><a href=\"#How-to-run\" class=\"headerlink\" title=\"How to run\"></a>How to run</h1><ol>\n<li>Clone the project <code>git clone https://github.com/yinxin630/fiora.git -b master</code></li>\n<li>Ensure you have install <code>yarn</code> before, if not please run <code>npm install -g yarn</code></li>\n<li>Install project dependencies <code>yarn install</code></li>\n<li>Build client <code>yarn build:web</code></li>\n<li>Config JwtSecret <code>echo &quot;JwtSecret=&lt;string&gt;&quot; &gt; .env2</code>. Change <code>&lt;string&gt;</code> to a secret text</li>\n<li>Start the server <code>yarn start</code></li>\n<li>Open <code>http://[ip]:[port]</code>(such as <code>http://127.0.0.1:9200</code>) in browser</li>\n</ol>\n<h2 id=\"Run-in-the-background\"><a href=\"#Run-in-the-background\" class=\"headerlink\" title=\"Run in the background\"></a>Run in the background</h2><p>Using <code>yarn start</code> to run the server will stop running after disconnecting the ssh connection, it is recommended to use pm2 to run</p>\n<pre class=\" language-shell\"><code class=\"language-shell\"># install pm2\nnpm install -g pm2\n\n# use pm2 to run fiora\npm2 start yarn --name fiora -- start\n\n# view pm2 apps status\npm2 ls\n\n# view pm2 fiora logging\npm2 logs fiora</code></pre>\n<h2 id=\"Run-With-Develop-Mode\"><a href=\"#Run-With-Develop-Mode\" class=\"headerlink\" title=\"Run With Develop Mode\"></a>Run With Develop Mode</h2><ol>\n<li>Start the server <code>yarn dev:server</code></li>\n<li>Start the client <code>yarn dev:web</code></li>\n<li>Open <code>http://localhost:8080</code> in browser</li>\n</ol>\n<h2 id=\"Running-on-the-docker\"><a href=\"#Running-on-the-docker\" class=\"headerlink\" title=\"Running on the docker\"></a>Running on the docker</h2><p>First install docker <a href=\"https://docs.docker.com/install/\" target=\"_blank\" rel=\"noopener\">https://docs.docker.com/install/</a></p>\n<h2 id=\"Run-directly-from-the-DockerHub-image\"><a href=\"#Run-directly-from-the-DockerHub-image\" class=\"headerlink\" title=\"Run directly from the DockerHub image\"></a>Run directly from the DockerHub image</h2><pre class=\" language-shell\"><code class=\"language-shell\"># Pull mongo\ndocker pull mongo\n\n# Pull redis\ndocker pull redis\n\n# Pull fiora\ndocker pull suisuijiang/fiora\n\n# Create a virtual network\ndocker network create fiora-network\n\n# Run mongodB\ndocker run --name fioradb -p 27017:27017 --network fiora-network mongo\n\n# Run redis\ndocker run --name fioraredis -p 6379:6379 --network fiora-network redis\n\n# Run fiora\ndocker run --name fiora -p 9200:9200 --network fiora-network -e Database=mongodb://fioradb:27017/fiora -e RedisHost=fioraredis suisuijiang/fiora</code></pre>\n<h2 id=\"Local-build-image-and-run\"><a href=\"#Local-build-image-and-run\" class=\"headerlink\" title=\"Local build image and run\"></a>Local build image and run</h2><ol>\n<li>Clone the project to the local <code>git clone https://github.com/yinxin630/fiora.git -b master</code></li>\n<li>Build the image<code>docker-compose build --no-cache --force-rm</code></li>\n<li>Run it <code>docker-compose up</code></li>\n</ol>\n","site":{"data":{"friends":[{"avatar":"http://q1.qlogo.cn/g?b=qq&nk=2750360683&s=640","name":"核心","introduction":"来自山东的一位普通高中生,喜欢捣鼓2333，爱好编程（新手）","url":"http://www.emtips.net/","title":"Piu~"},{"avatar":"https://i2.hdslb.com/bfs/face/2433a7d4053048811fec9907bcb066e867399da7.jpg","name":"SRO","introduction":"欢迎来到SRO知识库,您在这里可以看到大多数的SRO内部，外部资料","url":"https://sromc.cn/","title":"Piu~"},{"avatar":"http://q1.qlogo.cn/g?b=qq&nk=1692565761&s=640","name":"河南省商务中等职业学校","introduction":"网络搭建竞赛组","url":"https://hnswxx.cn/","title":"Piu~"},{"avatar":"http://q1.qlogo.cn/g?b=qq&nk=2191023046&s=640","name":"贺兰星辰","introduction":"HikariLan's Blog","url":"https://my.minecraft.kim/","title":"Piu~"}]}},"excerpt":"","more":"<h1 id=\"Install\"><a href=\"#Install\" class=\"headerlink\" title=\"Install\"></a>Install</h1><h2 id=\"Environmental-Preparation\"><a href=\"#Environmental-Preparation\" class=\"headerlink\" title=\"Environmental Preparation\"></a>Environmental Preparation</h2><p>To run Fiora, you need Node.js(recommend v14 LTS version), MongoDB and redis</p>\n<ul>\n<li>Install Node.js<ul>\n<li>Official website <a href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"noopener\">https://nodejs.org/en/download/</a></li>\n<li>It is recommended to use nvm to install Node.js<ul>\n<li>Install nvm <a href=\"https://github.com/nvm-sh/nvm#install--update-script\" target=\"_blank\" rel=\"noopener\">https://github.com/nvm-sh/nvm#install--update-script</a></li>\n<li>Install Node.js via nvm <a href=\"https://github.com/nvm-sh/nvm#usage\" target=\"_blank\" rel=\"noopener\">https://github.com/nvm-sh/nvm#usage</a></li>\n</ul>\n</li>\n<li>Install MongoDB<ul>\n<li>Official website <a href=\"https://docs.mongodb.com/manual/installation/#install-mongodb\" target=\"_blank\" rel=\"noopener\">https://docs.mongodb.com/manual/installation/#install-mongodb</a></li>\n</ul>\n</li>\n<li>Install redis<ul>\n<li>Official website <a href=\"https://docs.mongodb.com/manual/installation/#install-mongodb\" target=\"_blank\" rel=\"noopener\">https://docs.mongodb.com/manual/installation/#install-mongodb</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>Recommended to running on Linux or MacOS systems</p>\n<h1 id=\"How-to-run\"><a href=\"#How-to-run\" class=\"headerlink\" title=\"How to run\"></a>How to run</h1><ol>\n<li>Clone the project <code>git clone https://github.com/yinxin630/fiora.git -b master</code></li>\n<li>Ensure you have install <code>yarn</code> before, if not please run <code>npm install -g yarn</code></li>\n<li>Install project dependencies <code>yarn install</code></li>\n<li>Build client <code>yarn build:web</code></li>\n<li>Config JwtSecret <code>echo &quot;JwtSecret=&lt;string&gt;&quot; &gt; .env2</code>. Change <code>&lt;string&gt;</code> to a secret text</li>\n<li>Start the server <code>yarn start</code></li>\n<li>Open <code>http://[ip]:[port]</code>(such as <code>http://127.0.0.1:9200</code>) in browser</li>\n</ol>\n<h2 id=\"Run-in-the-background\"><a href=\"#Run-in-the-background\" class=\"headerlink\" title=\"Run in the background\"></a>Run in the background</h2><p>Using <code>yarn start</code> to run the server will stop running after disconnecting the ssh connection, it is recommended to use pm2 to run</p>\n<pre><code class=\"shell\"># install pm2\nnpm install -g pm2\n\n# use pm2 to run fiora\npm2 start yarn --name fiora -- start\n\n# view pm2 apps status\npm2 ls\n\n# view pm2 fiora logging\npm2 logs fiora</code></pre>\n<h2 id=\"Run-With-Develop-Mode\"><a href=\"#Run-With-Develop-Mode\" class=\"headerlink\" title=\"Run With Develop Mode\"></a>Run With Develop Mode</h2><ol>\n<li>Start the server <code>yarn dev:server</code></li>\n<li>Start the client <code>yarn dev:web</code></li>\n<li>Open <code>http://localhost:8080</code> in browser</li>\n</ol>\n<h2 id=\"Running-on-the-docker\"><a href=\"#Running-on-the-docker\" class=\"headerlink\" title=\"Running on the docker\"></a>Running on the docker</h2><p>First install docker <a href=\"https://docs.docker.com/install/\" target=\"_blank\" rel=\"noopener\">https://docs.docker.com/install/</a></p>\n<h2 id=\"Run-directly-from-the-DockerHub-image\"><a href=\"#Run-directly-from-the-DockerHub-image\" class=\"headerlink\" title=\"Run directly from the DockerHub image\"></a>Run directly from the DockerHub image</h2><pre><code class=\"shell\"># Pull mongo\ndocker pull mongo\n\n# Pull redis\ndocker pull redis\n\n# Pull fiora\ndocker pull suisuijiang/fiora\n\n# Create a virtual network\ndocker network create fiora-network\n\n# Run mongodB\ndocker run --name fioradb -p 27017:27017 --network fiora-network mongo\n\n# Run redis\ndocker run --name fioraredis -p 6379:6379 --network fiora-network redis\n\n# Run fiora\ndocker run --name fiora -p 9200:9200 --network fiora-network -e Database=mongodb://fioradb:27017/fiora -e RedisHost=fioraredis suisuijiang/fiora</code></pre>\n<h2 id=\"Local-build-image-and-run\"><a href=\"#Local-build-image-and-run\" class=\"headerlink\" title=\"Local build image and run\"></a>Local build image and run</h2><ol>\n<li>Clone the project to the local <code>git clone https://github.com/yinxin630/fiora.git -b master</code></li>\n<li>Build the image<code>docker-compose build --no-cache --force-rm</code></li>\n<li>Run it <code>docker-compose up</code></li>\n</ol>\n"},{"title":"命令：Screen","typora-copy-images-to":"CentOSCommandScreen","date":"2020-02-14T20:14:48.000Z","_content":"\n# 一、背景\n\n系统管理员经常需要SSH 或者telent 远程登录到Linux 服务器，经常运行一些需要很长时间才能完成的任务，比如系统备份、ftp 传输等等。通常情况下我们都是为每一个这样的任务开一个远程终端窗口，因为它们执行的时间太长了。必须等待它们执行完毕，在此期间不能关掉窗口或者断开连接，否则这个任务就会被杀掉，一切半途而废了。\n\n# 二、简介\n\nGNU Screen是一款由GNU计划开发的用于命令行终端切换的自由软件。用户可以通过该软件同时连接多个本地或远程的命令行会话，并在其间自由切换。\n\nGNU Screen可以看作是窗口管理器的命令行界面版本。它提供了统一的管理多个会话的界面和相应的功能。\n\n## 会话恢复\n只要Screen本身没有终止，在其内部运行的会话都可以恢复。这一点对于远程登录的用户特别有用——即使网络连接中断，用户也不会失去对已经打开的命令行会话的控制。只要再次登录到主机上执行screen -r就可以恢复会话的运行。同样在暂时离开的时候，也可以执行分离命令detach，在保证里面的程序正常运行的情况下让Screen挂起（切换到后台）。这一点和图形界面下的VNC很相似。\n## 多窗口\n在Screen环境下，所有的会话都独立的运行，并拥有各自的编号、输入、输出和窗口缓存。用户可以通过快捷键在不同的窗口下切换，并可以自由的重定向各个窗口的输入和输出。Screen实现了基本的文本操作，如复制粘贴等；还提供了类似滚动条的功能，可以查看窗口状况的历史记录。窗口还可以被分区和命名，还可以监视后台窗口的活动。\n## 会话共享\nScreen可以让一个或多个用户从不同终端多次登录一个会话，并共享会话的所有特性（比如可以看到完全相同的输出）。它同时提供了窗口访问权限的机制，可以对窗口进行密码保护。\n> GNU's Screen 官方站点：http://www.gnu.org/software/screen/\n\n# 三、语法\n\n```bash\n# screen [-AmRvx -ls -wipe][-d <作业名称>][-h <行数>][-r <作业名称>][-s ][-S <作业名称>]\n```\n\n参数说明\n\n```bash\n-A 　将所有的视窗都调整为目前终端机的大小。\n-d <作业名称> 　将指定的screen作业离线。\n-h <行数> 　指定视窗的缓冲区行数。\n-m 　即使目前已在作业中的screen作业，仍强制建立新的screen作业。\n-r <作业名称> 　恢复离线的screen作业。\n-R 　先试图恢复离线的作业。若找不到离线的作业，即建立新的screen作业。\n-s 　指定建立新视窗时，所要执行的shell。\n-S <作业名称> 　指定screen作业的名称。\n-v 　显示版本信息。\n-x 　恢复之前离线的screen作业。\n-ls或--list 　显示目前所有的screen作业。\n-wipe 　检查目前所有的screen作业，并删除已经无法使用的screen作业。\n```\n\n# 四、常用screen参数\n```bash\nscreen -S yourname -> 新建一个叫yourname的session\nscreen -ls -> 列出当前所有的session\nscreen -r yourname -> 回到yourname这个session\nscreen -d yourname -> 远程detach某个session\nscreen -d -r yourname -> 结束当前session并回到yourname这个session\n```\n\n在每个screen session 下，所有命令都以 ctrl+a(C-a) 开始。\n```bash\nC-a ? -> 显示所有键绑定信息\nC-a c -> 创建一个新的运行shell的窗口并切换到该窗口\nC-a n -> Next，切换到下一个 window \nC-a p -> Previous，切换到前一个 window \nC-a 0..9 -> 切换到第 0..9 个 window\nCtrl+a [Space] -> 由视窗0循序切换到视窗9\nC-a C-a -> 在两个最近使用的 window 间切换 \nC-a x -> 锁住当前的 window，需用用户密码解锁\nC-a d -> detach，暂时离开当前session，将目前的 screen session (可能含有多个 windows) 丢到后台执行，并会回到还没进 screen 时的状态，此时在 screen session 里，每个 window 内运行的 process (无论是前台/后台)都在继续执行，即使 logout 也不影响。 \nC-a z -> 把当前session放到后台执行，用 shell 的 fg 命令则可回去。\nC-a w -> 显示所有窗口列表\nC-a t -> Time，显示当前时间，和系统的 load \nC-a k -> kill window，强行关闭当前的 window\nC-a [ -> 进入 copy mode，在 copy mode 下可以回滚、搜索、复制就像用使用 vi 一样\n    C-b Backward，PageUp \n    C-f Forward，PageDown \n    H(大写) High，将光标移至左上角 \n    L Low，将光标移至左下角 \n    0 移到行首 \n    $ 行末 \n    w forward one word，以字为单位往前移 \n    b backward one word，以字为单位往后移 \n    Space 第一次按为标记区起点，第二次按为终点 \n    Esc 结束 copy mode \nC-a ] -> Paste，把刚刚在 copy mode 选定的内容贴上\n```\n\n# 五、使用 screen\n\n## 5.1 安装screen\n\n流行的Linux发行版（例如Red Hat Enterprise Linux）通常会自带screen实用程序，如果没有的话，可以从GNU screen的官方网站下载。\n```bash\n[root@TS-DEV ~]# yum install screen\n[root@TS-DEV ~]# rpm -qa|grep screen\nscreen-4.0.3-4.el5\n[root@TS-DEV ~]#\n```\n## 5.2 创建一个新的窗口\n\n安装完成后，直接敲命令screen就可以启动它。但是这样启动的screen会话没有名字，实践上推荐为每个screen会话取一个名字，方便分辨：\n```bash\n[root@TS-DEV ~]# screen -S david \n```\nscreen启动后，会创建第一个窗口，也就是窗口No. 0，并在其中打开一个系统默认的shell，一般都会是bash。所以你敲入命令screen之后，会立刻又返回到命令提示符，仿佛什么也没有发生似的，其实你已经进入Screen的世界了。当然，也可以在screen命令之后加入你喜欢的参数，使之直接打开你指定的程序，例如：\n```bash\n[root@TS-DEV ~]# screen vi david.txt\n```\nscreen创建一个执行vi david.txt的单窗口会话，退出vi 将退出该窗口/会话。\n\n## 5.3 查看窗口和窗口名称\n\n打开多个窗口后，可以使用快捷键C-a w列出当前所有窗口。如果使用文本终端，这个列表会列在屏幕左下角，如果使用X环境下的终端模拟器，这个列表会列在标题栏里。窗口列表的样子一般是这样：\n```bash\n0$ bash  1-$ bash  2*$ bash  \n```\n这个例子中我开启了三个窗口，其中*号表示当前位于窗口2，-号表示上一次切换窗口时位于窗口1。\n\nScreen默认会为窗口命名为编号和窗口中运行程序名的组合，上面的例子中窗口都是默认名字。练习了上面查看窗口的方法，你可能就希望各个窗口可以有不同的名字以方便区分了。可以使用快捷键C-a A来为当前窗口重命名，按下快捷键后，Screen会允许你为当前窗口输入新的名字，回车确认。\n\n## 5.4 会话分离与恢复\n\n你可以不中断screen窗口中程序的运行而暂时断开（detach）screen会话，并在随后时间重新连接（attach）该会话，重新控制各窗口中运行的程序。例如，我们打开一个screen窗口编辑`/tmp/david.txt`文件：\n```bash\n[root@TS-DEV ~]# screen vi /tmp/david.txt\n```\n之后我们想暂时退出做点别的事情，比如出去散散步，那么在screen窗口键入`C-a d`，Screen会给出detached提示：暂时中断会话\n\n半个小时之后回来了，找到该screen会话：\n```bash\n[root@TS-DEV ~]# screen -ls\n```\n\n重新连接会话：\n```bash\n[root@TS-DEV ~]# screen -r 12865\n```\n一切都在。\n\n当然，如果你在另一台机器上没有分离一个Screen会话，就无从恢复会话了。\n这时可以使用下面命令强制将这个会话从它所在的终端分离，转移到新的终端上来：\n\n## 5.5 清除dead 会话\n\n如果由于某种原因其中一个会话死掉了（例如人为杀掉该会话），这时`screen -list`会显示该会话为`dead`状态。使用`screen -wipe`命令清除该会话：\n\n\n\n## 5.6 关闭或杀死窗口\n\n正常情况下，当你退出一个窗口中最后一个程序（通常是bash）后，这个窗口就关闭了。另一个关闭窗口的方法是使用`C-a k`，这个快捷键杀死当前的窗口，同时也将杀死这个窗口中正在运行的进程。\n\n如果一个Screen会话中最后一个窗口被关闭了，那么整个Screen会话也就退出了，screen进程会被终止。\n\n除了依次退出/杀死当前Screen会话中所有窗口这种方法之外，还可以使用快捷键`C-a :`，然后输入quit命令退出Screen会话。需要注意的是，这样退出会杀死所有窗口并退出其中运行的所有程序。其实`C-a :`这个快捷键允许用户直接输入的命令有很多，包括分屏可以输入`split`等，这也是实现Screen功能的一个途径，不过个人认为还是快捷键比较方便些。\n\n# 六、screen 高级应用 \n\n## 6.1 会话共享\n\n还有一种比较好玩的会话恢复，可以实现会话共享。假设你在和朋友在不同地点以相同用户登录一台机器，然后你创建一个screen会话，你朋友可以在他的终端上命令：\n```bash\n[root@TS-DEV ~]# screen -x\n```\n这个命令会将你朋友的终端Attach到你的Screen会话上，并且你的终端不会被Detach。这样你就可以和朋友共享同一个会话了，如果你们当前又处于同一个窗口，那就相当于坐在同一个显示器前面，你的操作会同步演示给你朋友，你朋友的操作也会同步演示给你。当然，如果你们切换到这个会话的不同窗口中去，那还是可以分别进行不同的操作的。\n\n## 6.2 会话锁定与解锁\n\nScreen允许使用快捷键`C-a s`锁定会话。锁定以后，再进行任何输入屏幕都不会再有反应了。但是要注意虽然屏幕上看不到反应，但你的输入都会被Screen中的进程接收到。快捷键`C-a q`可以解锁一个会话。\n\n也可以使用`C-a x`锁定会话，不同的是这样锁定之后，会话会被Screen所属用户的密码保护，需要输入密码才能继续访问这个会话。\n\n## 6.3 发送命令到screen会话\n\n在Screen会话之外，可以通过screen命令操作一个Screen会话，这也为使用Screen作为脚本程序增加了便利。关于Screen在脚本中的应用超出了入门的范围，这里只看一个例子，体会一下在会话之外对Screen的操作：\n```bash\n[root@TS-DEV ~]# screen -S sandy -X screen ping www.baidu.com\n```\n这个命令在一个叫做sandy的screen会话中创建一个新窗口，并在其中运行ping命令。\n\n## 6.4 屏幕分割\n\n现在显示器那么大，将一个屏幕分割成不同区域显示不同的Screen窗口显然是个很酷的事情。可以使用快捷键`C-a s`将显示器水平分割，Screen 4.00.03版本以后，也支持垂直分屏，快捷键是C-a |。分屏以后，可以使用C-a <tab>在各个区块间切换，每一区块上都可以创建窗口并在其中运行进程。\n\n可以用C-a X快捷键关闭当前焦点所在的屏幕区块，也可以用C-a Q关闭除当前区块之外其他的所有区块。关闭的区块中的窗口并不会关闭，还可以通过窗口切换找到它。\n\n\n\n## 6.5 C/P模式和操作\n\nscreen的另一个很强大的功能就是可以在不同窗口之间进行复制粘贴了。使用快`捷C-a键 <Esc>`或者`C-a [`可以进入`copy/paste`模式，这个模式下可以像在vi中一样移动光标，并可以使用空格键设置标记。其实在这个模式下有很多类似vi的操作，譬如使用`/`进行搜索，使用`y`快速标记一行，使用w快速标记一个单词等。关于C/P模式下的高级操作，其文档的这一部分有比较详细的说明。\n\n一般情况下，可以移动光标到指定位置，按下空格设置一个开头标记，然后移动光标到结尾位置，按下空格设置第二个标记，同时会将两个标记之间的部分储存在copy/paste buffer中，并退出copy/paste模式。在正常模式下，可以使用快捷键C-a ]将储存在buffer中的内容粘贴到当前窗口。\n\n## 6.6 更多screen功能\n\n同大多数UNIX程序一样，GNU Screen提供了丰富强大的定制功能。你可以在Screen的默认两级配置文件`/etc/screenrc`和`$HOME/.screenrc`中指定更多，例如设定screen选项，定制绑定键，设定screen会话自启动窗口，启用多用户模式，定制用户访问权限控制等等。如果你愿意的话，也可以自己指定screen配置文件。\n\n以多用户功能为例，screen默认是以单用户模式运行的，你需要在配置文件中指定`multiuser on` 来打开多用户模式，通过`acl*（acladd,acldel,aclchg...）`命令，你可以灵活配置其他用户访问你的screen会话。更多配置文件内容请参考screen的man页。\n\n","source":"_posts/CentOSCommandScreen.md","raw":"---\ntitle: 命令：Screen\ntypora-copy-images-to: CentOSCommandScreen\ndate: 2020-02-15 04:14:48\ntags:\n- 转载\n- Linux\ncategories:\n- 学习\n---\n\n# 一、背景\n\n系统管理员经常需要SSH 或者telent 远程登录到Linux 服务器，经常运行一些需要很长时间才能完成的任务，比如系统备份、ftp 传输等等。通常情况下我们都是为每一个这样的任务开一个远程终端窗口，因为它们执行的时间太长了。必须等待它们执行完毕，在此期间不能关掉窗口或者断开连接，否则这个任务就会被杀掉，一切半途而废了。\n\n# 二、简介\n\nGNU Screen是一款由GNU计划开发的用于命令行终端切换的自由软件。用户可以通过该软件同时连接多个本地或远程的命令行会话，并在其间自由切换。\n\nGNU Screen可以看作是窗口管理器的命令行界面版本。它提供了统一的管理多个会话的界面和相应的功能。\n\n## 会话恢复\n只要Screen本身没有终止，在其内部运行的会话都可以恢复。这一点对于远程登录的用户特别有用——即使网络连接中断，用户也不会失去对已经打开的命令行会话的控制。只要再次登录到主机上执行screen -r就可以恢复会话的运行。同样在暂时离开的时候，也可以执行分离命令detach，在保证里面的程序正常运行的情况下让Screen挂起（切换到后台）。这一点和图形界面下的VNC很相似。\n## 多窗口\n在Screen环境下，所有的会话都独立的运行，并拥有各自的编号、输入、输出和窗口缓存。用户可以通过快捷键在不同的窗口下切换，并可以自由的重定向各个窗口的输入和输出。Screen实现了基本的文本操作，如复制粘贴等；还提供了类似滚动条的功能，可以查看窗口状况的历史记录。窗口还可以被分区和命名，还可以监视后台窗口的活动。\n## 会话共享\nScreen可以让一个或多个用户从不同终端多次登录一个会话，并共享会话的所有特性（比如可以看到完全相同的输出）。它同时提供了窗口访问权限的机制，可以对窗口进行密码保护。\n> GNU's Screen 官方站点：http://www.gnu.org/software/screen/\n\n# 三、语法\n\n```bash\n# screen [-AmRvx -ls -wipe][-d <作业名称>][-h <行数>][-r <作业名称>][-s ][-S <作业名称>]\n```\n\n参数说明\n\n```bash\n-A 　将所有的视窗都调整为目前终端机的大小。\n-d <作业名称> 　将指定的screen作业离线。\n-h <行数> 　指定视窗的缓冲区行数。\n-m 　即使目前已在作业中的screen作业，仍强制建立新的screen作业。\n-r <作业名称> 　恢复离线的screen作业。\n-R 　先试图恢复离线的作业。若找不到离线的作业，即建立新的screen作业。\n-s 　指定建立新视窗时，所要执行的shell。\n-S <作业名称> 　指定screen作业的名称。\n-v 　显示版本信息。\n-x 　恢复之前离线的screen作业。\n-ls或--list 　显示目前所有的screen作业。\n-wipe 　检查目前所有的screen作业，并删除已经无法使用的screen作业。\n```\n\n# 四、常用screen参数\n```bash\nscreen -S yourname -> 新建一个叫yourname的session\nscreen -ls -> 列出当前所有的session\nscreen -r yourname -> 回到yourname这个session\nscreen -d yourname -> 远程detach某个session\nscreen -d -r yourname -> 结束当前session并回到yourname这个session\n```\n\n在每个screen session 下，所有命令都以 ctrl+a(C-a) 开始。\n```bash\nC-a ? -> 显示所有键绑定信息\nC-a c -> 创建一个新的运行shell的窗口并切换到该窗口\nC-a n -> Next，切换到下一个 window \nC-a p -> Previous，切换到前一个 window \nC-a 0..9 -> 切换到第 0..9 个 window\nCtrl+a [Space] -> 由视窗0循序切换到视窗9\nC-a C-a -> 在两个最近使用的 window 间切换 \nC-a x -> 锁住当前的 window，需用用户密码解锁\nC-a d -> detach，暂时离开当前session，将目前的 screen session (可能含有多个 windows) 丢到后台执行，并会回到还没进 screen 时的状态，此时在 screen session 里，每个 window 内运行的 process (无论是前台/后台)都在继续执行，即使 logout 也不影响。 \nC-a z -> 把当前session放到后台执行，用 shell 的 fg 命令则可回去。\nC-a w -> 显示所有窗口列表\nC-a t -> Time，显示当前时间，和系统的 load \nC-a k -> kill window，强行关闭当前的 window\nC-a [ -> 进入 copy mode，在 copy mode 下可以回滚、搜索、复制就像用使用 vi 一样\n    C-b Backward，PageUp \n    C-f Forward，PageDown \n    H(大写) High，将光标移至左上角 \n    L Low，将光标移至左下角 \n    0 移到行首 \n    $ 行末 \n    w forward one word，以字为单位往前移 \n    b backward one word，以字为单位往后移 \n    Space 第一次按为标记区起点，第二次按为终点 \n    Esc 结束 copy mode \nC-a ] -> Paste，把刚刚在 copy mode 选定的内容贴上\n```\n\n# 五、使用 screen\n\n## 5.1 安装screen\n\n流行的Linux发行版（例如Red Hat Enterprise Linux）通常会自带screen实用程序，如果没有的话，可以从GNU screen的官方网站下载。\n```bash\n[root@TS-DEV ~]# yum install screen\n[root@TS-DEV ~]# rpm -qa|grep screen\nscreen-4.0.3-4.el5\n[root@TS-DEV ~]#\n```\n## 5.2 创建一个新的窗口\n\n安装完成后，直接敲命令screen就可以启动它。但是这样启动的screen会话没有名字，实践上推荐为每个screen会话取一个名字，方便分辨：\n```bash\n[root@TS-DEV ~]# screen -S david \n```\nscreen启动后，会创建第一个窗口，也就是窗口No. 0，并在其中打开一个系统默认的shell，一般都会是bash。所以你敲入命令screen之后，会立刻又返回到命令提示符，仿佛什么也没有发生似的，其实你已经进入Screen的世界了。当然，也可以在screen命令之后加入你喜欢的参数，使之直接打开你指定的程序，例如：\n```bash\n[root@TS-DEV ~]# screen vi david.txt\n```\nscreen创建一个执行vi david.txt的单窗口会话，退出vi 将退出该窗口/会话。\n\n## 5.3 查看窗口和窗口名称\n\n打开多个窗口后，可以使用快捷键C-a w列出当前所有窗口。如果使用文本终端，这个列表会列在屏幕左下角，如果使用X环境下的终端模拟器，这个列表会列在标题栏里。窗口列表的样子一般是这样：\n```bash\n0$ bash  1-$ bash  2*$ bash  \n```\n这个例子中我开启了三个窗口，其中*号表示当前位于窗口2，-号表示上一次切换窗口时位于窗口1。\n\nScreen默认会为窗口命名为编号和窗口中运行程序名的组合，上面的例子中窗口都是默认名字。练习了上面查看窗口的方法，你可能就希望各个窗口可以有不同的名字以方便区分了。可以使用快捷键C-a A来为当前窗口重命名，按下快捷键后，Screen会允许你为当前窗口输入新的名字，回车确认。\n\n## 5.4 会话分离与恢复\n\n你可以不中断screen窗口中程序的运行而暂时断开（detach）screen会话，并在随后时间重新连接（attach）该会话，重新控制各窗口中运行的程序。例如，我们打开一个screen窗口编辑`/tmp/david.txt`文件：\n```bash\n[root@TS-DEV ~]# screen vi /tmp/david.txt\n```\n之后我们想暂时退出做点别的事情，比如出去散散步，那么在screen窗口键入`C-a d`，Screen会给出detached提示：暂时中断会话\n\n半个小时之后回来了，找到该screen会话：\n```bash\n[root@TS-DEV ~]# screen -ls\n```\n\n重新连接会话：\n```bash\n[root@TS-DEV ~]# screen -r 12865\n```\n一切都在。\n\n当然，如果你在另一台机器上没有分离一个Screen会话，就无从恢复会话了。\n这时可以使用下面命令强制将这个会话从它所在的终端分离，转移到新的终端上来：\n\n## 5.5 清除dead 会话\n\n如果由于某种原因其中一个会话死掉了（例如人为杀掉该会话），这时`screen -list`会显示该会话为`dead`状态。使用`screen -wipe`命令清除该会话：\n\n\n\n## 5.6 关闭或杀死窗口\n\n正常情况下，当你退出一个窗口中最后一个程序（通常是bash）后，这个窗口就关闭了。另一个关闭窗口的方法是使用`C-a k`，这个快捷键杀死当前的窗口，同时也将杀死这个窗口中正在运行的进程。\n\n如果一个Screen会话中最后一个窗口被关闭了，那么整个Screen会话也就退出了，screen进程会被终止。\n\n除了依次退出/杀死当前Screen会话中所有窗口这种方法之外，还可以使用快捷键`C-a :`，然后输入quit命令退出Screen会话。需要注意的是，这样退出会杀死所有窗口并退出其中运行的所有程序。其实`C-a :`这个快捷键允许用户直接输入的命令有很多，包括分屏可以输入`split`等，这也是实现Screen功能的一个途径，不过个人认为还是快捷键比较方便些。\n\n# 六、screen 高级应用 \n\n## 6.1 会话共享\n\n还有一种比较好玩的会话恢复，可以实现会话共享。假设你在和朋友在不同地点以相同用户登录一台机器，然后你创建一个screen会话，你朋友可以在他的终端上命令：\n```bash\n[root@TS-DEV ~]# screen -x\n```\n这个命令会将你朋友的终端Attach到你的Screen会话上，并且你的终端不会被Detach。这样你就可以和朋友共享同一个会话了，如果你们当前又处于同一个窗口，那就相当于坐在同一个显示器前面，你的操作会同步演示给你朋友，你朋友的操作也会同步演示给你。当然，如果你们切换到这个会话的不同窗口中去，那还是可以分别进行不同的操作的。\n\n## 6.2 会话锁定与解锁\n\nScreen允许使用快捷键`C-a s`锁定会话。锁定以后，再进行任何输入屏幕都不会再有反应了。但是要注意虽然屏幕上看不到反应，但你的输入都会被Screen中的进程接收到。快捷键`C-a q`可以解锁一个会话。\n\n也可以使用`C-a x`锁定会话，不同的是这样锁定之后，会话会被Screen所属用户的密码保护，需要输入密码才能继续访问这个会话。\n\n## 6.3 发送命令到screen会话\n\n在Screen会话之外，可以通过screen命令操作一个Screen会话，这也为使用Screen作为脚本程序增加了便利。关于Screen在脚本中的应用超出了入门的范围，这里只看一个例子，体会一下在会话之外对Screen的操作：\n```bash\n[root@TS-DEV ~]# screen -S sandy -X screen ping www.baidu.com\n```\n这个命令在一个叫做sandy的screen会话中创建一个新窗口，并在其中运行ping命令。\n\n## 6.4 屏幕分割\n\n现在显示器那么大，将一个屏幕分割成不同区域显示不同的Screen窗口显然是个很酷的事情。可以使用快捷键`C-a s`将显示器水平分割，Screen 4.00.03版本以后，也支持垂直分屏，快捷键是C-a |。分屏以后，可以使用C-a <tab>在各个区块间切换，每一区块上都可以创建窗口并在其中运行进程。\n\n可以用C-a X快捷键关闭当前焦点所在的屏幕区块，也可以用C-a Q关闭除当前区块之外其他的所有区块。关闭的区块中的窗口并不会关闭，还可以通过窗口切换找到它。\n\n\n\n## 6.5 C/P模式和操作\n\nscreen的另一个很强大的功能就是可以在不同窗口之间进行复制粘贴了。使用快`捷C-a键 <Esc>`或者`C-a [`可以进入`copy/paste`模式，这个模式下可以像在vi中一样移动光标，并可以使用空格键设置标记。其实在这个模式下有很多类似vi的操作，譬如使用`/`进行搜索，使用`y`快速标记一行，使用w快速标记一个单词等。关于C/P模式下的高级操作，其文档的这一部分有比较详细的说明。\n\n一般情况下，可以移动光标到指定位置，按下空格设置一个开头标记，然后移动光标到结尾位置，按下空格设置第二个标记，同时会将两个标记之间的部分储存在copy/paste buffer中，并退出copy/paste模式。在正常模式下，可以使用快捷键C-a ]将储存在buffer中的内容粘贴到当前窗口。\n\n## 6.6 更多screen功能\n\n同大多数UNIX程序一样，GNU Screen提供了丰富强大的定制功能。你可以在Screen的默认两级配置文件`/etc/screenrc`和`$HOME/.screenrc`中指定更多，例如设定screen选项，定制绑定键，设定screen会话自启动窗口，启用多用户模式，定制用户访问权限控制等等。如果你愿意的话，也可以自己指定screen配置文件。\n\n以多用户功能为例，screen默认是以单用户模式运行的，你需要在配置文件中指定`multiuser on` 来打开多用户模式，通过`acl*（acladd,acldel,aclchg...）`命令，你可以灵活配置其他用户访问你的screen会话。更多配置文件内容请参考screen的man页。\n\n","slug":"CentOSCommandScreen","published":1,"updated":"2021-11-25T05:20:28.967Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckweswgi70006e8vhgjpjgj5o","content":"<h1 id=\"一、背景\"><a href=\"#一、背景\" class=\"headerlink\" title=\"一、背景\"></a>一、背景</h1><p>系统管理员经常需要SSH 或者telent 远程登录到Linux 服务器，经常运行一些需要很长时间才能完成的任务，比如系统备份、ftp 传输等等。通常情况下我们都是为每一个这样的任务开一个远程终端窗口，因为它们执行的时间太长了。必须等待它们执行完毕，在此期间不能关掉窗口或者断开连接，否则这个任务就会被杀掉，一切半途而废了。</p>\n<h1 id=\"二、简介\"><a href=\"#二、简介\" class=\"headerlink\" title=\"二、简介\"></a>二、简介</h1><p>GNU Screen是一款由GNU计划开发的用于命令行终端切换的自由软件。用户可以通过该软件同时连接多个本地或远程的命令行会话，并在其间自由切换。</p>\n<p>GNU Screen可以看作是窗口管理器的命令行界面版本。它提供了统一的管理多个会话的界面和相应的功能。</p>\n<h2 id=\"会话恢复\"><a href=\"#会话恢复\" class=\"headerlink\" title=\"会话恢复\"></a>会话恢复</h2><p>只要Screen本身没有终止，在其内部运行的会话都可以恢复。这一点对于远程登录的用户特别有用——即使网络连接中断，用户也不会失去对已经打开的命令行会话的控制。只要再次登录到主机上执行screen -r就可以恢复会话的运行。同样在暂时离开的时候，也可以执行分离命令detach，在保证里面的程序正常运行的情况下让Screen挂起（切换到后台）。这一点和图形界面下的VNC很相似。</p>\n<h2 id=\"多窗口\"><a href=\"#多窗口\" class=\"headerlink\" title=\"多窗口\"></a>多窗口</h2><p>在Screen环境下，所有的会话都独立的运行，并拥有各自的编号、输入、输出和窗口缓存。用户可以通过快捷键在不同的窗口下切换，并可以自由的重定向各个窗口的输入和输出。Screen实现了基本的文本操作，如复制粘贴等；还提供了类似滚动条的功能，可以查看窗口状况的历史记录。窗口还可以被分区和命名，还可以监视后台窗口的活动。</p>\n<h2 id=\"会话共享\"><a href=\"#会话共享\" class=\"headerlink\" title=\"会话共享\"></a>会话共享</h2><p>Screen可以让一个或多个用户从不同终端多次登录一个会话，并共享会话的所有特性（比如可以看到完全相同的输出）。它同时提供了窗口访问权限的机制，可以对窗口进行密码保护。</p>\n<blockquote>\n<p>GNU’s Screen 官方站点：<a href=\"http://www.gnu.org/software/screen/\" target=\"_blank\" rel=\"noopener\">http://www.gnu.org/software/screen/</a></p>\n</blockquote>\n<h1 id=\"三、语法\"><a href=\"#三、语法\" class=\"headerlink\" title=\"三、语法\"></a>三、语法</h1><pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token comment\" spellcheck=\"true\"># screen [-AmRvx -ls -wipe][-d &lt;作业名称>][-h &lt;行数>][-r &lt;作业名称>][-s ][-S &lt;作业名称>]</span></code></pre>\n<p>参数说明</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">-A 　将所有的视窗都调整为目前终端机的大小。\n-d <span class=\"token operator\">&lt;</span>作业名称<span class=\"token operator\">></span> 　将指定的screen作业离线。\n-h <span class=\"token operator\">&lt;</span>行数<span class=\"token operator\">></span> 　指定视窗的缓冲区行数。\n-m 　即使目前已在作业中的screen作业，仍强制建立新的screen作业。\n-r <span class=\"token operator\">&lt;</span>作业名称<span class=\"token operator\">></span> 　恢复离线的screen作业。\n-R 　先试图恢复离线的作业。若找不到离线的作业，即建立新的screen作业。\n-s 　指定建立新视窗时，所要执行的shell。\n-S <span class=\"token operator\">&lt;</span>作业名称<span class=\"token operator\">></span> 　指定screen作业的名称。\n-v 　显示版本信息。\n-x 　恢复之前离线的screen作业。\n-ls或--list 　显示目前所有的screen作业。\n-wipe 　检查目前所有的screen作业，并删除已经无法使用的screen作业。</code></pre>\n<h1 id=\"四、常用screen参数\"><a href=\"#四、常用screen参数\" class=\"headerlink\" title=\"四、常用screen参数\"></a>四、常用screen参数</h1><pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token function\">screen</span> -S yourname -<span class=\"token operator\">></span> 新建一个叫yourname的session\n<span class=\"token function\">screen</span> -ls -<span class=\"token operator\">></span> 列出当前所有的session\n<span class=\"token function\">screen</span> -r yourname -<span class=\"token operator\">></span> 回到yourname这个session\n<span class=\"token function\">screen</span> -d yourname -<span class=\"token operator\">></span> 远程detach某个session\n<span class=\"token function\">screen</span> -d -r yourname -<span class=\"token operator\">></span> 结束当前session并回到yourname这个session</code></pre>\n<p>在每个screen session 下，所有命令都以 ctrl+a(C-a) 开始。</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">C-a ? -<span class=\"token operator\">></span> 显示所有键绑定信息\nC-a c -<span class=\"token operator\">></span> 创建一个新的运行shell的窗口并切换到该窗口\nC-a n -<span class=\"token operator\">></span> Next，切换到下一个 window \nC-a p -<span class=\"token operator\">></span> Previous，切换到前一个 window \nC-a 0<span class=\"token punctuation\">..</span>9 -<span class=\"token operator\">></span> 切换到第 0<span class=\"token punctuation\">..</span>9 个 window\nCtrl+a <span class=\"token punctuation\">[</span>Space<span class=\"token punctuation\">]</span> -<span class=\"token operator\">></span> 由视窗0循序切换到视窗9\nC-a C-a -<span class=\"token operator\">></span> 在两个最近使用的 window 间切换 \nC-a x -<span class=\"token operator\">></span> 锁住当前的 window，需用用户密码解锁\nC-a d -<span class=\"token operator\">></span> detach，暂时离开当前session，将目前的 <span class=\"token function\">screen</span> session <span class=\"token punctuation\">(</span>可能含有多个 windows<span class=\"token punctuation\">)</span> 丢到后台执行，并会回到还没进 <span class=\"token function\">screen</span> 时的状态，此时在 <span class=\"token function\">screen</span> session 里，每个 window 内运行的 process <span class=\"token punctuation\">(</span>无论是前台/后台<span class=\"token punctuation\">)</span>都在继续执行，即使 <span class=\"token function\">logout</span> 也不影响。 \nC-a z -<span class=\"token operator\">></span> 把当前session放到后台执行，用 shell 的 <span class=\"token function\">fg</span> 命令则可回去。\nC-a w -<span class=\"token operator\">></span> 显示所有窗口列表\nC-a t -<span class=\"token operator\">></span> Time，显示当前时间，和系统的 load \nC-a k -<span class=\"token operator\">></span> <span class=\"token function\">kill</span> window，强行关闭当前的 window\nC-a <span class=\"token punctuation\">[</span> -<span class=\"token operator\">></span> 进入 copy mode，在 copy mode 下可以回滚、搜索、复制就像用使用 <span class=\"token function\">vi</span> 一样\n    C-b Backward，PageUp \n    C-f Forward，PageDown \n    H<span class=\"token punctuation\">(</span>大写<span class=\"token punctuation\">)</span> High，将光标移至左上角 \n    L Low，将光标移至左下角 \n    0 移到行首 \n    $ 行末 \n    w forward one word，以字为单位往前移 \n    b backward one word，以字为单位往后移 \n    Space 第一次按为标记区起点，第二次按为终点 \n    Esc 结束 copy mode \nC-a <span class=\"token punctuation\">]</span> -<span class=\"token operator\">></span> Paste，把刚刚在 copy mode 选定的内容贴上</code></pre>\n<h1 id=\"五、使用-screen\"><a href=\"#五、使用-screen\" class=\"headerlink\" title=\"五、使用 screen\"></a>五、使用 screen</h1><h2 id=\"5-1-安装screen\"><a href=\"#5-1-安装screen\" class=\"headerlink\" title=\"5.1 安装screen\"></a>5.1 安装screen</h2><p>流行的Linux发行版（例如Red Hat Enterprise Linux）通常会自带screen实用程序，如果没有的话，可以从GNU screen的官方网站下载。</p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@TS-DEV ~<span class=\"token punctuation\">]</span><span class=\"token comment\" spellcheck=\"true\"># yum install screen</span>\n<span class=\"token punctuation\">[</span>root@TS-DEV ~<span class=\"token punctuation\">]</span><span class=\"token comment\" spellcheck=\"true\"># rpm -qa|grep screen</span>\nscreen-4.0.3-4.el5\n<span class=\"token punctuation\">[</span>root@TS-DEV ~<span class=\"token punctuation\">]</span><span class=\"token comment\" spellcheck=\"true\">#</span></code></pre>\n<h2 id=\"5-2-创建一个新的窗口\"><a href=\"#5-2-创建一个新的窗口\" class=\"headerlink\" title=\"5.2 创建一个新的窗口\"></a>5.2 创建一个新的窗口</h2><p>安装完成后，直接敲命令screen就可以启动它。但是这样启动的screen会话没有名字，实践上推荐为每个screen会话取一个名字，方便分辨：</p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@TS-DEV ~<span class=\"token punctuation\">]</span><span class=\"token comment\" spellcheck=\"true\"># screen -S david </span></code></pre>\n<p>screen启动后，会创建第一个窗口，也就是窗口No. 0，并在其中打开一个系统默认的shell，一般都会是bash。所以你敲入命令screen之后，会立刻又返回到命令提示符，仿佛什么也没有发生似的，其实你已经进入Screen的世界了。当然，也可以在screen命令之后加入你喜欢的参数，使之直接打开你指定的程序，例如：</p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@TS-DEV ~<span class=\"token punctuation\">]</span><span class=\"token comment\" spellcheck=\"true\"># screen vi david.txt</span></code></pre>\n<p>screen创建一个执行vi david.txt的单窗口会话，退出vi 将退出该窗口/会话。</p>\n<h2 id=\"5-3-查看窗口和窗口名称\"><a href=\"#5-3-查看窗口和窗口名称\" class=\"headerlink\" title=\"5.3 查看窗口和窗口名称\"></a>5.3 查看窗口和窗口名称</h2><p>打开多个窗口后，可以使用快捷键C-a w列出当前所有窗口。如果使用文本终端，这个列表会列在屏幕左下角，如果使用X环境下的终端模拟器，这个列表会列在标题栏里。窗口列表的样子一般是这样：</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">0$ <span class=\"token function\">bash</span>  1-$ <span class=\"token function\">bash</span>  2*$ <span class=\"token function\">bash</span>  </code></pre>\n<p>这个例子中我开启了三个窗口，其中*号表示当前位于窗口2，-号表示上一次切换窗口时位于窗口1。</p>\n<p>Screen默认会为窗口命名为编号和窗口中运行程序名的组合，上面的例子中窗口都是默认名字。练习了上面查看窗口的方法，你可能就希望各个窗口可以有不同的名字以方便区分了。可以使用快捷键C-a A来为当前窗口重命名，按下快捷键后，Screen会允许你为当前窗口输入新的名字，回车确认。</p>\n<h2 id=\"5-4-会话分离与恢复\"><a href=\"#5-4-会话分离与恢复\" class=\"headerlink\" title=\"5.4 会话分离与恢复\"></a>5.4 会话分离与恢复</h2><p>你可以不中断screen窗口中程序的运行而暂时断开（detach）screen会话，并在随后时间重新连接（attach）该会话，重新控制各窗口中运行的程序。例如，我们打开一个screen窗口编辑<code>/tmp/david.txt</code>文件：</p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@TS-DEV ~<span class=\"token punctuation\">]</span><span class=\"token comment\" spellcheck=\"true\"># screen vi /tmp/david.txt</span></code></pre>\n<p>之后我们想暂时退出做点别的事情，比如出去散散步，那么在screen窗口键入<code>C-a d</code>，Screen会给出detached提示：暂时中断会话</p>\n<p>半个小时之后回来了，找到该screen会话：</p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@TS-DEV ~<span class=\"token punctuation\">]</span><span class=\"token comment\" spellcheck=\"true\"># screen -ls</span></code></pre>\n<p>重新连接会话：</p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@TS-DEV ~<span class=\"token punctuation\">]</span><span class=\"token comment\" spellcheck=\"true\"># screen -r 12865</span></code></pre>\n<p>一切都在。</p>\n<p>当然，如果你在另一台机器上没有分离一个Screen会话，就无从恢复会话了。<br>这时可以使用下面命令强制将这个会话从它所在的终端分离，转移到新的终端上来：</p>\n<h2 id=\"5-5-清除dead-会话\"><a href=\"#5-5-清除dead-会话\" class=\"headerlink\" title=\"5.5 清除dead 会话\"></a>5.5 清除dead 会话</h2><p>如果由于某种原因其中一个会话死掉了（例如人为杀掉该会话），这时<code>screen -list</code>会显示该会话为<code>dead</code>状态。使用<code>screen -wipe</code>命令清除该会话：</p>\n<h2 id=\"5-6-关闭或杀死窗口\"><a href=\"#5-6-关闭或杀死窗口\" class=\"headerlink\" title=\"5.6 关闭或杀死窗口\"></a>5.6 关闭或杀死窗口</h2><p>正常情况下，当你退出一个窗口中最后一个程序（通常是bash）后，这个窗口就关闭了。另一个关闭窗口的方法是使用<code>C-a k</code>，这个快捷键杀死当前的窗口，同时也将杀死这个窗口中正在运行的进程。</p>\n<p>如果一个Screen会话中最后一个窗口被关闭了，那么整个Screen会话也就退出了，screen进程会被终止。</p>\n<p>除了依次退出/杀死当前Screen会话中所有窗口这种方法之外，还可以使用快捷键<code>C-a :</code>，然后输入quit命令退出Screen会话。需要注意的是，这样退出会杀死所有窗口并退出其中运行的所有程序。其实<code>C-a :</code>这个快捷键允许用户直接输入的命令有很多，包括分屏可以输入<code>split</code>等，这也是实现Screen功能的一个途径，不过个人认为还是快捷键比较方便些。</p>\n<h1 id=\"六、screen-高级应用\"><a href=\"#六、screen-高级应用\" class=\"headerlink\" title=\"六、screen 高级应用\"></a>六、screen 高级应用</h1><h2 id=\"6-1-会话共享\"><a href=\"#6-1-会话共享\" class=\"headerlink\" title=\"6.1 会话共享\"></a>6.1 会话共享</h2><p>还有一种比较好玩的会话恢复，可以实现会话共享。假设你在和朋友在不同地点以相同用户登录一台机器，然后你创建一个screen会话，你朋友可以在他的终端上命令：</p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@TS-DEV ~<span class=\"token punctuation\">]</span><span class=\"token comment\" spellcheck=\"true\"># screen -x</span></code></pre>\n<p>这个命令会将你朋友的终端Attach到你的Screen会话上，并且你的终端不会被Detach。这样你就可以和朋友共享同一个会话了，如果你们当前又处于同一个窗口，那就相当于坐在同一个显示器前面，你的操作会同步演示给你朋友，你朋友的操作也会同步演示给你。当然，如果你们切换到这个会话的不同窗口中去，那还是可以分别进行不同的操作的。</p>\n<h2 id=\"6-2-会话锁定与解锁\"><a href=\"#6-2-会话锁定与解锁\" class=\"headerlink\" title=\"6.2 会话锁定与解锁\"></a>6.2 会话锁定与解锁</h2><p>Screen允许使用快捷键<code>C-a s</code>锁定会话。锁定以后，再进行任何输入屏幕都不会再有反应了。但是要注意虽然屏幕上看不到反应，但你的输入都会被Screen中的进程接收到。快捷键<code>C-a q</code>可以解锁一个会话。</p>\n<p>也可以使用<code>C-a x</code>锁定会话，不同的是这样锁定之后，会话会被Screen所属用户的密码保护，需要输入密码才能继续访问这个会话。</p>\n<h2 id=\"6-3-发送命令到screen会话\"><a href=\"#6-3-发送命令到screen会话\" class=\"headerlink\" title=\"6.3 发送命令到screen会话\"></a>6.3 发送命令到screen会话</h2><p>在Screen会话之外，可以通过screen命令操作一个Screen会话，这也为使用Screen作为脚本程序增加了便利。关于Screen在脚本中的应用超出了入门的范围，这里只看一个例子，体会一下在会话之外对Screen的操作：</p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@TS-DEV ~<span class=\"token punctuation\">]</span><span class=\"token comment\" spellcheck=\"true\"># screen -S sandy -X screen ping www.baidu.com</span></code></pre>\n<p>这个命令在一个叫做sandy的screen会话中创建一个新窗口，并在其中运行ping命令。</p>\n<h2 id=\"6-4-屏幕分割\"><a href=\"#6-4-屏幕分割\" class=\"headerlink\" title=\"6.4 屏幕分割\"></a>6.4 屏幕分割</h2><p>现在显示器那么大，将一个屏幕分割成不同区域显示不同的Screen窗口显然是个很酷的事情。可以使用快捷键<code>C-a s</code>将显示器水平分割，Screen 4.00.03版本以后，也支持垂直分屏，快捷键是C-a |。分屏以后，可以使用C-a <tab>在各个区块间切换，每一区块上都可以创建窗口并在其中运行进程。</tab></p>\n<p>可以用C-a X快捷键关闭当前焦点所在的屏幕区块，也可以用C-a Q关闭除当前区块之外其他的所有区块。关闭的区块中的窗口并不会关闭，还可以通过窗口切换找到它。</p>\n<h2 id=\"6-5-C-P模式和操作\"><a href=\"#6-5-C-P模式和操作\" class=\"headerlink\" title=\"6.5 C/P模式和操作\"></a>6.5 C/P模式和操作</h2><p>screen的另一个很强大的功能就是可以在不同窗口之间进行复制粘贴了。使用快<code>捷C-a键 &lt;Esc&gt;</code>或者<code>C-a [</code>可以进入<code>copy/paste</code>模式，这个模式下可以像在vi中一样移动光标，并可以使用空格键设置标记。其实在这个模式下有很多类似vi的操作，譬如使用<code>/</code>进行搜索，使用<code>y</code>快速标记一行，使用w快速标记一个单词等。关于C/P模式下的高级操作，其文档的这一部分有比较详细的说明。</p>\n<p>一般情况下，可以移动光标到指定位置，按下空格设置一个开头标记，然后移动光标到结尾位置，按下空格设置第二个标记，同时会将两个标记之间的部分储存在copy/paste buffer中，并退出copy/paste模式。在正常模式下，可以使用快捷键C-a ]将储存在buffer中的内容粘贴到当前窗口。</p>\n<h2 id=\"6-6-更多screen功能\"><a href=\"#6-6-更多screen功能\" class=\"headerlink\" title=\"6.6 更多screen功能\"></a>6.6 更多screen功能</h2><p>同大多数UNIX程序一样，GNU Screen提供了丰富强大的定制功能。你可以在Screen的默认两级配置文件<code>/etc/screenrc</code>和<code>$HOME/.screenrc</code>中指定更多，例如设定screen选项，定制绑定键，设定screen会话自启动窗口，启用多用户模式，定制用户访问权限控制等等。如果你愿意的话，也可以自己指定screen配置文件。</p>\n<p>以多用户功能为例，screen默认是以单用户模式运行的，你需要在配置文件中指定<code>multiuser on</code> 来打开多用户模式，通过<code>acl*（acladd,acldel,aclchg...）</code>命令，你可以灵活配置其他用户访问你的screen会话。更多配置文件内容请参考screen的man页。</p>\n","site":{"data":{"friends":[{"avatar":"http://q1.qlogo.cn/g?b=qq&nk=2750360683&s=640","name":"核心","introduction":"来自山东的一位普通高中生,喜欢捣鼓2333，爱好编程（新手）","url":"http://www.emtips.net/","title":"Piu~"},{"avatar":"https://i2.hdslb.com/bfs/face/2433a7d4053048811fec9907bcb066e867399da7.jpg","name":"SRO","introduction":"欢迎来到SRO知识库,您在这里可以看到大多数的SRO内部，外部资料","url":"https://sromc.cn/","title":"Piu~"},{"avatar":"http://q1.qlogo.cn/g?b=qq&nk=1692565761&s=640","name":"河南省商务中等职业学校","introduction":"网络搭建竞赛组","url":"https://hnswxx.cn/","title":"Piu~"},{"avatar":"http://q1.qlogo.cn/g?b=qq&nk=2191023046&s=640","name":"贺兰星辰","introduction":"HikariLan's Blog","url":"https://my.minecraft.kim/","title":"Piu~"}]}},"excerpt":"","more":"<h1 id=\"一、背景\"><a href=\"#一、背景\" class=\"headerlink\" title=\"一、背景\"></a>一、背景</h1><p>系统管理员经常需要SSH 或者telent 远程登录到Linux 服务器，经常运行一些需要很长时间才能完成的任务，比如系统备份、ftp 传输等等。通常情况下我们都是为每一个这样的任务开一个远程终端窗口，因为它们执行的时间太长了。必须等待它们执行完毕，在此期间不能关掉窗口或者断开连接，否则这个任务就会被杀掉，一切半途而废了。</p>\n<h1 id=\"二、简介\"><a href=\"#二、简介\" class=\"headerlink\" title=\"二、简介\"></a>二、简介</h1><p>GNU Screen是一款由GNU计划开发的用于命令行终端切换的自由软件。用户可以通过该软件同时连接多个本地或远程的命令行会话，并在其间自由切换。</p>\n<p>GNU Screen可以看作是窗口管理器的命令行界面版本。它提供了统一的管理多个会话的界面和相应的功能。</p>\n<h2 id=\"会话恢复\"><a href=\"#会话恢复\" class=\"headerlink\" title=\"会话恢复\"></a>会话恢复</h2><p>只要Screen本身没有终止，在其内部运行的会话都可以恢复。这一点对于远程登录的用户特别有用——即使网络连接中断，用户也不会失去对已经打开的命令行会话的控制。只要再次登录到主机上执行screen -r就可以恢复会话的运行。同样在暂时离开的时候，也可以执行分离命令detach，在保证里面的程序正常运行的情况下让Screen挂起（切换到后台）。这一点和图形界面下的VNC很相似。</p>\n<h2 id=\"多窗口\"><a href=\"#多窗口\" class=\"headerlink\" title=\"多窗口\"></a>多窗口</h2><p>在Screen环境下，所有的会话都独立的运行，并拥有各自的编号、输入、输出和窗口缓存。用户可以通过快捷键在不同的窗口下切换，并可以自由的重定向各个窗口的输入和输出。Screen实现了基本的文本操作，如复制粘贴等；还提供了类似滚动条的功能，可以查看窗口状况的历史记录。窗口还可以被分区和命名，还可以监视后台窗口的活动。</p>\n<h2 id=\"会话共享\"><a href=\"#会话共享\" class=\"headerlink\" title=\"会话共享\"></a>会话共享</h2><p>Screen可以让一个或多个用户从不同终端多次登录一个会话，并共享会话的所有特性（比如可以看到完全相同的输出）。它同时提供了窗口访问权限的机制，可以对窗口进行密码保护。</p>\n<blockquote>\n<p>GNU’s Screen 官方站点：<a href=\"http://www.gnu.org/software/screen/\" target=\"_blank\" rel=\"noopener\">http://www.gnu.org/software/screen/</a></p>\n</blockquote>\n<h1 id=\"三、语法\"><a href=\"#三、语法\" class=\"headerlink\" title=\"三、语法\"></a>三、语法</h1><pre><code class=\"bash\"># screen [-AmRvx -ls -wipe][-d &lt;作业名称&gt;][-h &lt;行数&gt;][-r &lt;作业名称&gt;][-s ][-S &lt;作业名称&gt;]</code></pre>\n<p>参数说明</p>\n<pre><code class=\"bash\">-A 　将所有的视窗都调整为目前终端机的大小。\n-d &lt;作业名称&gt; 　将指定的screen作业离线。\n-h &lt;行数&gt; 　指定视窗的缓冲区行数。\n-m 　即使目前已在作业中的screen作业，仍强制建立新的screen作业。\n-r &lt;作业名称&gt; 　恢复离线的screen作业。\n-R 　先试图恢复离线的作业。若找不到离线的作业，即建立新的screen作业。\n-s 　指定建立新视窗时，所要执行的shell。\n-S &lt;作业名称&gt; 　指定screen作业的名称。\n-v 　显示版本信息。\n-x 　恢复之前离线的screen作业。\n-ls或--list 　显示目前所有的screen作业。\n-wipe 　检查目前所有的screen作业，并删除已经无法使用的screen作业。</code></pre>\n<h1 id=\"四、常用screen参数\"><a href=\"#四、常用screen参数\" class=\"headerlink\" title=\"四、常用screen参数\"></a>四、常用screen参数</h1><pre><code class=\"bash\">screen -S yourname -&gt; 新建一个叫yourname的session\nscreen -ls -&gt; 列出当前所有的session\nscreen -r yourname -&gt; 回到yourname这个session\nscreen -d yourname -&gt; 远程detach某个session\nscreen -d -r yourname -&gt; 结束当前session并回到yourname这个session</code></pre>\n<p>在每个screen session 下，所有命令都以 ctrl+a(C-a) 开始。</p>\n<pre><code class=\"bash\">C-a ? -&gt; 显示所有键绑定信息\nC-a c -&gt; 创建一个新的运行shell的窗口并切换到该窗口\nC-a n -&gt; Next，切换到下一个 window \nC-a p -&gt; Previous，切换到前一个 window \nC-a 0..9 -&gt; 切换到第 0..9 个 window\nCtrl+a [Space] -&gt; 由视窗0循序切换到视窗9\nC-a C-a -&gt; 在两个最近使用的 window 间切换 \nC-a x -&gt; 锁住当前的 window，需用用户密码解锁\nC-a d -&gt; detach，暂时离开当前session，将目前的 screen session (可能含有多个 windows) 丢到后台执行，并会回到还没进 screen 时的状态，此时在 screen session 里，每个 window 内运行的 process (无论是前台/后台)都在继续执行，即使 logout 也不影响。 \nC-a z -&gt; 把当前session放到后台执行，用 shell 的 fg 命令则可回去。\nC-a w -&gt; 显示所有窗口列表\nC-a t -&gt; Time，显示当前时间，和系统的 load \nC-a k -&gt; kill window，强行关闭当前的 window\nC-a [ -&gt; 进入 copy mode，在 copy mode 下可以回滚、搜索、复制就像用使用 vi 一样\n    C-b Backward，PageUp \n    C-f Forward，PageDown \n    H(大写) High，将光标移至左上角 \n    L Low，将光标移至左下角 \n    0 移到行首 \n    $ 行末 \n    w forward one word，以字为单位往前移 \n    b backward one word，以字为单位往后移 \n    Space 第一次按为标记区起点，第二次按为终点 \n    Esc 结束 copy mode \nC-a ] -&gt; Paste，把刚刚在 copy mode 选定的内容贴上</code></pre>\n<h1 id=\"五、使用-screen\"><a href=\"#五、使用-screen\" class=\"headerlink\" title=\"五、使用 screen\"></a>五、使用 screen</h1><h2 id=\"5-1-安装screen\"><a href=\"#5-1-安装screen\" class=\"headerlink\" title=\"5.1 安装screen\"></a>5.1 安装screen</h2><p>流行的Linux发行版（例如Red Hat Enterprise Linux）通常会自带screen实用程序，如果没有的话，可以从GNU screen的官方网站下载。</p>\n<pre><code class=\"bash\">[root@TS-DEV ~]# yum install screen\n[root@TS-DEV ~]# rpm -qa|grep screen\nscreen-4.0.3-4.el5\n[root@TS-DEV ~]#</code></pre>\n<h2 id=\"5-2-创建一个新的窗口\"><a href=\"#5-2-创建一个新的窗口\" class=\"headerlink\" title=\"5.2 创建一个新的窗口\"></a>5.2 创建一个新的窗口</h2><p>安装完成后，直接敲命令screen就可以启动它。但是这样启动的screen会话没有名字，实践上推荐为每个screen会话取一个名字，方便分辨：</p>\n<pre><code class=\"bash\">[root@TS-DEV ~]# screen -S david </code></pre>\n<p>screen启动后，会创建第一个窗口，也就是窗口No. 0，并在其中打开一个系统默认的shell，一般都会是bash。所以你敲入命令screen之后，会立刻又返回到命令提示符，仿佛什么也没有发生似的，其实你已经进入Screen的世界了。当然，也可以在screen命令之后加入你喜欢的参数，使之直接打开你指定的程序，例如：</p>\n<pre><code class=\"bash\">[root@TS-DEV ~]# screen vi david.txt</code></pre>\n<p>screen创建一个执行vi david.txt的单窗口会话，退出vi 将退出该窗口/会话。</p>\n<h2 id=\"5-3-查看窗口和窗口名称\"><a href=\"#5-3-查看窗口和窗口名称\" class=\"headerlink\" title=\"5.3 查看窗口和窗口名称\"></a>5.3 查看窗口和窗口名称</h2><p>打开多个窗口后，可以使用快捷键C-a w列出当前所有窗口。如果使用文本终端，这个列表会列在屏幕左下角，如果使用X环境下的终端模拟器，这个列表会列在标题栏里。窗口列表的样子一般是这样：</p>\n<pre><code class=\"bash\">0$ bash  1-$ bash  2*$ bash  </code></pre>\n<p>这个例子中我开启了三个窗口，其中*号表示当前位于窗口2，-号表示上一次切换窗口时位于窗口1。</p>\n<p>Screen默认会为窗口命名为编号和窗口中运行程序名的组合，上面的例子中窗口都是默认名字。练习了上面查看窗口的方法，你可能就希望各个窗口可以有不同的名字以方便区分了。可以使用快捷键C-a A来为当前窗口重命名，按下快捷键后，Screen会允许你为当前窗口输入新的名字，回车确认。</p>\n<h2 id=\"5-4-会话分离与恢复\"><a href=\"#5-4-会话分离与恢复\" class=\"headerlink\" title=\"5.4 会话分离与恢复\"></a>5.4 会话分离与恢复</h2><p>你可以不中断screen窗口中程序的运行而暂时断开（detach）screen会话，并在随后时间重新连接（attach）该会话，重新控制各窗口中运行的程序。例如，我们打开一个screen窗口编辑<code>/tmp/david.txt</code>文件：</p>\n<pre><code class=\"bash\">[root@TS-DEV ~]# screen vi /tmp/david.txt</code></pre>\n<p>之后我们想暂时退出做点别的事情，比如出去散散步，那么在screen窗口键入<code>C-a d</code>，Screen会给出detached提示：暂时中断会话</p>\n<p>半个小时之后回来了，找到该screen会话：</p>\n<pre><code class=\"bash\">[root@TS-DEV ~]# screen -ls</code></pre>\n<p>重新连接会话：</p>\n<pre><code class=\"bash\">[root@TS-DEV ~]# screen -r 12865</code></pre>\n<p>一切都在。</p>\n<p>当然，如果你在另一台机器上没有分离一个Screen会话，就无从恢复会话了。<br>这时可以使用下面命令强制将这个会话从它所在的终端分离，转移到新的终端上来：</p>\n<h2 id=\"5-5-清除dead-会话\"><a href=\"#5-5-清除dead-会话\" class=\"headerlink\" title=\"5.5 清除dead 会话\"></a>5.5 清除dead 会话</h2><p>如果由于某种原因其中一个会话死掉了（例如人为杀掉该会话），这时<code>screen -list</code>会显示该会话为<code>dead</code>状态。使用<code>screen -wipe</code>命令清除该会话：</p>\n<h2 id=\"5-6-关闭或杀死窗口\"><a href=\"#5-6-关闭或杀死窗口\" class=\"headerlink\" title=\"5.6 关闭或杀死窗口\"></a>5.6 关闭或杀死窗口</h2><p>正常情况下，当你退出一个窗口中最后一个程序（通常是bash）后，这个窗口就关闭了。另一个关闭窗口的方法是使用<code>C-a k</code>，这个快捷键杀死当前的窗口，同时也将杀死这个窗口中正在运行的进程。</p>\n<p>如果一个Screen会话中最后一个窗口被关闭了，那么整个Screen会话也就退出了，screen进程会被终止。</p>\n<p>除了依次退出/杀死当前Screen会话中所有窗口这种方法之外，还可以使用快捷键<code>C-a :</code>，然后输入quit命令退出Screen会话。需要注意的是，这样退出会杀死所有窗口并退出其中运行的所有程序。其实<code>C-a :</code>这个快捷键允许用户直接输入的命令有很多，包括分屏可以输入<code>split</code>等，这也是实现Screen功能的一个途径，不过个人认为还是快捷键比较方便些。</p>\n<h1 id=\"六、screen-高级应用\"><a href=\"#六、screen-高级应用\" class=\"headerlink\" title=\"六、screen 高级应用\"></a>六、screen 高级应用</h1><h2 id=\"6-1-会话共享\"><a href=\"#6-1-会话共享\" class=\"headerlink\" title=\"6.1 会话共享\"></a>6.1 会话共享</h2><p>还有一种比较好玩的会话恢复，可以实现会话共享。假设你在和朋友在不同地点以相同用户登录一台机器，然后你创建一个screen会话，你朋友可以在他的终端上命令：</p>\n<pre><code class=\"bash\">[root@TS-DEV ~]# screen -x</code></pre>\n<p>这个命令会将你朋友的终端Attach到你的Screen会话上，并且你的终端不会被Detach。这样你就可以和朋友共享同一个会话了，如果你们当前又处于同一个窗口，那就相当于坐在同一个显示器前面，你的操作会同步演示给你朋友，你朋友的操作也会同步演示给你。当然，如果你们切换到这个会话的不同窗口中去，那还是可以分别进行不同的操作的。</p>\n<h2 id=\"6-2-会话锁定与解锁\"><a href=\"#6-2-会话锁定与解锁\" class=\"headerlink\" title=\"6.2 会话锁定与解锁\"></a>6.2 会话锁定与解锁</h2><p>Screen允许使用快捷键<code>C-a s</code>锁定会话。锁定以后，再进行任何输入屏幕都不会再有反应了。但是要注意虽然屏幕上看不到反应，但你的输入都会被Screen中的进程接收到。快捷键<code>C-a q</code>可以解锁一个会话。</p>\n<p>也可以使用<code>C-a x</code>锁定会话，不同的是这样锁定之后，会话会被Screen所属用户的密码保护，需要输入密码才能继续访问这个会话。</p>\n<h2 id=\"6-3-发送命令到screen会话\"><a href=\"#6-3-发送命令到screen会话\" class=\"headerlink\" title=\"6.3 发送命令到screen会话\"></a>6.3 发送命令到screen会话</h2><p>在Screen会话之外，可以通过screen命令操作一个Screen会话，这也为使用Screen作为脚本程序增加了便利。关于Screen在脚本中的应用超出了入门的范围，这里只看一个例子，体会一下在会话之外对Screen的操作：</p>\n<pre><code class=\"bash\">[root@TS-DEV ~]# screen -S sandy -X screen ping www.baidu.com</code></pre>\n<p>这个命令在一个叫做sandy的screen会话中创建一个新窗口，并在其中运行ping命令。</p>\n<h2 id=\"6-4-屏幕分割\"><a href=\"#6-4-屏幕分割\" class=\"headerlink\" title=\"6.4 屏幕分割\"></a>6.4 屏幕分割</h2><p>现在显示器那么大，将一个屏幕分割成不同区域显示不同的Screen窗口显然是个很酷的事情。可以使用快捷键<code>C-a s</code>将显示器水平分割，Screen 4.00.03版本以后，也支持垂直分屏，快捷键是C-a |。分屏以后，可以使用C-a <tab>在各个区块间切换，每一区块上都可以创建窗口并在其中运行进程。</tab></p>\n<p>可以用C-a X快捷键关闭当前焦点所在的屏幕区块，也可以用C-a Q关闭除当前区块之外其他的所有区块。关闭的区块中的窗口并不会关闭，还可以通过窗口切换找到它。</p>\n<h2 id=\"6-5-C-P模式和操作\"><a href=\"#6-5-C-P模式和操作\" class=\"headerlink\" title=\"6.5 C/P模式和操作\"></a>6.5 C/P模式和操作</h2><p>screen的另一个很强大的功能就是可以在不同窗口之间进行复制粘贴了。使用快<code>捷C-a键 &lt;Esc&gt;</code>或者<code>C-a [</code>可以进入<code>copy/paste</code>模式，这个模式下可以像在vi中一样移动光标，并可以使用空格键设置标记。其实在这个模式下有很多类似vi的操作，譬如使用<code>/</code>进行搜索，使用<code>y</code>快速标记一行，使用w快速标记一个单词等。关于C/P模式下的高级操作，其文档的这一部分有比较详细的说明。</p>\n<p>一般情况下，可以移动光标到指定位置，按下空格设置一个开头标记，然后移动光标到结尾位置，按下空格设置第二个标记，同时会将两个标记之间的部分储存在copy/paste buffer中，并退出copy/paste模式。在正常模式下，可以使用快捷键C-a ]将储存在buffer中的内容粘贴到当前窗口。</p>\n<h2 id=\"6-6-更多screen功能\"><a href=\"#6-6-更多screen功能\" class=\"headerlink\" title=\"6.6 更多screen功能\"></a>6.6 更多screen功能</h2><p>同大多数UNIX程序一样，GNU Screen提供了丰富强大的定制功能。你可以在Screen的默认两级配置文件<code>/etc/screenrc</code>和<code>$HOME/.screenrc</code>中指定更多，例如设定screen选项，定制绑定键，设定screen会话自启动窗口，启用多用户模式，定制用户访问权限控制等等。如果你愿意的话，也可以自己指定screen配置文件。</p>\n<p>以多用户功能为例，screen默认是以单用户模式运行的，你需要在配置文件中指定<code>multiuser on</code> 来打开多用户模式，通过<code>acl*（acladd,acldel,aclchg...）</code>命令，你可以灵活配置其他用户访问你的screen会话。更多配置文件内容请参考screen的man页。</p>\n"},{"title":"使用Kali无线渗透获取WiFi密码","date":"2020-02-14T18:55:52.000Z","typora-root-url":"UseKaliWirelessPenetrationToGetTheWifiPassword","_content":"\n# 前期准备：\n\n在虚拟机Kali中是无法直接使用物理机本身的网卡的，需要自己买一块网卡插上去让Kali使用，而且对于网卡的类型也是有限制的，买得不好的话就用不了又得退货。本人在这用的无线网卡型号为`EP-N8508GS`，仅供参考。\n\n# Fighting：\n\n先将无线网卡插入Kali Linux，输入`iwconfig`命令查看得到，网卡名为`wlan0`：\n![img](20170802215316131-1581710292501.png)\n\n接着通过以下命令将可能会影响进行无线实验的因素排除掉：\n![img](20170802215328854-1581710292745.png)\n\n接着启动`monitor`模式：\n![img](20170802215338473-1581710292744.png)\n\n输入`iwconfig`命令确认一遍，确实已进入`monitor`模式：\n![img](20170802215350265-1581710292556.png)\n\n接着，输入`airodump-ng wlan0mon`命令来进行抓包：\n![img](20170802215400518-1581710292743.png)\n\n在这里选择对加密类型为`WPA`的`Tenda_490298`进行抓包，可看到其BSSID为`C8:3A:35:49:02:98`，CH即信道为`4`。\n\n\n接着输入`airodump-ng wlan0mon --bssid C8:3A:35:49:02:98 -c 4 -w wpa`只抓取该WPA的数据包：\n![img](20170802215413958-1581710292740.png)\n\n可以看到，有三台设备连接到该路由WiFi，应该是手机，接着提示已经抓到了4步握手信息，然后可以关闭抓取。\n\n上面可能是因为有个室友刚好去连WiFi而不是一直都连着吧，所以直接就可以看到。\n\n若抓不到4步握手，则通过以下命令断开设备与WiFi的连接，使其重新建立连接从而可以抓取四步握手信息：\n```bash\naireplay-ng -0 2 -a 52:A5:89:BA:57:B3 -c 68:3E:34:A1:F7:27 wlan0mon\n```\n\n通过`ls wpa*`命令查看抓到的信息保存的文件（多的wpa包是之前做测试保存下来的）：\n![img](20170802215956812-1581710292746.png)\n\n这里看最新的那个即`wpa-04`即可，可以看到总共有4个。\n\n后面使用Kali Linux中默认存在的字典，目录为`/usr/share/wordlists/rockyou.txt.zip`，其中需要使用命令来解压：\n![img](20170802220104192-1581710292747.png)\n\n这里顺便记录一下Kali中几个常用的字典文件的位置：\n```bash\n/usr/share/john/password.lst\n/usr/share/wfuzz/wordlist\n/usr/share/wordlists\n```\n\n然后使用命令`aircrack-ng -w /usr/share/wordlists/rockyou.txt wpa-04.cap`进行破解：\n\n![img](20170802220117307-1581710292747.png)\n\n可以看到，破解成功，密码为`11223344`\n\n没到两秒钟的时间就暴破出WiFi密码，这个弱口令是一个室友当初想方便一点就弄的这个，后面赶紧改了个复杂的。\n\n最后注意的是，WPA和WEP不同（具体的可以百度），如果在字典中没有对应的口令，换句话说，只要WiFi密码设置得够复杂、在口令字典文件中不存在，那么就别指望爆破出密码了。可以看出，也是需要点运气的~\n\n> 原文地址：https://blog.csdn.net/ski_12/article/details/76598873","source":"_posts/UseKaliWirelessPenetrationToGetTheWifiPassword.md","raw":"---\ntitle: 使用Kali无线渗透获取WiFi密码\n\ndate: 2020-02-15 02:55:52\ntags:\n- Kali\ncategories:\n- 学习\ntypora-root-url: UseKaliWirelessPenetrationToGetTheWifiPassword\n---\n\n# 前期准备：\n\n在虚拟机Kali中是无法直接使用物理机本身的网卡的，需要自己买一块网卡插上去让Kali使用，而且对于网卡的类型也是有限制的，买得不好的话就用不了又得退货。本人在这用的无线网卡型号为`EP-N8508GS`，仅供参考。\n\n# Fighting：\n\n先将无线网卡插入Kali Linux，输入`iwconfig`命令查看得到，网卡名为`wlan0`：\n![img](20170802215316131-1581710292501.png)\n\n接着通过以下命令将可能会影响进行无线实验的因素排除掉：\n![img](20170802215328854-1581710292745.png)\n\n接着启动`monitor`模式：\n![img](20170802215338473-1581710292744.png)\n\n输入`iwconfig`命令确认一遍，确实已进入`monitor`模式：\n![img](20170802215350265-1581710292556.png)\n\n接着，输入`airodump-ng wlan0mon`命令来进行抓包：\n![img](20170802215400518-1581710292743.png)\n\n在这里选择对加密类型为`WPA`的`Tenda_490298`进行抓包，可看到其BSSID为`C8:3A:35:49:02:98`，CH即信道为`4`。\n\n\n接着输入`airodump-ng wlan0mon --bssid C8:3A:35:49:02:98 -c 4 -w wpa`只抓取该WPA的数据包：\n![img](20170802215413958-1581710292740.png)\n\n可以看到，有三台设备连接到该路由WiFi，应该是手机，接着提示已经抓到了4步握手信息，然后可以关闭抓取。\n\n上面可能是因为有个室友刚好去连WiFi而不是一直都连着吧，所以直接就可以看到。\n\n若抓不到4步握手，则通过以下命令断开设备与WiFi的连接，使其重新建立连接从而可以抓取四步握手信息：\n```bash\naireplay-ng -0 2 -a 52:A5:89:BA:57:B3 -c 68:3E:34:A1:F7:27 wlan0mon\n```\n\n通过`ls wpa*`命令查看抓到的信息保存的文件（多的wpa包是之前做测试保存下来的）：\n![img](20170802215956812-1581710292746.png)\n\n这里看最新的那个即`wpa-04`即可，可以看到总共有4个。\n\n后面使用Kali Linux中默认存在的字典，目录为`/usr/share/wordlists/rockyou.txt.zip`，其中需要使用命令来解压：\n![img](20170802220104192-1581710292747.png)\n\n这里顺便记录一下Kali中几个常用的字典文件的位置：\n```bash\n/usr/share/john/password.lst\n/usr/share/wfuzz/wordlist\n/usr/share/wordlists\n```\n\n然后使用命令`aircrack-ng -w /usr/share/wordlists/rockyou.txt wpa-04.cap`进行破解：\n\n![img](20170802220117307-1581710292747.png)\n\n可以看到，破解成功，密码为`11223344`\n\n没到两秒钟的时间就暴破出WiFi密码，这个弱口令是一个室友当初想方便一点就弄的这个，后面赶紧改了个复杂的。\n\n最后注意的是，WPA和WEP不同（具体的可以百度），如果在字典中没有对应的口令，换句话说，只要WiFi密码设置得够复杂、在口令字典文件中不存在，那么就别指望爆破出密码了。可以看出，也是需要点运气的~\n\n> 原文地址：https://blog.csdn.net/ski_12/article/details/76598873","slug":"UseKaliWirelessPenetrationToGetTheWifiPassword","published":1,"updated":"2021-11-25T08:46:27.259Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckweswgi80008e8vh26vgf0xf","content":"<h1 id=\"前期准备：\"><a href=\"#前期准备：\" class=\"headerlink\" title=\"前期准备：\"></a>前期准备：</h1><p>在虚拟机Kali中是无法直接使用物理机本身的网卡的，需要自己买一块网卡插上去让Kali使用，而且对于网卡的类型也是有限制的，买得不好的话就用不了又得退货。本人在这用的无线网卡型号为<code>EP-N8508GS</code>，仅供参考。</p>\n<h1 id=\"Fighting：\"><a href=\"#Fighting：\" class=\"headerlink\" title=\"Fighting：\"></a>Fighting：</h1><p>先将无线网卡插入Kali Linux，输入<code>iwconfig</code>命令查看得到，网卡名为<code>wlan0</code>：<br><img src=\"/2020/02/15/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215316131-1581710292501.png\" alt=\"img\"></p>\n<p>接着通过以下命令将可能会影响进行无线实验的因素排除掉：<br><img src=\"/2020/02/15/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215328854-1581710292745.png\" alt=\"img\"></p>\n<p>接着启动<code>monitor</code>模式：<br><img src=\"/2020/02/15/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215338473-1581710292744.png\" alt=\"img\"></p>\n<p>输入<code>iwconfig</code>命令确认一遍，确实已进入<code>monitor</code>模式：<br><img src=\"/2020/02/15/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215350265-1581710292556.png\" alt=\"img\"></p>\n<p>接着，输入<code>airodump-ng wlan0mon</code>命令来进行抓包：<br><img src=\"/2020/02/15/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215400518-1581710292743.png\" alt=\"img\"></p>\n<p>在这里选择对加密类型为<code>WPA</code>的<code>Tenda_490298</code>进行抓包，可看到其BSSID为<code>C8:3A:35:49:02:98</code>，CH即信道为<code>4</code>。</p>\n<p>接着输入<code>airodump-ng wlan0mon --bssid C8:3A:35:49:02:98 -c 4 -w wpa</code>只抓取该WPA的数据包：<br><img src=\"/2020/02/15/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215413958-1581710292740.png\" alt=\"img\"></p>\n<p>可以看到，有三台设备连接到该路由WiFi，应该是手机，接着提示已经抓到了4步握手信息，然后可以关闭抓取。</p>\n<p>上面可能是因为有个室友刚好去连WiFi而不是一直都连着吧，所以直接就可以看到。</p>\n<p>若抓不到4步握手，则通过以下命令断开设备与WiFi的连接，使其重新建立连接从而可以抓取四步握手信息：</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">aireplay-ng -0 2 -a 52:A5:89:BA:57:B3 -c 68:3E:34:A1:F7:27 wlan0mon</code></pre>\n<p>通过<code>ls wpa*</code>命令查看抓到的信息保存的文件（多的wpa包是之前做测试保存下来的）：<br><img src=\"/2020/02/15/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215956812-1581710292746.png\" alt=\"img\"></p>\n<p>这里看最新的那个即<code>wpa-04</code>即可，可以看到总共有4个。</p>\n<p>后面使用Kali Linux中默认存在的字典，目录为<code>/usr/share/wordlists/rockyou.txt.zip</code>，其中需要使用命令来解压：<br><img src=\"/2020/02/15/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802220104192-1581710292747.png\" alt=\"img\"></p>\n<p>这里顺便记录一下Kali中几个常用的字典文件的位置：</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">/usr/share/john/password.lst\n/usr/share/wfuzz/wordlist\n/usr/share/wordlists</code></pre>\n<p>然后使用命令<code>aircrack-ng -w /usr/share/wordlists/rockyou.txt wpa-04.cap</code>进行破解：</p>\n<p><img src=\"/2020/02/15/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802220117307-1581710292747.png\" alt=\"img\"></p>\n<p>可以看到，破解成功，密码为<code>11223344</code></p>\n<p>没到两秒钟的时间就暴破出WiFi密码，这个弱口令是一个室友当初想方便一点就弄的这个，后面赶紧改了个复杂的。</p>\n<p>最后注意的是，WPA和WEP不同（具体的可以百度），如果在字典中没有对应的口令，换句话说，只要WiFi密码设置得够复杂、在口令字典文件中不存在，那么就别指望爆破出密码了。可以看出，也是需要点运气的~</p>\n<blockquote>\n<p>原文地址：<a href=\"https://blog.csdn.net/ski_12/article/details/76598873\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/ski_12/article/details/76598873</a></p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"http://q1.qlogo.cn/g?b=qq&nk=2750360683&s=640","name":"核心","introduction":"来自山东的一位普通高中生,喜欢捣鼓2333，爱好编程（新手）","url":"http://www.emtips.net/","title":"Piu~"},{"avatar":"https://i2.hdslb.com/bfs/face/2433a7d4053048811fec9907bcb066e867399da7.jpg","name":"SRO","introduction":"欢迎来到SRO知识库,您在这里可以看到大多数的SRO内部，外部资料","url":"https://sromc.cn/","title":"Piu~"},{"avatar":"http://q1.qlogo.cn/g?b=qq&nk=1692565761&s=640","name":"河南省商务中等职业学校","introduction":"网络搭建竞赛组","url":"https://hnswxx.cn/","title":"Piu~"},{"avatar":"http://q1.qlogo.cn/g?b=qq&nk=2191023046&s=640","name":"贺兰星辰","introduction":"HikariLan's Blog","url":"https://my.minecraft.kim/","title":"Piu~"}]}},"excerpt":"","more":"<h1 id=\"前期准备：\"><a href=\"#前期准备：\" class=\"headerlink\" title=\"前期准备：\"></a>前期准备：</h1><p>在虚拟机Kali中是无法直接使用物理机本身的网卡的，需要自己买一块网卡插上去让Kali使用，而且对于网卡的类型也是有限制的，买得不好的话就用不了又得退货。本人在这用的无线网卡型号为<code>EP-N8508GS</code>，仅供参考。</p>\n<h1 id=\"Fighting：\"><a href=\"#Fighting：\" class=\"headerlink\" title=\"Fighting：\"></a>Fighting：</h1><p>先将无线网卡插入Kali Linux，输入<code>iwconfig</code>命令查看得到，网卡名为<code>wlan0</code>：<br><img src=\"/2020/02/15/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215316131-1581710292501.png\" alt=\"img\"></p>\n<p>接着通过以下命令将可能会影响进行无线实验的因素排除掉：<br><img src=\"/2020/02/15/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215328854-1581710292745.png\" alt=\"img\"></p>\n<p>接着启动<code>monitor</code>模式：<br><img src=\"/2020/02/15/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215338473-1581710292744.png\" alt=\"img\"></p>\n<p>输入<code>iwconfig</code>命令确认一遍，确实已进入<code>monitor</code>模式：<br><img src=\"/2020/02/15/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215350265-1581710292556.png\" alt=\"img\"></p>\n<p>接着，输入<code>airodump-ng wlan0mon</code>命令来进行抓包：<br><img src=\"/2020/02/15/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215400518-1581710292743.png\" alt=\"img\"></p>\n<p>在这里选择对加密类型为<code>WPA</code>的<code>Tenda_490298</code>进行抓包，可看到其BSSID为<code>C8:3A:35:49:02:98</code>，CH即信道为<code>4</code>。</p>\n<p>接着输入<code>airodump-ng wlan0mon --bssid C8:3A:35:49:02:98 -c 4 -w wpa</code>只抓取该WPA的数据包：<br><img src=\"/2020/02/15/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215413958-1581710292740.png\" alt=\"img\"></p>\n<p>可以看到，有三台设备连接到该路由WiFi，应该是手机，接着提示已经抓到了4步握手信息，然后可以关闭抓取。</p>\n<p>上面可能是因为有个室友刚好去连WiFi而不是一直都连着吧，所以直接就可以看到。</p>\n<p>若抓不到4步握手，则通过以下命令断开设备与WiFi的连接，使其重新建立连接从而可以抓取四步握手信息：</p>\n<pre><code class=\"bash\">aireplay-ng -0 2 -a 52:A5:89:BA:57:B3 -c 68:3E:34:A1:F7:27 wlan0mon</code></pre>\n<p>通过<code>ls wpa*</code>命令查看抓到的信息保存的文件（多的wpa包是之前做测试保存下来的）：<br><img src=\"/2020/02/15/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215956812-1581710292746.png\" alt=\"img\"></p>\n<p>这里看最新的那个即<code>wpa-04</code>即可，可以看到总共有4个。</p>\n<p>后面使用Kali Linux中默认存在的字典，目录为<code>/usr/share/wordlists/rockyou.txt.zip</code>，其中需要使用命令来解压：<br><img src=\"/2020/02/15/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802220104192-1581710292747.png\" alt=\"img\"></p>\n<p>这里顺便记录一下Kali中几个常用的字典文件的位置：</p>\n<pre><code class=\"bash\">/usr/share/john/password.lst\n/usr/share/wfuzz/wordlist\n/usr/share/wordlists</code></pre>\n<p>然后使用命令<code>aircrack-ng -w /usr/share/wordlists/rockyou.txt wpa-04.cap</code>进行破解：</p>\n<p><img src=\"/2020/02/15/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802220117307-1581710292747.png\" alt=\"img\"></p>\n<p>可以看到，破解成功，密码为<code>11223344</code></p>\n<p>没到两秒钟的时间就暴破出WiFi密码，这个弱口令是一个室友当初想方便一点就弄的这个，后面赶紧改了个复杂的。</p>\n<p>最后注意的是，WPA和WEP不同（具体的可以百度），如果在字典中没有对应的口令，换句话说，只要WiFi密码设置得够复杂、在口令字典文件中不存在，那么就别指望爆破出密码了。可以看出，也是需要点运气的~</p>\n<blockquote>\n<p>原文地址：<a href=\"https://blog.csdn.net/ski_12/article/details/76598873\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/ski_12/article/details/76598873</a></p>\n</blockquote>\n"},{"title":"hexo引用本地图片无法显示","typora-copy-images-to":"hexo引用本地图片无法显示","date":"2020-02-14T19:39:30.000Z","typora-root-url":"HexoReferencesToLocalImagesCannotBeDisplayed","_content":"\n最近重新开始用起hexo，但是发现在文章中引用本地图片时总是显示不出来。\n花费了许久时间才解决这个问题。\n因此将一些解决经验整理出来，希望能帮助到大家。\n\n# 一、插件安装与配置\n\n## 首先我们需要安装一个图片路径转换的插件，这个插件名字是hexo-asset-image\n```bash\nnpm install https://github.com/CodeFalling/hexo-asset-image --save\n```\n\n但是这个插件的内容需要修改【不然可能会出Bug】\n\n## 打开/node_modules/hexo-asset-image/index.js，将内容更换为下面的代码\n\n```javascript\n'use strict';\nvar cheerio = require('cheerio');\n\n// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string\nfunction getPosition(str, m, i) {\n    return str.split(m, i)\n        .join(m)\n        .length;\n}\n\nvar version = String(hexo.version)\n    .split('.');\nhexo.extend.filter.register('after_post_render', function(data) {\n    var config = hexo.config;\n    if (config.post_asset_folder) {\n        var link = data.permalink;\n        if (version.length > 0 && Number(version[0]) == 3)\n            var beginPos = getPosition(link, '/', 1) + 1;\n        else\n            var beginPos = getPosition(link, '/', 3) + 1;\n        // In hexo 3.1.1, the permalink of \"about\" page is like \".../about/index.html\".\n        var endPos = link.lastIndexOf('/') + 1;\n        link = link.substring(beginPos, endPos);\n\n        var toprocess = ['excerpt', 'more', 'content'];\n        for (var i = 0; i < toprocess.length; i++) {\n            var key = toprocess[i];\n\n            var $ = cheerio.load(data[key], {\n                ignoreWhitespace: false,\n                xmlMode: false,\n                lowerCaseTags: false,\n                decodeEntities: false\n            });\n\n            $('img')\n                .each(function() {\n                    if ($(this)\n                        .attr('src')) {\n                        // For windows style path, we replace '\\' to '/'.\n                        var src = $(this)\n                            .attr('src')\n                            .replace('\\\\', '/');\n                        if (!/http[s]*.*|\\/\\/.*/.test(src) &&\n                            !/^\\s*\\//.test(src)) {\n                            // For \"about\" page, the first part of \"src\" can't be removed.\n                            // In addition, to support multi-level local directory.\n                            var linkArray = link.split('/')\n                                .filter(function(elem) {\n                                    return elem != '';\n                                });\n                            var srcArray = src.split('/')\n                                .filter(function(elem) {\n                                    return elem != '' && elem != '.';\n                                });\n                            if (srcArray.length > 1)\n                                srcArray.shift();\n                            src = srcArray.join('/');\n                            $(this)\n                                .attr('src', config.root + link + src);\n                            console.info && console.info(\"update link as:-->\" + config.root + link + src);\n                        }\n                    } else {\n                        console.info && console.info(\"no src attr, skipped...\");\n                        console.info && console.info($(this));\n                    }\n                });\n            data[key] = $.html();\n        }\n    }\n});\n```\n\n# 二、问题推测\n\n## （一）本地图片没有有效上传至github仓库中，导致引用无效\n\n解决方案：安装插件（回看前文）\n\n## （二）本地图片没有存放在同名文件夹中\n\n解决方案：将需要引用的本地图片存放在与文章名相同的文件夹中\n\n## （三）图片路径出错\n\n这也是我出现的问题。\n\n打开F12，发现下图问题。\n\n![](20181115112933605.png)\n\n因为我在github中关于Hexo的仓库名为850552586.github.io，并不是Ericam.com，所以导致了访问无效。\n\n【这个问题可能是因为我更换电脑后重新配置Hexo忽略的地方】\n\n解决方案：打开_config.yml修改下述内容\n\n![](20181115112941162.png)\n\n## （四）相对路径引用的标签插件\n\n通过常规的 markdown 语法和相对路径来引用图片和其它资源可能会导致它们在存档页或者主页上显示不正确。在Hexo 2时代，社区创建了很多插件来解决这个问题。但是，随着Hexo 3 的发布，许多新的标签插件被加入到了核心代码中。这使得你可以更简单地在文章中引用你的资源。\n\n也就是说在存档页和主页不能使用和文章内容中的常规语法来引用图片。\n\n比如说：当你打开文章资源文件夹功能后，你把一个 example.jpg 图片放在了你的资源文件夹中，如果通过使用相对路径的常规 markdown 语法 ![](/example.jpg) ，它将 不会 出现在首页上。（但是它会在文章中按你期待的方式工作）\n\n正确的引用图片方式是使用下列的标签插件而不是 markdown ：\n\n```\n{% asset_img example.jpg This is an example image %}\n```\n\n浏览地址：Ericam个人博客\n配置教程：安装配置Gridea\n\n原创不易，请勿转载。如有问题，可以评论区留言。点赞！\n\n###### ————————————————\n\n版权声明：本文为CSDN博主「Ericam_」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。\n原文链接：https://blog.csdn.net/xjm850552586/article/details/84101345","source":"_posts/HexoReferencesToLocalImagesCannotBeDisplayed.md","raw":"---\ntitle: hexo引用本地图片无法显示\ntypora-copy-images-to: hexo引用本地图片无法显示\ndate: 2020-02-15 03:39:30\ncategories:\n- Bugs\ntags:\n- Hexo\n- 转载\ntypora-root-url: HexoReferencesToLocalImagesCannotBeDisplayed\n---\n\n最近重新开始用起hexo，但是发现在文章中引用本地图片时总是显示不出来。\n花费了许久时间才解决这个问题。\n因此将一些解决经验整理出来，希望能帮助到大家。\n\n# 一、插件安装与配置\n\n## 首先我们需要安装一个图片路径转换的插件，这个插件名字是hexo-asset-image\n```bash\nnpm install https://github.com/CodeFalling/hexo-asset-image --save\n```\n\n但是这个插件的内容需要修改【不然可能会出Bug】\n\n## 打开/node_modules/hexo-asset-image/index.js，将内容更换为下面的代码\n\n```javascript\n'use strict';\nvar cheerio = require('cheerio');\n\n// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string\nfunction getPosition(str, m, i) {\n    return str.split(m, i)\n        .join(m)\n        .length;\n}\n\nvar version = String(hexo.version)\n    .split('.');\nhexo.extend.filter.register('after_post_render', function(data) {\n    var config = hexo.config;\n    if (config.post_asset_folder) {\n        var link = data.permalink;\n        if (version.length > 0 && Number(version[0]) == 3)\n            var beginPos = getPosition(link, '/', 1) + 1;\n        else\n            var beginPos = getPosition(link, '/', 3) + 1;\n        // In hexo 3.1.1, the permalink of \"about\" page is like \".../about/index.html\".\n        var endPos = link.lastIndexOf('/') + 1;\n        link = link.substring(beginPos, endPos);\n\n        var toprocess = ['excerpt', 'more', 'content'];\n        for (var i = 0; i < toprocess.length; i++) {\n            var key = toprocess[i];\n\n            var $ = cheerio.load(data[key], {\n                ignoreWhitespace: false,\n                xmlMode: false,\n                lowerCaseTags: false,\n                decodeEntities: false\n            });\n\n            $('img')\n                .each(function() {\n                    if ($(this)\n                        .attr('src')) {\n                        // For windows style path, we replace '\\' to '/'.\n                        var src = $(this)\n                            .attr('src')\n                            .replace('\\\\', '/');\n                        if (!/http[s]*.*|\\/\\/.*/.test(src) &&\n                            !/^\\s*\\//.test(src)) {\n                            // For \"about\" page, the first part of \"src\" can't be removed.\n                            // In addition, to support multi-level local directory.\n                            var linkArray = link.split('/')\n                                .filter(function(elem) {\n                                    return elem != '';\n                                });\n                            var srcArray = src.split('/')\n                                .filter(function(elem) {\n                                    return elem != '' && elem != '.';\n                                });\n                            if (srcArray.length > 1)\n                                srcArray.shift();\n                            src = srcArray.join('/');\n                            $(this)\n                                .attr('src', config.root + link + src);\n                            console.info && console.info(\"update link as:-->\" + config.root + link + src);\n                        }\n                    } else {\n                        console.info && console.info(\"no src attr, skipped...\");\n                        console.info && console.info($(this));\n                    }\n                });\n            data[key] = $.html();\n        }\n    }\n});\n```\n\n# 二、问题推测\n\n## （一）本地图片没有有效上传至github仓库中，导致引用无效\n\n解决方案：安装插件（回看前文）\n\n## （二）本地图片没有存放在同名文件夹中\n\n解决方案：将需要引用的本地图片存放在与文章名相同的文件夹中\n\n## （三）图片路径出错\n\n这也是我出现的问题。\n\n打开F12，发现下图问题。\n\n![](20181115112933605.png)\n\n因为我在github中关于Hexo的仓库名为850552586.github.io，并不是Ericam.com，所以导致了访问无效。\n\n【这个问题可能是因为我更换电脑后重新配置Hexo忽略的地方】\n\n解决方案：打开_config.yml修改下述内容\n\n![](20181115112941162.png)\n\n## （四）相对路径引用的标签插件\n\n通过常规的 markdown 语法和相对路径来引用图片和其它资源可能会导致它们在存档页或者主页上显示不正确。在Hexo 2时代，社区创建了很多插件来解决这个问题。但是，随着Hexo 3 的发布，许多新的标签插件被加入到了核心代码中。这使得你可以更简单地在文章中引用你的资源。\n\n也就是说在存档页和主页不能使用和文章内容中的常规语法来引用图片。\n\n比如说：当你打开文章资源文件夹功能后，你把一个 example.jpg 图片放在了你的资源文件夹中，如果通过使用相对路径的常规 markdown 语法 ![](/example.jpg) ，它将 不会 出现在首页上。（但是它会在文章中按你期待的方式工作）\n\n正确的引用图片方式是使用下列的标签插件而不是 markdown ：\n\n```\n{% asset_img example.jpg This is an example image %}\n```\n\n浏览地址：Ericam个人博客\n配置教程：安装配置Gridea\n\n原创不易，请勿转载。如有问题，可以评论区留言。点赞！\n\n###### ————————————————\n\n版权声明：本文为CSDN博主「Ericam_」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。\n原文链接：https://blog.csdn.net/xjm850552586/article/details/84101345","slug":"HexoReferencesToLocalImagesCannotBeDisplayed","published":1,"updated":"2021-11-25T04:56:50.521Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckweswgia000ae8vh3pdaberu","content":"<p>最近重新开始用起hexo，但是发现在文章中引用本地图片时总是显示不出来。<br>花费了许久时间才解决这个问题。<br>因此将一些解决经验整理出来，希望能帮助到大家。</p>\n<h1 id=\"一、插件安装与配置\"><a href=\"#一、插件安装与配置\" class=\"headerlink\" title=\"一、插件安装与配置\"></a>一、插件安装与配置</h1><h2 id=\"首先我们需要安装一个图片路径转换的插件，这个插件名字是hexo-asset-image\"><a href=\"#首先我们需要安装一个图片路径转换的插件，这个插件名字是hexo-asset-image\" class=\"headerlink\" title=\"首先我们需要安装一个图片路径转换的插件，这个插件名字是hexo-asset-image\"></a>首先我们需要安装一个图片路径转换的插件，这个插件名字是hexo-asset-image</h2><pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> https://github.com/CodeFalling/hexo-asset-image --save</code></pre>\n<p>但是这个插件的内容需要修改【不然可能会出Bug】</p>\n<h2 id=\"打开-node-modules-hexo-asset-image-index-js，将内容更换为下面的代码\"><a href=\"#打开-node-modules-hexo-asset-image-index-js，将内容更换为下面的代码\" class=\"headerlink\" title=\"打开/node_modules/hexo-asset-image/index.js，将内容更换为下面的代码\"></a>打开/node_modules/hexo-asset-image/index.js，将内容更换为下面的代码</h2><pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token string\">'use strict'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> cheerio <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cheerio'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getPosition</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> version <span class=\"token operator\">=</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span>hexo<span class=\"token punctuation\">.</span>version<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nhexo<span class=\"token punctuation\">.</span>extend<span class=\"token punctuation\">.</span>filter<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token string\">'after_post_render'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> config <span class=\"token operator\">=</span> hexo<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>post_asset_folder<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> link <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>permalink<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>version<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>version<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">var</span> beginPos <span class=\"token operator\">=</span> <span class=\"token function\">getPosition</span><span class=\"token punctuation\">(</span>link<span class=\"token punctuation\">,</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span>\n            <span class=\"token keyword\">var</span> beginPos <span class=\"token operator\">=</span> <span class=\"token function\">getPosition</span><span class=\"token punctuation\">(</span>link<span class=\"token punctuation\">,</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// In hexo 3.1.1, the permalink of \"about\" page is like \".../about/index.html\".</span>\n        <span class=\"token keyword\">var</span> endPos <span class=\"token operator\">=</span> link<span class=\"token punctuation\">.</span><span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        link <span class=\"token operator\">=</span> link<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>beginPos<span class=\"token punctuation\">,</span> endPos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">var</span> toprocess <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'excerpt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'more'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'content'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> toprocess<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">var</span> key <span class=\"token operator\">=</span> toprocess<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">var</span> $ <span class=\"token operator\">=</span> cheerio<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n                ignoreWhitespace<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n                xmlMode<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n                lowerCaseTags<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n                decodeEntities<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'img'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">each</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">'src'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token comment\" spellcheck=\"true\">// For windows style path, we replace '\\' to '/'.</span>\n                        <span class=\"token keyword\">var</span> src <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n                            <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">'src'</span><span class=\"token punctuation\">)</span>\n                            <span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\\\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token regex\">/http[s]*.*|\\/\\/.*/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>\n                            <span class=\"token operator\">!</span><span class=\"token regex\">/^\\s*\\//</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                            <span class=\"token comment\" spellcheck=\"true\">// For \"about\" page, the first part of \"src\" can't be removed.</span>\n                            <span class=\"token comment\" spellcheck=\"true\">// In addition, to support multi-level local directory.</span>\n                            <span class=\"token keyword\">var</span> linkArray <span class=\"token operator\">=</span> link<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span>\n                                <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                                    <span class=\"token keyword\">return</span> elem <span class=\"token operator\">!=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n                                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token keyword\">var</span> srcArray <span class=\"token operator\">=</span> src<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span>\n                                <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                                    <span class=\"token keyword\">return</span> elem <span class=\"token operator\">!=</span> <span class=\"token string\">''</span> <span class=\"token operator\">&amp;&amp;</span> elem <span class=\"token operator\">!=</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">;</span>\n                                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>srcArray<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n                                srcArray<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            src <span class=\"token operator\">=</span> srcArray<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n                                <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">'src'</span><span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">.</span>root <span class=\"token operator\">+</span> link <span class=\"token operator\">+</span> src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            console<span class=\"token punctuation\">.</span>info <span class=\"token operator\">&amp;&amp;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"update link as:-->\"</span> <span class=\"token operator\">+</span> config<span class=\"token punctuation\">.</span>root <span class=\"token operator\">+</span> link <span class=\"token operator\">+</span> src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span>\n                    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                        console<span class=\"token punctuation\">.</span>info <span class=\"token operator\">&amp;&amp;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"no src attr, skipped...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        console<span class=\"token punctuation\">.</span>info <span class=\"token operator\">&amp;&amp;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            data<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> $<span class=\"token punctuation\">.</span><span class=\"token function\">html</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h1 id=\"二、问题推测\"><a href=\"#二、问题推测\" class=\"headerlink\" title=\"二、问题推测\"></a>二、问题推测</h1><h2 id=\"（一）本地图片没有有效上传至github仓库中，导致引用无效\"><a href=\"#（一）本地图片没有有效上传至github仓库中，导致引用无效\" class=\"headerlink\" title=\"（一）本地图片没有有效上传至github仓库中，导致引用无效\"></a>（一）本地图片没有有效上传至github仓库中，导致引用无效</h2><p>解决方案：安装插件（回看前文）</p>\n<h2 id=\"（二）本地图片没有存放在同名文件夹中\"><a href=\"#（二）本地图片没有存放在同名文件夹中\" class=\"headerlink\" title=\"（二）本地图片没有存放在同名文件夹中\"></a>（二）本地图片没有存放在同名文件夹中</h2><p>解决方案：将需要引用的本地图片存放在与文章名相同的文件夹中</p>\n<h2 id=\"（三）图片路径出错\"><a href=\"#（三）图片路径出错\" class=\"headerlink\" title=\"（三）图片路径出错\"></a>（三）图片路径出错</h2><p>这也是我出现的问题。</p>\n<p>打开F12，发现下图问题。</p>\n<p><img src=\"/2020/02/15/HexoReferencesToLocalImagesCannotBeDisplayed/20181115112933605.png\" alt></p>\n<p>因为我在github中关于Hexo的仓库名为850552586.github.io，并不是Ericam.com，所以导致了访问无效。</p>\n<p>【这个问题可能是因为我更换电脑后重新配置Hexo忽略的地方】</p>\n<p>解决方案：打开_config.yml修改下述内容</p>\n<p><img src=\"/2020/02/15/HexoReferencesToLocalImagesCannotBeDisplayed/20181115112941162.png\" alt></p>\n<h2 id=\"（四）相对路径引用的标签插件\"><a href=\"#（四）相对路径引用的标签插件\" class=\"headerlink\" title=\"（四）相对路径引用的标签插件\"></a>（四）相对路径引用的标签插件</h2><p>通过常规的 markdown 语法和相对路径来引用图片和其它资源可能会导致它们在存档页或者主页上显示不正确。在Hexo 2时代，社区创建了很多插件来解决这个问题。但是，随着Hexo 3 的发布，许多新的标签插件被加入到了核心代码中。这使得你可以更简单地在文章中引用你的资源。</p>\n<p>也就是说在存档页和主页不能使用和文章内容中的常规语法来引用图片。</p>\n<p>比如说：当你打开文章资源文件夹功能后，你把一个 example.jpg 图片放在了你的资源文件夹中，如果通过使用相对路径的常规 markdown 语法 <img src=\"/2020/02/15/HexoReferencesToLocalImagesCannotBeDisplayed/example.jpg\" alt> ，它将 不会 出现在首页上。（但是它会在文章中按你期待的方式工作）</p>\n<p>正确的引用图片方式是使用下列的标签插件而不是 markdown ：</p>\n<pre><code>{% asset_img example.jpg This is an example image %}</code></pre><p>浏览地址：Ericam个人博客<br>配置教程：安装配置Gridea</p>\n<p>原创不易，请勿转载。如有问题，可以评论区留言。点赞！</p>\n<h6 id=\"————————————————\"><a href=\"#————————————————\" class=\"headerlink\" title=\"————————————————\"></a>————————————————</h6><p>版权声明：本文为CSDN博主「Ericam_」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href=\"https://blog.csdn.net/xjm850552586/article/details/84101345\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/xjm850552586/article/details/84101345</a></p>\n","site":{"data":{"friends":[{"avatar":"http://q1.qlogo.cn/g?b=qq&nk=2750360683&s=640","name":"核心","introduction":"来自山东的一位普通高中生,喜欢捣鼓2333，爱好编程（新手）","url":"http://www.emtips.net/","title":"Piu~"},{"avatar":"https://i2.hdslb.com/bfs/face/2433a7d4053048811fec9907bcb066e867399da7.jpg","name":"SRO","introduction":"欢迎来到SRO知识库,您在这里可以看到大多数的SRO内部，外部资料","url":"https://sromc.cn/","title":"Piu~"},{"avatar":"http://q1.qlogo.cn/g?b=qq&nk=1692565761&s=640","name":"河南省商务中等职业学校","introduction":"网络搭建竞赛组","url":"https://hnswxx.cn/","title":"Piu~"},{"avatar":"http://q1.qlogo.cn/g?b=qq&nk=2191023046&s=640","name":"贺兰星辰","introduction":"HikariLan's Blog","url":"https://my.minecraft.kim/","title":"Piu~"}]}},"excerpt":"","more":"<p>最近重新开始用起hexo，但是发现在文章中引用本地图片时总是显示不出来。<br>花费了许久时间才解决这个问题。<br>因此将一些解决经验整理出来，希望能帮助到大家。</p>\n<h1 id=\"一、插件安装与配置\"><a href=\"#一、插件安装与配置\" class=\"headerlink\" title=\"一、插件安装与配置\"></a>一、插件安装与配置</h1><h2 id=\"首先我们需要安装一个图片路径转换的插件，这个插件名字是hexo-asset-image\"><a href=\"#首先我们需要安装一个图片路径转换的插件，这个插件名字是hexo-asset-image\" class=\"headerlink\" title=\"首先我们需要安装一个图片路径转换的插件，这个插件名字是hexo-asset-image\"></a>首先我们需要安装一个图片路径转换的插件，这个插件名字是hexo-asset-image</h2><pre><code class=\"bash\">npm install https://github.com/CodeFalling/hexo-asset-image --save</code></pre>\n<p>但是这个插件的内容需要修改【不然可能会出Bug】</p>\n<h2 id=\"打开-node-modules-hexo-asset-image-index-js，将内容更换为下面的代码\"><a href=\"#打开-node-modules-hexo-asset-image-index-js，将内容更换为下面的代码\" class=\"headerlink\" title=\"打开/node_modules/hexo-asset-image/index.js，将内容更换为下面的代码\"></a>打开/node_modules/hexo-asset-image/index.js，将内容更换为下面的代码</h2><pre><code class=\"javascript\">&#39;use strict&#39;;\nvar cheerio = require(&#39;cheerio&#39;);\n\n// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string\nfunction getPosition(str, m, i) {\n    return str.split(m, i)\n        .join(m)\n        .length;\n}\n\nvar version = String(hexo.version)\n    .split(&#39;.&#39;);\nhexo.extend.filter.register(&#39;after_post_render&#39;, function(data) {\n    var config = hexo.config;\n    if (config.post_asset_folder) {\n        var link = data.permalink;\n        if (version.length &gt; 0 &amp;&amp; Number(version[0]) == 3)\n            var beginPos = getPosition(link, &#39;/&#39;, 1) + 1;\n        else\n            var beginPos = getPosition(link, &#39;/&#39;, 3) + 1;\n        // In hexo 3.1.1, the permalink of &quot;about&quot; page is like &quot;.../about/index.html&quot;.\n        var endPos = link.lastIndexOf(&#39;/&#39;) + 1;\n        link = link.substring(beginPos, endPos);\n\n        var toprocess = [&#39;excerpt&#39;, &#39;more&#39;, &#39;content&#39;];\n        for (var i = 0; i &lt; toprocess.length; i++) {\n            var key = toprocess[i];\n\n            var $ = cheerio.load(data[key], {\n                ignoreWhitespace: false,\n                xmlMode: false,\n                lowerCaseTags: false,\n                decodeEntities: false\n            });\n\n            $(&#39;img&#39;)\n                .each(function() {\n                    if ($(this)\n                        .attr(&#39;src&#39;)) {\n                        // For windows style path, we replace &#39;\\&#39; to &#39;/&#39;.\n                        var src = $(this)\n                            .attr(&#39;src&#39;)\n                            .replace(&#39;\\\\&#39;, &#39;/&#39;);\n                        if (!/http[s]*.*|\\/\\/.*/.test(src) &amp;&amp;\n                            !/^\\s*\\//.test(src)) {\n                            // For &quot;about&quot; page, the first part of &quot;src&quot; can&#39;t be removed.\n                            // In addition, to support multi-level local directory.\n                            var linkArray = link.split(&#39;/&#39;)\n                                .filter(function(elem) {\n                                    return elem != &#39;&#39;;\n                                });\n                            var srcArray = src.split(&#39;/&#39;)\n                                .filter(function(elem) {\n                                    return elem != &#39;&#39; &amp;&amp; elem != &#39;.&#39;;\n                                });\n                            if (srcArray.length &gt; 1)\n                                srcArray.shift();\n                            src = srcArray.join(&#39;/&#39;);\n                            $(this)\n                                .attr(&#39;src&#39;, config.root + link + src);\n                            console.info &amp;&amp; console.info(&quot;update link as:--&gt;&quot; + config.root + link + src);\n                        }\n                    } else {\n                        console.info &amp;&amp; console.info(&quot;no src attr, skipped...&quot;);\n                        console.info &amp;&amp; console.info($(this));\n                    }\n                });\n            data[key] = $.html();\n        }\n    }\n});</code></pre>\n<h1 id=\"二、问题推测\"><a href=\"#二、问题推测\" class=\"headerlink\" title=\"二、问题推测\"></a>二、问题推测</h1><h2 id=\"（一）本地图片没有有效上传至github仓库中，导致引用无效\"><a href=\"#（一）本地图片没有有效上传至github仓库中，导致引用无效\" class=\"headerlink\" title=\"（一）本地图片没有有效上传至github仓库中，导致引用无效\"></a>（一）本地图片没有有效上传至github仓库中，导致引用无效</h2><p>解决方案：安装插件（回看前文）</p>\n<h2 id=\"（二）本地图片没有存放在同名文件夹中\"><a href=\"#（二）本地图片没有存放在同名文件夹中\" class=\"headerlink\" title=\"（二）本地图片没有存放在同名文件夹中\"></a>（二）本地图片没有存放在同名文件夹中</h2><p>解决方案：将需要引用的本地图片存放在与文章名相同的文件夹中</p>\n<h2 id=\"（三）图片路径出错\"><a href=\"#（三）图片路径出错\" class=\"headerlink\" title=\"（三）图片路径出错\"></a>（三）图片路径出错</h2><p>这也是我出现的问题。</p>\n<p>打开F12，发现下图问题。</p>\n<p><img src=\"/2020/02/15/HexoReferencesToLocalImagesCannotBeDisplayed/20181115112933605.png\" alt></p>\n<p>因为我在github中关于Hexo的仓库名为850552586.github.io，并不是Ericam.com，所以导致了访问无效。</p>\n<p>【这个问题可能是因为我更换电脑后重新配置Hexo忽略的地方】</p>\n<p>解决方案：打开_config.yml修改下述内容</p>\n<p><img src=\"/2020/02/15/HexoReferencesToLocalImagesCannotBeDisplayed/20181115112941162.png\" alt></p>\n<h2 id=\"（四）相对路径引用的标签插件\"><a href=\"#（四）相对路径引用的标签插件\" class=\"headerlink\" title=\"（四）相对路径引用的标签插件\"></a>（四）相对路径引用的标签插件</h2><p>通过常规的 markdown 语法和相对路径来引用图片和其它资源可能会导致它们在存档页或者主页上显示不正确。在Hexo 2时代，社区创建了很多插件来解决这个问题。但是，随着Hexo 3 的发布，许多新的标签插件被加入到了核心代码中。这使得你可以更简单地在文章中引用你的资源。</p>\n<p>也就是说在存档页和主页不能使用和文章内容中的常规语法来引用图片。</p>\n<p>比如说：当你打开文章资源文件夹功能后，你把一个 example.jpg 图片放在了你的资源文件夹中，如果通过使用相对路径的常规 markdown 语法 <img src=\"/2020/02/15/HexoReferencesToLocalImagesCannotBeDisplayed/example.jpg\" alt> ，它将 不会 出现在首页上。（但是它会在文章中按你期待的方式工作）</p>\n<p>正确的引用图片方式是使用下列的标签插件而不是 markdown ：</p>\n<pre><code>{% asset_img example.jpg This is an example image %}</code></pre><p>浏览地址：Ericam个人博客<br>配置教程：安装配置Gridea</p>\n<p>原创不易，请勿转载。如有问题，可以评论区留言。点赞！</p>\n<h6 id=\"————————————————\"><a href=\"#————————————————\" class=\"headerlink\" title=\"————————————————\"></a>————————————————</h6><p>版权声明：本文为CSDN博主「Ericam_」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href=\"https://blog.csdn.net/xjm850552586/article/details/84101345\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/xjm850552586/article/details/84101345</a></p>\n"},{"title":"hexo博客框架+matery主题搭建以及云服务器部署","typora-root-url":"hexo","_content":"### 阅读须知：\n\n- 系统环境：\n\n  > 本机：win10系统\n  > 虚拟机：CentOS7-64位（新装的）\n  > 云服务器：CentOS7-64位\n  > 注意：以下代码中`#`代表root权限，`$`代表普通用户\n  >\n  > 如果你也跟我一样新装了个虚拟机centos7系统，建议先看看[我的另一篇博客](http://www.nstop.cn/2019/11/25hexo-bo-ke-da-jian/)\n\n### 一、初步搭建hexo环境(注意：我这是在虚拟机中的CentOS7系统上操作)\n\n#### 1、安装git（如果有则无须安装）\n\n先介绍一种简单的方法（直接安装）但这种安装git版本过低\n`yum install -y git`\n–查看git版本\n`git --version`\n\n![img](11-29-08.jpg)\n\n> 这时候你会发现git版本会过低，我这里的是1.8.3.1\n> 下面我将介绍最新版本git安装\n\n1. 先卸载旧版本\n   ```bash\n   $ sudo yum remove -y git\n   ```\n2. 安装git新版本所需的依赖包\n   ```bash\n   $ sudo yum install -y curl-devel expat-devel gettext-devel openssl-devel zlib-devel\n   $ sudo yum install -y gcc perl-ExtUtils-MakeMaker\n   ```\n\n3. 从我的github仓库源中下载最新git安装包并解压到`/usr/local/src`目录下\n   ```bash\n   $ wget https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.19.0.tar.gz\n   $ sudo tar -zxvf git-2.19.0.tar.gz -C /usr/local/src\n   ```\n\n   > 如果你的机器上没有安装wget则先安装\n   > `sudo yum install -y wget`\n   > 这里解释一下 `-y` 这个参数的作用：\n   > 无需用户确认要发生的操作（也就是经常会弹出的yes/no/Enter 直接确认跳过）\n\n4. 编译并安装\n\n   ```bash\n   $ cd /usr/local/src/git-2.19.0/\n   $ sudo make prefix=/usr/local/git all # 编译源码\n   $ sudo make prefix=/usr/local/git install #安装到/usr/local/git\n   ```\n\n5. 修改配置文件（添加环境变量）\n\n   ```bash\n   $ sudo vi /etc/profile\n   #在文件末尾添加export PATH=/usr/local/git/bin:$PATH 保存退出\n   ```\n\n6. 更新修改过后的配置文件\n   ```bash\n   $ source /etc/profile\n   #查看git版本检查一下是否安装成功\n   $ git --version\n   ```\n\n7. 顺便添加你的用户和邮箱\n   ```bash\n   # git config --global user.name \"yourname\"\n   # git config --global user.email \"youremail\"\n   ```\n\n#### 2、安装nodejs\n\n在安装hexo-cli之前需要借助nodejs\n\n1. 去nodejs官网下载Linux二进制64bit压缩包，当然如果你的系统是32位的，即选择32位的，这里我直接用wget命令+ url 直接下载到本系统上\n   ```bash\n   # wget https://nodejs.org/dist/v12.13.1/node-v12.13.1-linux-x64.tar.xz\n   ```\n\n2. 在`/usr/local/`目录下创建一个`nodejs`文件夹\n   ```bash\n   # mkdir /usr/local/nodejs\n   ```\n\n3. 将压缩包解压到`/usr/local/nodejs/`下\n   ```bash\n   # tar -Jxvf node-v12.13.1-linux-x64.tar.xz -C /usr/local/nodejs\n   ```\n\n4. 为nodejs添加环境变量，即将`/usr/local/nodejs/node-v12.13.1-linux-x64/bin`添加到环境变量$PATH中，当然你也可以用创建`软连接`(即windows中的快捷方式)的方式代替，只不过第二种显得有点麻烦\n\n   - 查看一下当前进程的环境变量值\n     ```bash\n     # echo $PATH\n     ```\n\n   - 配置nodejs的环境\n     ```bash\n     # vi /etc/profile\n     ```\n     在文件末尾加上：`export PATH=/usr/local/nodejs/node-v12.13.1-linux-x64/bin:$PATH`保存退出并更新profile文件\n\n     ```bash\n     # source /etc/profile\n     ```\n\n     > 这里提一下为什么要写成PATH=/usr/local/nodejs/node-v12.13.1-linux-x64/bin:$PATH\n     > 而不写成PATH=$PATH:/usr/local/nodejs/node-v12.13.1-linux-x64/bin\n     > 当执行某个命令时，如果找不到会从环境变量中去查找对应的目录下是否有该命令，而查找则是\n     > 按照从左到右的顺序进行查找，所以这就可以避免旧版本在新版本之前而使得新版本不能被应用的情况\n\n   - 再次查看环境变量检查是否添加成功\n\n     ```bash\n     # echo $PATH\n     ```\n\n5. 查看nodejs版本检查是否安装成功\n\n   ```bash\n   # node -v\n   # npm -v\n   ```\n\n#### 3、安装hexo\n\n接下来用`npm`来安装hexo-cli,但是在这不推荐大家使用，由于安装源在国外，下载过于缓慢，所以我们可以用国内的阿里巴巴镜像源进行快速下载安装\n\n1. npm 安装方式\n   ```bash\n   # npm install -g hexo-cli\n   ```\n\n2. cnpm 安装方式\n\n   ```bash\n   # npm install -g cnpm --registry=https://registry.npm.taobao.org\n   # cnpm install -g hexo-cli\n   ```\n\n3. 查看hexo版本检查是否已安装好\n\n   ```bash\n   # hexo -v\n   ```\n\n#### 4、用hexo生成博客框架\n\n1. 随便创建一个文件夹，这个文件夹用来存放hexo框架所有文件的（换而言之这个文件夹就是你的博客根目录），然后初始化该文件\n\n   ```bash\n   # mkdir myblog\n   #这里改一下myblog的所有者和所有组(jake为你自己的用户名)\n   # chown jake:jake -R myblog\n   # cd myblog\n   # hexo init\n   ```\n\n2. 用hexo -s 命令启动该博客，接着用浏览器输入localhost:4000 访问，检查是否成功\n   ```bash\n   # hexo s\n   ```\n\n   - 默认端口4000，你也可以自定义指定端口为5000\n     ```bash\n     # hexo s -p 5000\n     ```\n\n3. 另外介绍一个命令（后面要用到），用`hexo g`命令生成部署该博客（实质会生成一个public文件夹，这个文件夹下都是html静态页面）\n   ```bash\n   # hexo g\n   ```\n\n#### 5、win10系统访问虚拟机端口\n\n由于我所有hexo部署都在虚拟机系统上，怎么通过win10主机访问我的博客页面呢\n\n1. 开放虚拟机CentOS系统的4000端口\n   ```bash\n   # firewall-cmd --zone=public --add-port=4000/tcp --permanent\n   ```\n\n2. 重启防火墙\n   ```bash\n   # systemctl restart firewalld.service\n   ```\n\n3. 接下来你就可以通过win10上的浏览器输入虚拟机ip:4000访问你的博客了，当你看到如下图所示，那么恭喜你成功完成了第一步！\n\n   ![img](11-29-09.jpg)\n\n### 二、在第一步的基础上换一个华丽的主题（也就是matery），再用GitHub作为服务器来被外界访问\n\n#### 1、下载matery主题\n\n从github上下载一个matery主题(当前目录下)，然后把这个文件移动到`myblog/themes/`下\n\n```bash\n# git clone https://github.com/blinkfoxhexo-theme-matery.git\n#/home/jake/myblog是我的博客根目录，需要根据自身情况予以修改\n# mv hexo-theme-matery /home/jake/blog/themes/\n```\n\n#### 2、修改配置文件_config.yml\n\n![img](11-29-10.jpg)\n\n#### 3、切换到myblog文件下重新启动\n\n```bash\n# hexo s\n```\n\n![img](11-29-11.jpg)\n\n\n#### 4、部署GitHub\n\n接下来就部署GitHub了，前提你得有个GitHub账号，没有的话去注册一个（这里不提供教程，自己百度）\n\n1. 登录你的GitHub，创建一个仓库\n\n   ![img](11-29-12.jpg)\n\n2. 按照规则为你的仓库起名（这个名字就是别人可以访问你博客的网址）\n   ![img](11-29-13.jpg)\n   ![img](11-29-14.jpg)\n\n3. 打开`_config.yml`配置文件，配置你的仓库\n   ```bash\n   # vi _config.yml\n   ```\n   ![img](11-29-15.jpg)\n\n4. 因为需要将项目推送到GitHub，所以需要安装一个插件\n   ```bash\n   # cnpm install --save hexo-deployer-git\n   ```\n\n5. 装好后直接用hexo g 生成博客文件，再用hexo d 推送项目到github上\n   ```bash\n   # hexo g\n   # hexo d\n   ```\n   ![img](11-29-16.jpg)\n\n6. 换用ssh公钥\n   你会发现每次执行hexo d 推送到github上时需要输入账号和密码，这有点令人不耐烦，因此下面给大家展示一种用ssh公钥的方法去部署github\n\n   - 在虚拟机CentOS系统上下载ssh key\n     ```bash\n     # ssh-keygen -t rsa\n     #一路回车即可，然后查看/root下的文件夹\n     # ls -al /root\n     ```\n\n   - 这时候你会发现在root下有一个隐藏文件.ssh，打开.ssh下的\n     ```\n     id_rsa.pub\n     ```\n     文件，复制此文件的全部内容,粘贴到下图所示位置\n\n     打开github\n\n     ![img](11-29-17.jpg)\n\n     ![img](11-29-18.jpg)\n\n     ![img](11-29-19.jpg)\n\n   - 相应的也要修改\n     ```\n     _config.yml\n     ```\n     配置文件\n     ![img](11-29-22.jpg)\n     ![img](11-29-21.jpg)\n     ![img](11-29-20.jpg)\n\n#### 5、收获成功的喜悦\n\n当你看到这里恭喜你已经成功完成了第一份属于自己的博客了!但你会发现，你通过github访问你的博客会很卡，简单说一下原因。github服务器在国外，所以访问速度很慢，这里提供一个简单的解决办法\n\n1. 可以用国内的coding，类似github，去coding官网注册一个账号，记得要实名认证，然后仿照github的操作将ssh key内容粘贴到指定区域\n   ![img](11-29-24.jpg)\n   ![img](11-29-25.jpg)\n\n2. 同样修改\n   ```\n   _config.yml\n   ```\n\n   配置文件\n   ![img](11-29-23.jpg)\n\n3. 用`hexo clean`清理一下 ==> `hexo g`生成 ==> `hexo d`部署推送博客\n\n4. 接下来登录coding账号，查看仓库是存在项目，确定之后开始创建静态网站，步骤如下图所示\n   ![img](11-29-26.jpg)\n   ![img](11-29-27.jpg)\n   ![img](11-29-28.jpg)\n\n#### 6、温馨提示\n\n最后温馨提示一下，matery主题虽然应用到hexo框架上了，但仍需要改动一些配置文件，根据每个人不同的喜好可以制定自己独特的博客，至于个性化设置这里就不介绍了，需要的小伙伴可以去参考以下链接，看看大佬们是如何设计优化matery主题和hexo博客框架的。\n\n- 参考链接:\n  [洪卫の博客:Hexo+Github博客搭建完全教程](https://sunhwee.com/posts/6e8839eb.html)\n  [韦阳的博客:超详细Hexo+Github博客搭建小白教程](https://godweiyang.com/2018/04/13hexo-blog/)\n\n> 如果实在不懂的小伙伴可以在下方留言，也可以参考一下这个大佬的视频[hexo博客搭建](https://www.bilibili.com/video/av44544186/)\n\n### 三、将第二步中的github和coding替换为自己的云服务器，下面介绍如何部署好云服务器\n\n#### 1. 创建git用户\n\n当你做完前面两大步，这一步就相当的简单，原理都一样，首先在你的云服务机上，创建一个git用户,并指定密码\n\n```bash\n# useradd git\n# passwd git\n```\n\n#### 2. 部署密钥到服务器上\n\n切换到git用户，创建`.ssh`文件夹，以及在`.ssh`下创建`authorized_keys`文件,将ssh_key（也就是第二大步里面的那个密钥内容）粘贴到`authorized_keys`文件中\n\n```bash\n# su git\n# 切换到git用户的家目录\n# cd ~  \n$ mkdir .ssh\n$ vim ~/.ssh/autorized_keys # wq保存退出\n# 修改一下.ssh 和 authorized_key 的权限，保证不被其他用户或用户组访问以及修改\n$ chmod 600 ~/.ssh/authorized_key\n$ chmod 700 ~/.ssh \n```\n\n> 没有安装vim的 安装一下： `yum install -y vim`\n\n#### 3. 安装nginx\n\n```bash\n# yum install -y nginx\n# systemctl start nginx.service # 启动nginx服务\n```\n\n当你通过外网访问你的服务器ip可以看到nginx的欢迎页面就说明你安装成功了。这里说一下，有可能你显示的时centos欢迎页面，这也没问题。（我的就是）\n打开`/etc/nginx/nginx.conf`配置文件（如果找不到，你也可以用`nginx -t`查看配置文件在哪）\n\n![img](11-29-29.jpg)\n\n接下来创建你的博客根目录(我创建的根目录是`/home/git/blog`)\n\n```bash\n$ mkdir ~/blog\n```\n\n修改nginx配置文件如下（注意以下两个地方）\n第一个是权限问题\n![img](11-29-31.jpg)\n第二个是访问路径\n![img](11-29-30.jpg)\n配置好就重启一下nginx\n```bash\n# systemctl restart nginx.service\n```\n\n#### 4.创建git仓库\n\n创建git仓库以及用hooks钩子同步到你的博客根目录\n```bash\n$ cd ~\n$ git init --bare blog.git\n$ ls -l blog.git\n# 修改一下权限\n# chown git:git -R blog.git\n# 创建post-receive文件\n$ vim blog.git/hooks/post-receive\n```\n\n添加以下内容：\n\n> \\#!/bin/sh\n> git –work-tree=/home/git/blog –git-dir=/home/git/blog.git checkout -f\n> `/home/git/blog`这是你刚刚创建的博客根目录\n> 赋予其执行权限\n\n```bash\n$ chmod +x /home/git/blog.git/hooks/post-receive\n```\n\n接下来创建git-receive-pack和git-upload-pack软连接,以防执行hexo d 命令时报错找不到\n```bash\n# sudo ln -s /usr/local/git/bin/git-receive-pack  /usr/bin/git-recei\n# sudo ln -s /usr/local/git/bin/git-upload-pack  /usr/bin/git-upload-pack\n```\n\n#### 5.修改配置文件\n\n到本地的虚拟机系统上修改博客`_config.yml`配置文件\n添加 `git@yourserver_ip:/home/git/blog.git`git服务器地址\n\n![img](11-29-32.jpg)\n\n\n> 特别注意：\n> 如果你之前跟我一样配置三个git服务器（github、coding、自己的云服务器）,那么你就要删除一下本地系统中的`.ssh`文件中的`known_hosts`\n> 只要你更改了`_config.yml`文件中git服务器地址，最好删除一下`known_hosts`\n> 执行`hexo clean && hexo g && hexo d`\n\n### 四、总结一下可能会碰到的错误\n\n1. 经常会发生的错误：权限问题引起的。（这是个家常便饭，但你清楚了权限的重要性，那么你以后在linux系统上配置安装一些程序就很容易了）\n   有时候你在安装依赖文件或者执行某些命令如`hexo d hexo clean hexo g`等等会报错，那是因为你使用的当前用户权限不够。包括你在向git服务器推送项目时，你的服务器那边git用户权限不足而导致操作不了某些文件。\n\n   所以建议你把博客根目录下所有文件的使用者更改为你当前用户。当然你也可以用root用户去操作，但是经常切换用户很麻烦，或者使用sudo借用root权限也要输入密码。\n   如：假设你的博客根目录路径为`/home/jake/myblog`\n   那么使用以下命令更改权限\n   ```bash\n   $ sudo chown jake:jake -R /home/jake/myblog/*\n   ```\n\n2. 访问网页出现404错误，这种很好解决，一是你的nginx路径配错了，二是访问端口未开放，ip配置不对。\n\n3. `hexo d`推送项目到git服务器时验证失败，首先确保你把本地的ssh_key密钥内容复制到了你的git服务器上了，然后删除你本地的`.ssh`文件夹下的`known_hosts`文件，重新`hexo d`,还有一种可能，你没有装推送必要的依赖插件`hexo-deployer-git`\n\n### 五、讨论以及心得\n\n有人可能会问我为什么不直接用windows作为本地进行操作，而要大费周章地去搞个虚拟机系统操作。\n\n或许你会觉得Windows上操作会更容易，当然有些小伙伴可能想用windows搭建hexo博客，这里我就不介绍了。\n\n其实用windows去搭建hexo博客的话我个人感觉有些别扭，因为你在windows操作的话在安装完git之后也是用git bash来部署安装hexo博客的，等价于用git bash 来营造一个Linux系统终端；\n\n显得有点多此一举，况且多用用Linux系统对某些小伙伴以后的学习是有帮助的。\n\n比如：虚拟机系统如何查看端口状态以及端口的开放和关闭，如何开启和关闭防火墙、虚拟机网速问题、git服务器的安装和使用、github、coding版本项目管理工具的使用、初步认识nginx负载均衡等等，这些都是我在搭建hexo中需要了解的知识。另外最重要的是我又对Linux系统有了进一步的了解\n\n### 六、参考链接\n\n1. [洪卫の博客:Hexo+Github博客搭建完全教程](https://sunhwee.com/posts/6e8839eb.html)\n2. [韦阳的博客:超详细Hexo+Github博客搭建小白教程](https://godweiyang.com/2018/04/13hexo-blog/)\n3. [Hexo 博客部署到腾讯云服务器全流程](https://blog.csdn.net/StaunchKai/article/details/82878928)\n4. [centos7开放、关闭及查看端口](https://blog.csdn.net/qq_34996727/article/details/81065961)\n5. [廖雪峰的Git教程](https://www.liaoxuefeng.com/wiki/896043488029600)\n\n[文章来源](http://www.nstop.cn/)","source":"_posts/hexo.md","raw":"---\ntitle: hexo博客框架+matery主题搭建以及云服务器部署\n\ncategories:\n- Linux\ntags:\n- Hexo\n- Linux\n- 转载\ntypora-root-url: hexo\n---\n### 阅读须知：\n\n- 系统环境：\n\n  > 本机：win10系统\n  > 虚拟机：CentOS7-64位（新装的）\n  > 云服务器：CentOS7-64位\n  > 注意：以下代码中`#`代表root权限，`$`代表普通用户\n  >\n  > 如果你也跟我一样新装了个虚拟机centos7系统，建议先看看[我的另一篇博客](http://www.nstop.cn/2019/11/25hexo-bo-ke-da-jian/)\n\n### 一、初步搭建hexo环境(注意：我这是在虚拟机中的CentOS7系统上操作)\n\n#### 1、安装git（如果有则无须安装）\n\n先介绍一种简单的方法（直接安装）但这种安装git版本过低\n`yum install -y git`\n–查看git版本\n`git --version`\n\n![img](11-29-08.jpg)\n\n> 这时候你会发现git版本会过低，我这里的是1.8.3.1\n> 下面我将介绍最新版本git安装\n\n1. 先卸载旧版本\n   ```bash\n   $ sudo yum remove -y git\n   ```\n2. 安装git新版本所需的依赖包\n   ```bash\n   $ sudo yum install -y curl-devel expat-devel gettext-devel openssl-devel zlib-devel\n   $ sudo yum install -y gcc perl-ExtUtils-MakeMaker\n   ```\n\n3. 从我的github仓库源中下载最新git安装包并解压到`/usr/local/src`目录下\n   ```bash\n   $ wget https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.19.0.tar.gz\n   $ sudo tar -zxvf git-2.19.0.tar.gz -C /usr/local/src\n   ```\n\n   > 如果你的机器上没有安装wget则先安装\n   > `sudo yum install -y wget`\n   > 这里解释一下 `-y` 这个参数的作用：\n   > 无需用户确认要发生的操作（也就是经常会弹出的yes/no/Enter 直接确认跳过）\n\n4. 编译并安装\n\n   ```bash\n   $ cd /usr/local/src/git-2.19.0/\n   $ sudo make prefix=/usr/local/git all # 编译源码\n   $ sudo make prefix=/usr/local/git install #安装到/usr/local/git\n   ```\n\n5. 修改配置文件（添加环境变量）\n\n   ```bash\n   $ sudo vi /etc/profile\n   #在文件末尾添加export PATH=/usr/local/git/bin:$PATH 保存退出\n   ```\n\n6. 更新修改过后的配置文件\n   ```bash\n   $ source /etc/profile\n   #查看git版本检查一下是否安装成功\n   $ git --version\n   ```\n\n7. 顺便添加你的用户和邮箱\n   ```bash\n   # git config --global user.name \"yourname\"\n   # git config --global user.email \"youremail\"\n   ```\n\n#### 2、安装nodejs\n\n在安装hexo-cli之前需要借助nodejs\n\n1. 去nodejs官网下载Linux二进制64bit压缩包，当然如果你的系统是32位的，即选择32位的，这里我直接用wget命令+ url 直接下载到本系统上\n   ```bash\n   # wget https://nodejs.org/dist/v12.13.1/node-v12.13.1-linux-x64.tar.xz\n   ```\n\n2. 在`/usr/local/`目录下创建一个`nodejs`文件夹\n   ```bash\n   # mkdir /usr/local/nodejs\n   ```\n\n3. 将压缩包解压到`/usr/local/nodejs/`下\n   ```bash\n   # tar -Jxvf node-v12.13.1-linux-x64.tar.xz -C /usr/local/nodejs\n   ```\n\n4. 为nodejs添加环境变量，即将`/usr/local/nodejs/node-v12.13.1-linux-x64/bin`添加到环境变量$PATH中，当然你也可以用创建`软连接`(即windows中的快捷方式)的方式代替，只不过第二种显得有点麻烦\n\n   - 查看一下当前进程的环境变量值\n     ```bash\n     # echo $PATH\n     ```\n\n   - 配置nodejs的环境\n     ```bash\n     # vi /etc/profile\n     ```\n     在文件末尾加上：`export PATH=/usr/local/nodejs/node-v12.13.1-linux-x64/bin:$PATH`保存退出并更新profile文件\n\n     ```bash\n     # source /etc/profile\n     ```\n\n     > 这里提一下为什么要写成PATH=/usr/local/nodejs/node-v12.13.1-linux-x64/bin:$PATH\n     > 而不写成PATH=$PATH:/usr/local/nodejs/node-v12.13.1-linux-x64/bin\n     > 当执行某个命令时，如果找不到会从环境变量中去查找对应的目录下是否有该命令，而查找则是\n     > 按照从左到右的顺序进行查找，所以这就可以避免旧版本在新版本之前而使得新版本不能被应用的情况\n\n   - 再次查看环境变量检查是否添加成功\n\n     ```bash\n     # echo $PATH\n     ```\n\n5. 查看nodejs版本检查是否安装成功\n\n   ```bash\n   # node -v\n   # npm -v\n   ```\n\n#### 3、安装hexo\n\n接下来用`npm`来安装hexo-cli,但是在这不推荐大家使用，由于安装源在国外，下载过于缓慢，所以我们可以用国内的阿里巴巴镜像源进行快速下载安装\n\n1. npm 安装方式\n   ```bash\n   # npm install -g hexo-cli\n   ```\n\n2. cnpm 安装方式\n\n   ```bash\n   # npm install -g cnpm --registry=https://registry.npm.taobao.org\n   # cnpm install -g hexo-cli\n   ```\n\n3. 查看hexo版本检查是否已安装好\n\n   ```bash\n   # hexo -v\n   ```\n\n#### 4、用hexo生成博客框架\n\n1. 随便创建一个文件夹，这个文件夹用来存放hexo框架所有文件的（换而言之这个文件夹就是你的博客根目录），然后初始化该文件\n\n   ```bash\n   # mkdir myblog\n   #这里改一下myblog的所有者和所有组(jake为你自己的用户名)\n   # chown jake:jake -R myblog\n   # cd myblog\n   # hexo init\n   ```\n\n2. 用hexo -s 命令启动该博客，接着用浏览器输入localhost:4000 访问，检查是否成功\n   ```bash\n   # hexo s\n   ```\n\n   - 默认端口4000，你也可以自定义指定端口为5000\n     ```bash\n     # hexo s -p 5000\n     ```\n\n3. 另外介绍一个命令（后面要用到），用`hexo g`命令生成部署该博客（实质会生成一个public文件夹，这个文件夹下都是html静态页面）\n   ```bash\n   # hexo g\n   ```\n\n#### 5、win10系统访问虚拟机端口\n\n由于我所有hexo部署都在虚拟机系统上，怎么通过win10主机访问我的博客页面呢\n\n1. 开放虚拟机CentOS系统的4000端口\n   ```bash\n   # firewall-cmd --zone=public --add-port=4000/tcp --permanent\n   ```\n\n2. 重启防火墙\n   ```bash\n   # systemctl restart firewalld.service\n   ```\n\n3. 接下来你就可以通过win10上的浏览器输入虚拟机ip:4000访问你的博客了，当你看到如下图所示，那么恭喜你成功完成了第一步！\n\n   ![img](11-29-09.jpg)\n\n### 二、在第一步的基础上换一个华丽的主题（也就是matery），再用GitHub作为服务器来被外界访问\n\n#### 1、下载matery主题\n\n从github上下载一个matery主题(当前目录下)，然后把这个文件移动到`myblog/themes/`下\n\n```bash\n# git clone https://github.com/blinkfoxhexo-theme-matery.git\n#/home/jake/myblog是我的博客根目录，需要根据自身情况予以修改\n# mv hexo-theme-matery /home/jake/blog/themes/\n```\n\n#### 2、修改配置文件_config.yml\n\n![img](11-29-10.jpg)\n\n#### 3、切换到myblog文件下重新启动\n\n```bash\n# hexo s\n```\n\n![img](11-29-11.jpg)\n\n\n#### 4、部署GitHub\n\n接下来就部署GitHub了，前提你得有个GitHub账号，没有的话去注册一个（这里不提供教程，自己百度）\n\n1. 登录你的GitHub，创建一个仓库\n\n   ![img](11-29-12.jpg)\n\n2. 按照规则为你的仓库起名（这个名字就是别人可以访问你博客的网址）\n   ![img](11-29-13.jpg)\n   ![img](11-29-14.jpg)\n\n3. 打开`_config.yml`配置文件，配置你的仓库\n   ```bash\n   # vi _config.yml\n   ```\n   ![img](11-29-15.jpg)\n\n4. 因为需要将项目推送到GitHub，所以需要安装一个插件\n   ```bash\n   # cnpm install --save hexo-deployer-git\n   ```\n\n5. 装好后直接用hexo g 生成博客文件，再用hexo d 推送项目到github上\n   ```bash\n   # hexo g\n   # hexo d\n   ```\n   ![img](11-29-16.jpg)\n\n6. 换用ssh公钥\n   你会发现每次执行hexo d 推送到github上时需要输入账号和密码，这有点令人不耐烦，因此下面给大家展示一种用ssh公钥的方法去部署github\n\n   - 在虚拟机CentOS系统上下载ssh key\n     ```bash\n     # ssh-keygen -t rsa\n     #一路回车即可，然后查看/root下的文件夹\n     # ls -al /root\n     ```\n\n   - 这时候你会发现在root下有一个隐藏文件.ssh，打开.ssh下的\n     ```\n     id_rsa.pub\n     ```\n     文件，复制此文件的全部内容,粘贴到下图所示位置\n\n     打开github\n\n     ![img](11-29-17.jpg)\n\n     ![img](11-29-18.jpg)\n\n     ![img](11-29-19.jpg)\n\n   - 相应的也要修改\n     ```\n     _config.yml\n     ```\n     配置文件\n     ![img](11-29-22.jpg)\n     ![img](11-29-21.jpg)\n     ![img](11-29-20.jpg)\n\n#### 5、收获成功的喜悦\n\n当你看到这里恭喜你已经成功完成了第一份属于自己的博客了!但你会发现，你通过github访问你的博客会很卡，简单说一下原因。github服务器在国外，所以访问速度很慢，这里提供一个简单的解决办法\n\n1. 可以用国内的coding，类似github，去coding官网注册一个账号，记得要实名认证，然后仿照github的操作将ssh key内容粘贴到指定区域\n   ![img](11-29-24.jpg)\n   ![img](11-29-25.jpg)\n\n2. 同样修改\n   ```\n   _config.yml\n   ```\n\n   配置文件\n   ![img](11-29-23.jpg)\n\n3. 用`hexo clean`清理一下 ==> `hexo g`生成 ==> `hexo d`部署推送博客\n\n4. 接下来登录coding账号，查看仓库是存在项目，确定之后开始创建静态网站，步骤如下图所示\n   ![img](11-29-26.jpg)\n   ![img](11-29-27.jpg)\n   ![img](11-29-28.jpg)\n\n#### 6、温馨提示\n\n最后温馨提示一下，matery主题虽然应用到hexo框架上了，但仍需要改动一些配置文件，根据每个人不同的喜好可以制定自己独特的博客，至于个性化设置这里就不介绍了，需要的小伙伴可以去参考以下链接，看看大佬们是如何设计优化matery主题和hexo博客框架的。\n\n- 参考链接:\n  [洪卫の博客:Hexo+Github博客搭建完全教程](https://sunhwee.com/posts/6e8839eb.html)\n  [韦阳的博客:超详细Hexo+Github博客搭建小白教程](https://godweiyang.com/2018/04/13hexo-blog/)\n\n> 如果实在不懂的小伙伴可以在下方留言，也可以参考一下这个大佬的视频[hexo博客搭建](https://www.bilibili.com/video/av44544186/)\n\n### 三、将第二步中的github和coding替换为自己的云服务器，下面介绍如何部署好云服务器\n\n#### 1. 创建git用户\n\n当你做完前面两大步，这一步就相当的简单，原理都一样，首先在你的云服务机上，创建一个git用户,并指定密码\n\n```bash\n# useradd git\n# passwd git\n```\n\n#### 2. 部署密钥到服务器上\n\n切换到git用户，创建`.ssh`文件夹，以及在`.ssh`下创建`authorized_keys`文件,将ssh_key（也就是第二大步里面的那个密钥内容）粘贴到`authorized_keys`文件中\n\n```bash\n# su git\n# 切换到git用户的家目录\n# cd ~  \n$ mkdir .ssh\n$ vim ~/.ssh/autorized_keys # wq保存退出\n# 修改一下.ssh 和 authorized_key 的权限，保证不被其他用户或用户组访问以及修改\n$ chmod 600 ~/.ssh/authorized_key\n$ chmod 700 ~/.ssh \n```\n\n> 没有安装vim的 安装一下： `yum install -y vim`\n\n#### 3. 安装nginx\n\n```bash\n# yum install -y nginx\n# systemctl start nginx.service # 启动nginx服务\n```\n\n当你通过外网访问你的服务器ip可以看到nginx的欢迎页面就说明你安装成功了。这里说一下，有可能你显示的时centos欢迎页面，这也没问题。（我的就是）\n打开`/etc/nginx/nginx.conf`配置文件（如果找不到，你也可以用`nginx -t`查看配置文件在哪）\n\n![img](11-29-29.jpg)\n\n接下来创建你的博客根目录(我创建的根目录是`/home/git/blog`)\n\n```bash\n$ mkdir ~/blog\n```\n\n修改nginx配置文件如下（注意以下两个地方）\n第一个是权限问题\n![img](11-29-31.jpg)\n第二个是访问路径\n![img](11-29-30.jpg)\n配置好就重启一下nginx\n```bash\n# systemctl restart nginx.service\n```\n\n#### 4.创建git仓库\n\n创建git仓库以及用hooks钩子同步到你的博客根目录\n```bash\n$ cd ~\n$ git init --bare blog.git\n$ ls -l blog.git\n# 修改一下权限\n# chown git:git -R blog.git\n# 创建post-receive文件\n$ vim blog.git/hooks/post-receive\n```\n\n添加以下内容：\n\n> \\#!/bin/sh\n> git –work-tree=/home/git/blog –git-dir=/home/git/blog.git checkout -f\n> `/home/git/blog`这是你刚刚创建的博客根目录\n> 赋予其执行权限\n\n```bash\n$ chmod +x /home/git/blog.git/hooks/post-receive\n```\n\n接下来创建git-receive-pack和git-upload-pack软连接,以防执行hexo d 命令时报错找不到\n```bash\n# sudo ln -s /usr/local/git/bin/git-receive-pack  /usr/bin/git-recei\n# sudo ln -s /usr/local/git/bin/git-upload-pack  /usr/bin/git-upload-pack\n```\n\n#### 5.修改配置文件\n\n到本地的虚拟机系统上修改博客`_config.yml`配置文件\n添加 `git@yourserver_ip:/home/git/blog.git`git服务器地址\n\n![img](11-29-32.jpg)\n\n\n> 特别注意：\n> 如果你之前跟我一样配置三个git服务器（github、coding、自己的云服务器）,那么你就要删除一下本地系统中的`.ssh`文件中的`known_hosts`\n> 只要你更改了`_config.yml`文件中git服务器地址，最好删除一下`known_hosts`\n> 执行`hexo clean && hexo g && hexo d`\n\n### 四、总结一下可能会碰到的错误\n\n1. 经常会发生的错误：权限问题引起的。（这是个家常便饭，但你清楚了权限的重要性，那么你以后在linux系统上配置安装一些程序就很容易了）\n   有时候你在安装依赖文件或者执行某些命令如`hexo d hexo clean hexo g`等等会报错，那是因为你使用的当前用户权限不够。包括你在向git服务器推送项目时，你的服务器那边git用户权限不足而导致操作不了某些文件。\n\n   所以建议你把博客根目录下所有文件的使用者更改为你当前用户。当然你也可以用root用户去操作，但是经常切换用户很麻烦，或者使用sudo借用root权限也要输入密码。\n   如：假设你的博客根目录路径为`/home/jake/myblog`\n   那么使用以下命令更改权限\n   ```bash\n   $ sudo chown jake:jake -R /home/jake/myblog/*\n   ```\n\n2. 访问网页出现404错误，这种很好解决，一是你的nginx路径配错了，二是访问端口未开放，ip配置不对。\n\n3. `hexo d`推送项目到git服务器时验证失败，首先确保你把本地的ssh_key密钥内容复制到了你的git服务器上了，然后删除你本地的`.ssh`文件夹下的`known_hosts`文件，重新`hexo d`,还有一种可能，你没有装推送必要的依赖插件`hexo-deployer-git`\n\n### 五、讨论以及心得\n\n有人可能会问我为什么不直接用windows作为本地进行操作，而要大费周章地去搞个虚拟机系统操作。\n\n或许你会觉得Windows上操作会更容易，当然有些小伙伴可能想用windows搭建hexo博客，这里我就不介绍了。\n\n其实用windows去搭建hexo博客的话我个人感觉有些别扭，因为你在windows操作的话在安装完git之后也是用git bash来部署安装hexo博客的，等价于用git bash 来营造一个Linux系统终端；\n\n显得有点多此一举，况且多用用Linux系统对某些小伙伴以后的学习是有帮助的。\n\n比如：虚拟机系统如何查看端口状态以及端口的开放和关闭，如何开启和关闭防火墙、虚拟机网速问题、git服务器的安装和使用、github、coding版本项目管理工具的使用、初步认识nginx负载均衡等等，这些都是我在搭建hexo中需要了解的知识。另外最重要的是我又对Linux系统有了进一步的了解\n\n### 六、参考链接\n\n1. [洪卫の博客:Hexo+Github博客搭建完全教程](https://sunhwee.com/posts/6e8839eb.html)\n2. [韦阳的博客:超详细Hexo+Github博客搭建小白教程](https://godweiyang.com/2018/04/13hexo-blog/)\n3. [Hexo 博客部署到腾讯云服务器全流程](https://blog.csdn.net/StaunchKai/article/details/82878928)\n4. [centos7开放、关闭及查看端口](https://blog.csdn.net/qq_34996727/article/details/81065961)\n5. [廖雪峰的Git教程](https://www.liaoxuefeng.com/wiki/896043488029600)\n\n[文章来源](http://www.nstop.cn/)","slug":"hexo","published":1,"date":"2021-11-24T11:00:32.119Z","updated":"2021-11-25T04:53:01.899Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckweswgic000ee8vh7g1u2ou6","content":"<h3 id=\"阅读须知：\"><a href=\"#阅读须知：\" class=\"headerlink\" title=\"阅读须知：\"></a>阅读须知：</h3><ul>\n<li><p>系统环境：</p>\n<blockquote>\n<p>本机：win10系统<br>虚拟机：CentOS7-64位（新装的）<br>云服务器：CentOS7-64位<br>注意：以下代码中<code>#</code>代表root权限，<code>$</code>代表普通用户</p>\n<p>如果你也跟我一样新装了个虚拟机centos7系统，建议先看看<a href=\"http://www.nstop.cn/2019/11/25hexo-bo-ke-da-jian/\" target=\"_blank\" rel=\"noopener\">我的另一篇博客</a></p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"一、初步搭建hexo环境-注意：我这是在虚拟机中的CentOS7系统上操作\"><a href=\"#一、初步搭建hexo环境-注意：我这是在虚拟机中的CentOS7系统上操作\" class=\"headerlink\" title=\"一、初步搭建hexo环境(注意：我这是在虚拟机中的CentOS7系统上操作)\"></a>一、初步搭建hexo环境(注意：我这是在虚拟机中的CentOS7系统上操作)</h3><h4 id=\"1、安装git（如果有则无须安装）\"><a href=\"#1、安装git（如果有则无须安装）\" class=\"headerlink\" title=\"1、安装git（如果有则无须安装）\"></a>1、安装git（如果有则无须安装）</h4><p>先介绍一种简单的方法（直接安装）但这种安装git版本过低<br><code>yum install -y git</code><br>–查看git版本<br><code>git --version</code></p>\n<p><img src=\"/2021/11/24/hexo/11-29-08.jpg\" alt=\"img\"></p>\n<blockquote>\n<p>这时候你会发现git版本会过低，我这里的是1.8.3.1<br>下面我将介绍最新版本git安装</p>\n</blockquote>\n<ol>\n<li><p>先卸载旧版本</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">sudo</span> yum remove -y <span class=\"token function\">git</span></code></pre>\n</li>\n<li><p>安装git新版本所需的依赖包</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> -y curl-devel expat-devel gettext-devel openssl-devel zlib-devel\n$ <span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> -y gcc perl-ExtUtils-MakeMaker</code></pre>\n</li>\n<li><p>从我的github仓库源中下载最新git安装包并解压到<code>/usr/local/src</code>目录下</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">wget</span> https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.19.0.tar.gz\n$ <span class=\"token function\">sudo</span> <span class=\"token function\">tar</span> -zxvf git-2.19.0.tar.gz -C /usr/local/src</code></pre>\n<blockquote>\n<p>如果你的机器上没有安装wget则先安装<br><code>sudo yum install -y wget</code><br>这里解释一下 <code>-y</code> 这个参数的作用：<br>无需用户确认要发生的操作（也就是经常会弹出的yes/no/Enter 直接确认跳过）</p>\n</blockquote>\n</li>\n<li><p>编译并安装</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">cd</span> /usr/local/src/git-2.19.0/\n$ <span class=\"token function\">sudo</span> <span class=\"token function\">make</span> prefix<span class=\"token operator\">=</span>/usr/local/git all <span class=\"token comment\" spellcheck=\"true\"># 编译源码</span>\n$ <span class=\"token function\">sudo</span> <span class=\"token function\">make</span> prefix<span class=\"token operator\">=</span>/usr/local/git <span class=\"token function\">install</span> <span class=\"token comment\" spellcheck=\"true\">#安装到/usr/local/git</span></code></pre>\n</li>\n<li><p>修改配置文件（添加环境变量）</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">sudo</span> <span class=\"token function\">vi</span> /etc/profile\n<span class=\"token comment\" spellcheck=\"true\">#在文件末尾添加export PATH=/usr/local/git/bin:$PATH 保存退出</span></code></pre>\n</li>\n<li><p>更新修改过后的配置文件</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">source</span> /etc/profile\n<span class=\"token comment\" spellcheck=\"true\">#查看git版本检查一下是否安装成功</span>\n$ <span class=\"token function\">git</span> --version</code></pre>\n</li>\n<li><p>顺便添加你的用户和邮箱</p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token comment\" spellcheck=\"true\"># git config --global user.name \"yourname\"</span>\n<span class=\"token comment\" spellcheck=\"true\"># git config --global user.email \"youremail\"</span></code></pre>\n</li>\n</ol>\n<h4 id=\"2、安装nodejs\"><a href=\"#2、安装nodejs\" class=\"headerlink\" title=\"2、安装nodejs\"></a>2、安装nodejs</h4><p>在安装hexo-cli之前需要借助nodejs</p>\n<ol>\n<li><p>去nodejs官网下载Linux二进制64bit压缩包，当然如果你的系统是32位的，即选择32位的，这里我直接用wget命令+ url 直接下载到本系统上</p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token comment\" spellcheck=\"true\"># wget https://nodejs.org/dist/v12.13.1/node-v12.13.1-linux-x64.tar.xz</span></code></pre>\n</li>\n<li><p>在<code>/usr/local/</code>目录下创建一个<code>nodejs</code>文件夹</p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token comment\" spellcheck=\"true\"># mkdir /usr/local/nodejs</span></code></pre>\n</li>\n<li><p>将压缩包解压到<code>/usr/local/nodejs/</code>下</p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token comment\" spellcheck=\"true\"># tar -Jxvf node-v12.13.1-linux-x64.tar.xz -C /usr/local/nodejs</span></code></pre>\n</li>\n<li><p>为nodejs添加环境变量，即将<code>/usr/local/nodejs/node-v12.13.1-linux-x64/bin</code>添加到环境变量$PATH中，当然你也可以用创建<code>软连接</code>(即windows中的快捷方式)的方式代替，只不过第二种显得有点麻烦</p>\n<ul>\n<li><p>查看一下当前进程的环境变量值</p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token comment\" spellcheck=\"true\"># echo $PATH</span></code></pre>\n</li>\n<li><p>配置nodejs的环境</p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token comment\" spellcheck=\"true\"># vi /etc/profile</span></code></pre>\n<p>在文件末尾加上：<code>export PATH=/usr/local/nodejs/node-v12.13.1-linux-x64/bin:$PATH</code>保存退出并更新profile文件</p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token comment\" spellcheck=\"true\"># source /etc/profile</span></code></pre>\n<blockquote>\n<p>这里提一下为什么要写成PATH=/usr/local/nodejs/node-v12.13.1-linux-x64/bin:$PATH<br>而不写成PATH=$PATH:/usr/local/nodejs/node-v12.13.1-linux-x64/bin<br>当执行某个命令时，如果找不到会从环境变量中去查找对应的目录下是否有该命令，而查找则是<br>按照从左到右的顺序进行查找，所以这就可以避免旧版本在新版本之前而使得新版本不能被应用的情况</p>\n</blockquote>\n</li>\n<li><p>再次查看环境变量检查是否添加成功</p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token comment\" spellcheck=\"true\"># echo $PATH</span></code></pre>\n</li>\n</ul>\n</li>\n<li><p>查看nodejs版本检查是否安装成功</p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token comment\" spellcheck=\"true\"># node -v</span>\n<span class=\"token comment\" spellcheck=\"true\"># npm -v</span></code></pre>\n</li>\n</ol>\n<h4 id=\"3、安装hexo\"><a href=\"#3、安装hexo\" class=\"headerlink\" title=\"3、安装hexo\"></a>3、安装hexo</h4><p>接下来用<code>npm</code>来安装hexo-cli,但是在这不推荐大家使用，由于安装源在国外，下载过于缓慢，所以我们可以用国内的阿里巴巴镜像源进行快速下载安装</p>\n<ol>\n<li><p>npm 安装方式</p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token comment\" spellcheck=\"true\"># npm install -g hexo-cli</span></code></pre>\n</li>\n<li><p>cnpm 安装方式</p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token comment\" spellcheck=\"true\"># npm install -g cnpm --registry=https://registry.npm.taobao.org</span>\n<span class=\"token comment\" spellcheck=\"true\"># cnpm install -g hexo-cli</span></code></pre>\n</li>\n<li><p>查看hexo版本检查是否已安装好</p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token comment\" spellcheck=\"true\"># hexo -v</span></code></pre>\n</li>\n</ol>\n<h4 id=\"4、用hexo生成博客框架\"><a href=\"#4、用hexo生成博客框架\" class=\"headerlink\" title=\"4、用hexo生成博客框架\"></a>4、用hexo生成博客框架</h4><ol>\n<li><p>随便创建一个文件夹，这个文件夹用来存放hexo框架所有文件的（换而言之这个文件夹就是你的博客根目录），然后初始化该文件</p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token comment\" spellcheck=\"true\"># mkdir myblog</span>\n<span class=\"token comment\" spellcheck=\"true\">#这里改一下myblog的所有者和所有组(jake为你自己的用户名)</span>\n<span class=\"token comment\" spellcheck=\"true\"># chown jake:jake -R myblog</span>\n<span class=\"token comment\" spellcheck=\"true\"># cd myblog</span>\n<span class=\"token comment\" spellcheck=\"true\"># hexo init</span></code></pre>\n</li>\n<li><p>用hexo -s 命令启动该博客，接着用浏览器输入localhost:4000 访问，检查是否成功</p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token comment\" spellcheck=\"true\"># hexo s</span></code></pre>\n<ul>\n<li>默认端口4000，你也可以自定义指定端口为5000<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token comment\" spellcheck=\"true\"># hexo s -p 5000</span></code></pre>\n</li>\n</ul>\n</li>\n<li><p>另外介绍一个命令（后面要用到），用<code>hexo g</code>命令生成部署该博客（实质会生成一个public文件夹，这个文件夹下都是html静态页面）</p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token comment\" spellcheck=\"true\"># hexo g</span></code></pre>\n</li>\n</ol>\n<h4 id=\"5、win10系统访问虚拟机端口\"><a href=\"#5、win10系统访问虚拟机端口\" class=\"headerlink\" title=\"5、win10系统访问虚拟机端口\"></a>5、win10系统访问虚拟机端口</h4><p>由于我所有hexo部署都在虚拟机系统上，怎么通过win10主机访问我的博客页面呢</p>\n<ol>\n<li><p>开放虚拟机CentOS系统的4000端口</p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token comment\" spellcheck=\"true\"># firewall-cmd --zone=public --add-port=4000/tcp --permanent</span></code></pre>\n</li>\n<li><p>重启防火墙</p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token comment\" spellcheck=\"true\"># systemctl restart firewalld.service</span></code></pre>\n</li>\n<li><p>接下来你就可以通过win10上的浏览器输入虚拟机ip:4000访问你的博客了，当你看到如下图所示，那么恭喜你成功完成了第一步！</p>\n<p><img src=\"/2021/11/24/hexo/11-29-09.jpg\" alt=\"img\"></p>\n</li>\n</ol>\n<h3 id=\"二、在第一步的基础上换一个华丽的主题（也就是matery），再用GitHub作为服务器来被外界访问\"><a href=\"#二、在第一步的基础上换一个华丽的主题（也就是matery），再用GitHub作为服务器来被外界访问\" class=\"headerlink\" title=\"二、在第一步的基础上换一个华丽的主题（也就是matery），再用GitHub作为服务器来被外界访问\"></a>二、在第一步的基础上换一个华丽的主题（也就是matery），再用GitHub作为服务器来被外界访问</h3><h4 id=\"1、下载matery主题\"><a href=\"#1、下载matery主题\" class=\"headerlink\" title=\"1、下载matery主题\"></a>1、下载matery主题</h4><p>从github上下载一个matery主题(当前目录下)，然后把这个文件移动到<code>myblog/themes/</code>下</p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token comment\" spellcheck=\"true\"># git clone https://github.com/blinkfoxhexo-theme-matery.git</span>\n<span class=\"token comment\" spellcheck=\"true\">#/home/jake/myblog是我的博客根目录，需要根据自身情况予以修改</span>\n<span class=\"token comment\" spellcheck=\"true\"># mv hexo-theme-matery /home/jake/blog/themes/</span></code></pre>\n<h4 id=\"2、修改配置文件-config-yml\"><a href=\"#2、修改配置文件-config-yml\" class=\"headerlink\" title=\"2、修改配置文件_config.yml\"></a>2、修改配置文件_config.yml</h4><p><img src=\"/2021/11/24/hexo/11-29-10.jpg\" alt=\"img\"></p>\n<h4 id=\"3、切换到myblog文件下重新启动\"><a href=\"#3、切换到myblog文件下重新启动\" class=\"headerlink\" title=\"3、切换到myblog文件下重新启动\"></a>3、切换到myblog文件下重新启动</h4><pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token comment\" spellcheck=\"true\"># hexo s</span></code></pre>\n<p><img src=\"/2021/11/24/hexo/11-29-11.jpg\" alt=\"img\"></p>\n<h4 id=\"4、部署GitHub\"><a href=\"#4、部署GitHub\" class=\"headerlink\" title=\"4、部署GitHub\"></a>4、部署GitHub</h4><p>接下来就部署GitHub了，前提你得有个GitHub账号，没有的话去注册一个（这里不提供教程，自己百度）</p>\n<ol>\n<li><p>登录你的GitHub，创建一个仓库</p>\n<p><img src=\"/2021/11/24/hexo/11-29-12.jpg\" alt=\"img\"></p>\n</li>\n<li><p>按照规则为你的仓库起名（这个名字就是别人可以访问你博客的网址）<br><img src=\"/2021/11/24/hexo/11-29-13.jpg\" alt=\"img\"><br><img src=\"/2021/11/24/hexo/11-29-14.jpg\" alt=\"img\"></p>\n</li>\n<li><p>打开<code>_config.yml</code>配置文件，配置你的仓库</p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token comment\" spellcheck=\"true\"># vi _config.yml</span></code></pre>\n<p><img src=\"/2021/11/24/hexo/11-29-15.jpg\" alt=\"img\"></p>\n</li>\n<li><p>因为需要将项目推送到GitHub，所以需要安装一个插件</p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token comment\" spellcheck=\"true\"># cnpm install --save hexo-deployer-git</span></code></pre>\n</li>\n<li><p>装好后直接用hexo g 生成博客文件，再用hexo d 推送项目到github上</p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token comment\" spellcheck=\"true\"># hexo g</span>\n<span class=\"token comment\" spellcheck=\"true\"># hexo d</span></code></pre>\n<p><img src=\"/2021/11/24/hexo/11-29-16.jpg\" alt=\"img\"></p>\n</li>\n<li><p>换用ssh公钥<br>你会发现每次执行hexo d 推送到github上时需要输入账号和密码，这有点令人不耐烦，因此下面给大家展示一种用ssh公钥的方法去部署github</p>\n<ul>\n<li><p>在虚拟机CentOS系统上下载ssh key</p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token comment\" spellcheck=\"true\"># ssh-keygen -t rsa</span>\n<span class=\"token comment\" spellcheck=\"true\">#一路回车即可，然后查看/root下的文件夹</span>\n<span class=\"token comment\" spellcheck=\"true\"># ls -al /root</span></code></pre>\n</li>\n<li><p>这时候你会发现在root下有一个隐藏文件.ssh，打开.ssh下的</p>\n<pre><code>id_rsa.pub</code></pre><p>文件，复制此文件的全部内容,粘贴到下图所示位置</p>\n<p>打开github</p>\n<p><img src=\"/2021/11/24/hexo/11-29-17.jpg\" alt=\"img\"></p>\n<p><img src=\"/2021/11/24/hexo/11-29-18.jpg\" alt=\"img\"></p>\n<p><img src=\"/2021/11/24/hexo/11-29-19.jpg\" alt=\"img\"></p>\n</li>\n<li><p>相应的也要修改</p>\n<pre><code>_config.yml</code></pre><p>配置文件<br><img src=\"/2021/11/24/hexo/11-29-22.jpg\" alt=\"img\"><br><img src=\"/2021/11/24/hexo/11-29-21.jpg\" alt=\"img\"><br><img src=\"/2021/11/24/hexo/11-29-20.jpg\" alt=\"img\"></p>\n</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"5、收获成功的喜悦\"><a href=\"#5、收获成功的喜悦\" class=\"headerlink\" title=\"5、收获成功的喜悦\"></a>5、收获成功的喜悦</h4><p>当你看到这里恭喜你已经成功完成了第一份属于自己的博客了!但你会发现，你通过github访问你的博客会很卡，简单说一下原因。github服务器在国外，所以访问速度很慢，这里提供一个简单的解决办法</p>\n<ol>\n<li><p>可以用国内的coding，类似github，去coding官网注册一个账号，记得要实名认证，然后仿照github的操作将ssh key内容粘贴到指定区域<br><img src=\"/2021/11/24/hexo/11-29-24.jpg\" alt=\"img\"><br><img src=\"/2021/11/24/hexo/11-29-25.jpg\" alt=\"img\"></p>\n</li>\n<li><p>同样修改</p>\n<pre><code>_config.yml</code></pre><p>配置文件<br><img src=\"/2021/11/24/hexo/11-29-23.jpg\" alt=\"img\"></p>\n</li>\n<li><p>用<code>hexo clean</code>清理一下 ==&gt; <code>hexo g</code>生成 ==&gt; <code>hexo d</code>部署推送博客</p>\n</li>\n<li><p>接下来登录coding账号，查看仓库是存在项目，确定之后开始创建静态网站，步骤如下图所示<br><img src=\"/2021/11/24/hexo/11-29-26.jpg\" alt=\"img\"><br><img src=\"/2021/11/24/hexo/11-29-27.jpg\" alt=\"img\"><br><img src=\"/2021/11/24/hexo/11-29-28.jpg\" alt=\"img\"></p>\n</li>\n</ol>\n<h4 id=\"6、温馨提示\"><a href=\"#6、温馨提示\" class=\"headerlink\" title=\"6、温馨提示\"></a>6、温馨提示</h4><p>最后温馨提示一下，matery主题虽然应用到hexo框架上了，但仍需要改动一些配置文件，根据每个人不同的喜好可以制定自己独特的博客，至于个性化设置这里就不介绍了，需要的小伙伴可以去参考以下链接，看看大佬们是如何设计优化matery主题和hexo博客框架的。</p>\n<ul>\n<li>参考链接:<br><a href=\"https://sunhwee.com/posts/6e8839eb.html\" target=\"_blank\" rel=\"noopener\">洪卫の博客:Hexo+Github博客搭建完全教程</a><br><a href=\"https://godweiyang.com/2018/04/13hexo-blog/\" target=\"_blank\" rel=\"noopener\">韦阳的博客:超详细Hexo+Github博客搭建小白教程</a></li>\n</ul>\n<blockquote>\n<p>如果实在不懂的小伙伴可以在下方留言，也可以参考一下这个大佬的视频<a href=\"https://www.bilibili.com/video/av44544186/\" target=\"_blank\" rel=\"noopener\">hexo博客搭建</a></p>\n</blockquote>\n<h3 id=\"三、将第二步中的github和coding替换为自己的云服务器，下面介绍如何部署好云服务器\"><a href=\"#三、将第二步中的github和coding替换为自己的云服务器，下面介绍如何部署好云服务器\" class=\"headerlink\" title=\"三、将第二步中的github和coding替换为自己的云服务器，下面介绍如何部署好云服务器\"></a>三、将第二步中的github和coding替换为自己的云服务器，下面介绍如何部署好云服务器</h3><h4 id=\"1-创建git用户\"><a href=\"#1-创建git用户\" class=\"headerlink\" title=\"1. 创建git用户\"></a>1. 创建git用户</h4><p>当你做完前面两大步，这一步就相当的简单，原理都一样，首先在你的云服务机上，创建一个git用户,并指定密码</p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token comment\" spellcheck=\"true\"># useradd git</span>\n<span class=\"token comment\" spellcheck=\"true\"># passwd git</span></code></pre>\n<h4 id=\"2-部署密钥到服务器上\"><a href=\"#2-部署密钥到服务器上\" class=\"headerlink\" title=\"2. 部署密钥到服务器上\"></a>2. 部署密钥到服务器上</h4><p>切换到git用户，创建<code>.ssh</code>文件夹，以及在<code>.ssh</code>下创建<code>authorized_keys</code>文件,将ssh_key（也就是第二大步里面的那个密钥内容）粘贴到<code>authorized_keys</code>文件中</p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token comment\" spellcheck=\"true\"># su git</span>\n<span class=\"token comment\" spellcheck=\"true\"># 切换到git用户的家目录</span>\n<span class=\"token comment\" spellcheck=\"true\"># cd ~  </span>\n$ <span class=\"token function\">mkdir</span> .ssh\n$ vim ~/.ssh/autorized_keys <span class=\"token comment\" spellcheck=\"true\"># wq保存退出</span>\n<span class=\"token comment\" spellcheck=\"true\"># 修改一下.ssh 和 authorized_key 的权限，保证不被其他用户或用户组访问以及修改</span>\n$ <span class=\"token function\">chmod</span> 600 ~/.ssh/authorized_key\n$ <span class=\"token function\">chmod</span> 700 ~/.ssh </code></pre>\n<blockquote>\n<p>没有安装vim的 安装一下： <code>yum install -y vim</code></p>\n</blockquote>\n<h4 id=\"3-安装nginx\"><a href=\"#3-安装nginx\" class=\"headerlink\" title=\"3. 安装nginx\"></a>3. 安装nginx</h4><pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token comment\" spellcheck=\"true\"># yum install -y nginx</span>\n<span class=\"token comment\" spellcheck=\"true\"># systemctl start nginx.service # 启动nginx服务</span></code></pre>\n<p>当你通过外网访问你的服务器ip可以看到nginx的欢迎页面就说明你安装成功了。这里说一下，有可能你显示的时centos欢迎页面，这也没问题。（我的就是）<br>打开<code>/etc/nginx/nginx.conf</code>配置文件（如果找不到，你也可以用<code>nginx -t</code>查看配置文件在哪）</p>\n<p><img src=\"/2021/11/24/hexo/11-29-29.jpg\" alt=\"img\"></p>\n<p>接下来创建你的博客根目录(我创建的根目录是<code>/home/git/blog</code>)</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">mkdir</span> ~/blog</code></pre>\n<p>修改nginx配置文件如下（注意以下两个地方）<br>第一个是权限问题<br><img src=\"/2021/11/24/hexo/11-29-31.jpg\" alt=\"img\"><br>第二个是访问路径<br><img src=\"/2021/11/24/hexo/11-29-30.jpg\" alt=\"img\"><br>配置好就重启一下nginx</p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token comment\" spellcheck=\"true\"># systemctl restart nginx.service</span></code></pre>\n<h4 id=\"4-创建git仓库\"><a href=\"#4-创建git仓库\" class=\"headerlink\" title=\"4.创建git仓库\"></a>4.创建git仓库</h4><p>创建git仓库以及用hooks钩子同步到你的博客根目录</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">cd</span> ~\n$ <span class=\"token function\">git</span> init --bare blog.git\n$ <span class=\"token function\">ls</span> -l blog.git\n<span class=\"token comment\" spellcheck=\"true\"># 修改一下权限</span>\n<span class=\"token comment\" spellcheck=\"true\"># chown git:git -R blog.git</span>\n<span class=\"token comment\" spellcheck=\"true\"># 创建post-receive文件</span>\n$ vim blog.git/hooks/post-receive</code></pre>\n<p>添加以下内容：</p>\n<blockquote>\n<p>#!/bin/sh<br>git –work-tree=/home/git/blog –git-dir=/home/git/blog.git checkout -f<br><code>/home/git/blog</code>这是你刚刚创建的博客根目录<br>赋予其执行权限</p>\n</blockquote>\n<pre class=\" language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">chmod</span> +x /home/git/blog.git/hooks/post-receive</code></pre>\n<p>接下来创建git-receive-pack和git-upload-pack软连接,以防执行hexo d 命令时报错找不到</p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token comment\" spellcheck=\"true\"># sudo ln -s /usr/local/git/bin/git-receive-pack  /usr/bin/git-recei</span>\n<span class=\"token comment\" spellcheck=\"true\"># sudo ln -s /usr/local/git/bin/git-upload-pack  /usr/bin/git-upload-pack</span></code></pre>\n<h4 id=\"5-修改配置文件\"><a href=\"#5-修改配置文件\" class=\"headerlink\" title=\"5.修改配置文件\"></a>5.修改配置文件</h4><p>到本地的虚拟机系统上修改博客<code>_config.yml</code>配置文件<br>添加 <code>git@yourserver_ip:/home/git/blog.git</code>git服务器地址</p>\n<p><img src=\"/2021/11/24/hexo/11-29-32.jpg\" alt=\"img\"></p>\n<blockquote>\n<p>特别注意：<br>如果你之前跟我一样配置三个git服务器（github、coding、自己的云服务器）,那么你就要删除一下本地系统中的<code>.ssh</code>文件中的<code>known_hosts</code><br>只要你更改了<code>_config.yml</code>文件中git服务器地址，最好删除一下<code>known_hosts</code><br>执行<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code></p>\n</blockquote>\n<h3 id=\"四、总结一下可能会碰到的错误\"><a href=\"#四、总结一下可能会碰到的错误\" class=\"headerlink\" title=\"四、总结一下可能会碰到的错误\"></a>四、总结一下可能会碰到的错误</h3><ol>\n<li><p>经常会发生的错误：权限问题引起的。（这是个家常便饭，但你清楚了权限的重要性，那么你以后在linux系统上配置安装一些程序就很容易了）<br>有时候你在安装依赖文件或者执行某些命令如<code>hexo d hexo clean hexo g</code>等等会报错，那是因为你使用的当前用户权限不够。包括你在向git服务器推送项目时，你的服务器那边git用户权限不足而导致操作不了某些文件。</p>\n<p>所以建议你把博客根目录下所有文件的使用者更改为你当前用户。当然你也可以用root用户去操作，但是经常切换用户很麻烦，或者使用sudo借用root权限也要输入密码。<br>如：假设你的博客根目录路径为<code>/home/jake/myblog</code><br>那么使用以下命令更改权限</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">sudo</span> <span class=\"token function\">chown</span> jake:jake -R /home/jake/myblog/*</code></pre>\n</li>\n<li><p>访问网页出现404错误，这种很好解决，一是你的nginx路径配错了，二是访问端口未开放，ip配置不对。</p>\n</li>\n<li><p><code>hexo d</code>推送项目到git服务器时验证失败，首先确保你把本地的ssh_key密钥内容复制到了你的git服务器上了，然后删除你本地的<code>.ssh</code>文件夹下的<code>known_hosts</code>文件，重新<code>hexo d</code>,还有一种可能，你没有装推送必要的依赖插件<code>hexo-deployer-git</code></p>\n</li>\n</ol>\n<h3 id=\"五、讨论以及心得\"><a href=\"#五、讨论以及心得\" class=\"headerlink\" title=\"五、讨论以及心得\"></a>五、讨论以及心得</h3><p>有人可能会问我为什么不直接用windows作为本地进行操作，而要大费周章地去搞个虚拟机系统操作。</p>\n<p>或许你会觉得Windows上操作会更容易，当然有些小伙伴可能想用windows搭建hexo博客，这里我就不介绍了。</p>\n<p>其实用windows去搭建hexo博客的话我个人感觉有些别扭，因为你在windows操作的话在安装完git之后也是用git bash来部署安装hexo博客的，等价于用git bash 来营造一个Linux系统终端；</p>\n<p>显得有点多此一举，况且多用用Linux系统对某些小伙伴以后的学习是有帮助的。</p>\n<p>比如：虚拟机系统如何查看端口状态以及端口的开放和关闭，如何开启和关闭防火墙、虚拟机网速问题、git服务器的安装和使用、github、coding版本项目管理工具的使用、初步认识nginx负载均衡等等，这些都是我在搭建hexo中需要了解的知识。另外最重要的是我又对Linux系统有了进一步的了解</p>\n<h3 id=\"六、参考链接\"><a href=\"#六、参考链接\" class=\"headerlink\" title=\"六、参考链接\"></a>六、参考链接</h3><ol>\n<li><a href=\"https://sunhwee.com/posts/6e8839eb.html\" target=\"_blank\" rel=\"noopener\">洪卫の博客:Hexo+Github博客搭建完全教程</a></li>\n<li><a href=\"https://godweiyang.com/2018/04/13hexo-blog/\" target=\"_blank\" rel=\"noopener\">韦阳的博客:超详细Hexo+Github博客搭建小白教程</a></li>\n<li><a href=\"https://blog.csdn.net/StaunchKai/article/details/82878928\" target=\"_blank\" rel=\"noopener\">Hexo 博客部署到腾讯云服务器全流程</a></li>\n<li><a href=\"https://blog.csdn.net/qq_34996727/article/details/81065961\" target=\"_blank\" rel=\"noopener\">centos7开放、关闭及查看端口</a></li>\n<li><a href=\"https://www.liaoxuefeng.com/wiki/896043488029600\" target=\"_blank\" rel=\"noopener\">廖雪峰的Git教程</a></li>\n</ol>\n<p><a href=\"http://www.nstop.cn/\" target=\"_blank\" rel=\"noopener\">文章来源</a></p>\n","site":{"data":{"friends":[{"avatar":"http://q1.qlogo.cn/g?b=qq&nk=2750360683&s=640","name":"核心","introduction":"来自山东的一位普通高中生,喜欢捣鼓2333，爱好编程（新手）","url":"http://www.emtips.net/","title":"Piu~"},{"avatar":"https://i2.hdslb.com/bfs/face/2433a7d4053048811fec9907bcb066e867399da7.jpg","name":"SRO","introduction":"欢迎来到SRO知识库,您在这里可以看到大多数的SRO内部，外部资料","url":"https://sromc.cn/","title":"Piu~"},{"avatar":"http://q1.qlogo.cn/g?b=qq&nk=1692565761&s=640","name":"河南省商务中等职业学校","introduction":"网络搭建竞赛组","url":"https://hnswxx.cn/","title":"Piu~"},{"avatar":"http://q1.qlogo.cn/g?b=qq&nk=2191023046&s=640","name":"贺兰星辰","introduction":"HikariLan's Blog","url":"https://my.minecraft.kim/","title":"Piu~"}]}},"excerpt":"","more":"<h3 id=\"阅读须知：\"><a href=\"#阅读须知：\" class=\"headerlink\" title=\"阅读须知：\"></a>阅读须知：</h3><ul>\n<li><p>系统环境：</p>\n<blockquote>\n<p>本机：win10系统<br>虚拟机：CentOS7-64位（新装的）<br>云服务器：CentOS7-64位<br>注意：以下代码中<code>#</code>代表root权限，<code>$</code>代表普通用户</p>\n<p>如果你也跟我一样新装了个虚拟机centos7系统，建议先看看<a href=\"http://www.nstop.cn/2019/11/25hexo-bo-ke-da-jian/\" target=\"_blank\" rel=\"noopener\">我的另一篇博客</a></p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"一、初步搭建hexo环境-注意：我这是在虚拟机中的CentOS7系统上操作\"><a href=\"#一、初步搭建hexo环境-注意：我这是在虚拟机中的CentOS7系统上操作\" class=\"headerlink\" title=\"一、初步搭建hexo环境(注意：我这是在虚拟机中的CentOS7系统上操作)\"></a>一、初步搭建hexo环境(注意：我这是在虚拟机中的CentOS7系统上操作)</h3><h4 id=\"1、安装git（如果有则无须安装）\"><a href=\"#1、安装git（如果有则无须安装）\" class=\"headerlink\" title=\"1、安装git（如果有则无须安装）\"></a>1、安装git（如果有则无须安装）</h4><p>先介绍一种简单的方法（直接安装）但这种安装git版本过低<br><code>yum install -y git</code><br>–查看git版本<br><code>git --version</code></p>\n<p><img src=\"/2021/11/24/hexo/11-29-08.jpg\" alt=\"img\"></p>\n<blockquote>\n<p>这时候你会发现git版本会过低，我这里的是1.8.3.1<br>下面我将介绍最新版本git安装</p>\n</blockquote>\n<ol>\n<li><p>先卸载旧版本</p>\n<pre><code class=\"bash\">$ sudo yum remove -y git</code></pre>\n</li>\n<li><p>安装git新版本所需的依赖包</p>\n<pre><code class=\"bash\">$ sudo yum install -y curl-devel expat-devel gettext-devel openssl-devel zlib-devel\n$ sudo yum install -y gcc perl-ExtUtils-MakeMaker</code></pre>\n</li>\n<li><p>从我的github仓库源中下载最新git安装包并解压到<code>/usr/local/src</code>目录下</p>\n<pre><code class=\"bash\">$ wget https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.19.0.tar.gz\n$ sudo tar -zxvf git-2.19.0.tar.gz -C /usr/local/src</code></pre>\n<blockquote>\n<p>如果你的机器上没有安装wget则先安装<br><code>sudo yum install -y wget</code><br>这里解释一下 <code>-y</code> 这个参数的作用：<br>无需用户确认要发生的操作（也就是经常会弹出的yes/no/Enter 直接确认跳过）</p>\n</blockquote>\n</li>\n<li><p>编译并安装</p>\n<pre><code class=\"bash\">$ cd /usr/local/src/git-2.19.0/\n$ sudo make prefix=/usr/local/git all # 编译源码\n$ sudo make prefix=/usr/local/git install #安装到/usr/local/git</code></pre>\n</li>\n<li><p>修改配置文件（添加环境变量）</p>\n<pre><code class=\"bash\">$ sudo vi /etc/profile\n#在文件末尾添加export PATH=/usr/local/git/bin:$PATH 保存退出</code></pre>\n</li>\n<li><p>更新修改过后的配置文件</p>\n<pre><code class=\"bash\">$ source /etc/profile\n#查看git版本检查一下是否安装成功\n$ git --version</code></pre>\n</li>\n<li><p>顺便添加你的用户和邮箱</p>\n<pre><code class=\"bash\"># git config --global user.name &quot;yourname&quot;\n# git config --global user.email &quot;youremail&quot;</code></pre>\n</li>\n</ol>\n<h4 id=\"2、安装nodejs\"><a href=\"#2、安装nodejs\" class=\"headerlink\" title=\"2、安装nodejs\"></a>2、安装nodejs</h4><p>在安装hexo-cli之前需要借助nodejs</p>\n<ol>\n<li><p>去nodejs官网下载Linux二进制64bit压缩包，当然如果你的系统是32位的，即选择32位的，这里我直接用wget命令+ url 直接下载到本系统上</p>\n<pre><code class=\"bash\"># wget https://nodejs.org/dist/v12.13.1/node-v12.13.1-linux-x64.tar.xz</code></pre>\n</li>\n<li><p>在<code>/usr/local/</code>目录下创建一个<code>nodejs</code>文件夹</p>\n<pre><code class=\"bash\"># mkdir /usr/local/nodejs</code></pre>\n</li>\n<li><p>将压缩包解压到<code>/usr/local/nodejs/</code>下</p>\n<pre><code class=\"bash\"># tar -Jxvf node-v12.13.1-linux-x64.tar.xz -C /usr/local/nodejs</code></pre>\n</li>\n<li><p>为nodejs添加环境变量，即将<code>/usr/local/nodejs/node-v12.13.1-linux-x64/bin</code>添加到环境变量$PATH中，当然你也可以用创建<code>软连接</code>(即windows中的快捷方式)的方式代替，只不过第二种显得有点麻烦</p>\n<ul>\n<li><p>查看一下当前进程的环境变量值</p>\n<pre><code class=\"bash\"># echo $PATH</code></pre>\n</li>\n<li><p>配置nodejs的环境</p>\n<pre><code class=\"bash\"># vi /etc/profile</code></pre>\n<p>在文件末尾加上：<code>export PATH=/usr/local/nodejs/node-v12.13.1-linux-x64/bin:$PATH</code>保存退出并更新profile文件</p>\n<pre><code class=\"bash\"># source /etc/profile</code></pre>\n<blockquote>\n<p>这里提一下为什么要写成PATH=/usr/local/nodejs/node-v12.13.1-linux-x64/bin:$PATH<br>而不写成PATH=$PATH:/usr/local/nodejs/node-v12.13.1-linux-x64/bin<br>当执行某个命令时，如果找不到会从环境变量中去查找对应的目录下是否有该命令，而查找则是<br>按照从左到右的顺序进行查找，所以这就可以避免旧版本在新版本之前而使得新版本不能被应用的情况</p>\n</blockquote>\n</li>\n<li><p>再次查看环境变量检查是否添加成功</p>\n<pre><code class=\"bash\"># echo $PATH</code></pre>\n</li>\n</ul>\n</li>\n<li><p>查看nodejs版本检查是否安装成功</p>\n<pre><code class=\"bash\"># node -v\n# npm -v</code></pre>\n</li>\n</ol>\n<h4 id=\"3、安装hexo\"><a href=\"#3、安装hexo\" class=\"headerlink\" title=\"3、安装hexo\"></a>3、安装hexo</h4><p>接下来用<code>npm</code>来安装hexo-cli,但是在这不推荐大家使用，由于安装源在国外，下载过于缓慢，所以我们可以用国内的阿里巴巴镜像源进行快速下载安装</p>\n<ol>\n<li><p>npm 安装方式</p>\n<pre><code class=\"bash\"># npm install -g hexo-cli</code></pre>\n</li>\n<li><p>cnpm 安装方式</p>\n<pre><code class=\"bash\"># npm install -g cnpm --registry=https://registry.npm.taobao.org\n# cnpm install -g hexo-cli</code></pre>\n</li>\n<li><p>查看hexo版本检查是否已安装好</p>\n<pre><code class=\"bash\"># hexo -v</code></pre>\n</li>\n</ol>\n<h4 id=\"4、用hexo生成博客框架\"><a href=\"#4、用hexo生成博客框架\" class=\"headerlink\" title=\"4、用hexo生成博客框架\"></a>4、用hexo生成博客框架</h4><ol>\n<li><p>随便创建一个文件夹，这个文件夹用来存放hexo框架所有文件的（换而言之这个文件夹就是你的博客根目录），然后初始化该文件</p>\n<pre><code class=\"bash\"># mkdir myblog\n#这里改一下myblog的所有者和所有组(jake为你自己的用户名)\n# chown jake:jake -R myblog\n# cd myblog\n# hexo init</code></pre>\n</li>\n<li><p>用hexo -s 命令启动该博客，接着用浏览器输入localhost:4000 访问，检查是否成功</p>\n<pre><code class=\"bash\"># hexo s</code></pre>\n<ul>\n<li>默认端口4000，你也可以自定义指定端口为5000<pre><code class=\"bash\"># hexo s -p 5000</code></pre>\n</li>\n</ul>\n</li>\n<li><p>另外介绍一个命令（后面要用到），用<code>hexo g</code>命令生成部署该博客（实质会生成一个public文件夹，这个文件夹下都是html静态页面）</p>\n<pre><code class=\"bash\"># hexo g</code></pre>\n</li>\n</ol>\n<h4 id=\"5、win10系统访问虚拟机端口\"><a href=\"#5、win10系统访问虚拟机端口\" class=\"headerlink\" title=\"5、win10系统访问虚拟机端口\"></a>5、win10系统访问虚拟机端口</h4><p>由于我所有hexo部署都在虚拟机系统上，怎么通过win10主机访问我的博客页面呢</p>\n<ol>\n<li><p>开放虚拟机CentOS系统的4000端口</p>\n<pre><code class=\"bash\"># firewall-cmd --zone=public --add-port=4000/tcp --permanent</code></pre>\n</li>\n<li><p>重启防火墙</p>\n<pre><code class=\"bash\"># systemctl restart firewalld.service</code></pre>\n</li>\n<li><p>接下来你就可以通过win10上的浏览器输入虚拟机ip:4000访问你的博客了，当你看到如下图所示，那么恭喜你成功完成了第一步！</p>\n<p><img src=\"/2021/11/24/hexo/11-29-09.jpg\" alt=\"img\"></p>\n</li>\n</ol>\n<h3 id=\"二、在第一步的基础上换一个华丽的主题（也就是matery），再用GitHub作为服务器来被外界访问\"><a href=\"#二、在第一步的基础上换一个华丽的主题（也就是matery），再用GitHub作为服务器来被外界访问\" class=\"headerlink\" title=\"二、在第一步的基础上换一个华丽的主题（也就是matery），再用GitHub作为服务器来被外界访问\"></a>二、在第一步的基础上换一个华丽的主题（也就是matery），再用GitHub作为服务器来被外界访问</h3><h4 id=\"1、下载matery主题\"><a href=\"#1、下载matery主题\" class=\"headerlink\" title=\"1、下载matery主题\"></a>1、下载matery主题</h4><p>从github上下载一个matery主题(当前目录下)，然后把这个文件移动到<code>myblog/themes/</code>下</p>\n<pre><code class=\"bash\"># git clone https://github.com/blinkfoxhexo-theme-matery.git\n#/home/jake/myblog是我的博客根目录，需要根据自身情况予以修改\n# mv hexo-theme-matery /home/jake/blog/themes/</code></pre>\n<h4 id=\"2、修改配置文件-config-yml\"><a href=\"#2、修改配置文件-config-yml\" class=\"headerlink\" title=\"2、修改配置文件_config.yml\"></a>2、修改配置文件_config.yml</h4><p><img src=\"/2021/11/24/hexo/11-29-10.jpg\" alt=\"img\"></p>\n<h4 id=\"3、切换到myblog文件下重新启动\"><a href=\"#3、切换到myblog文件下重新启动\" class=\"headerlink\" title=\"3、切换到myblog文件下重新启动\"></a>3、切换到myblog文件下重新启动</h4><pre><code class=\"bash\"># hexo s</code></pre>\n<p><img src=\"/2021/11/24/hexo/11-29-11.jpg\" alt=\"img\"></p>\n<h4 id=\"4、部署GitHub\"><a href=\"#4、部署GitHub\" class=\"headerlink\" title=\"4、部署GitHub\"></a>4、部署GitHub</h4><p>接下来就部署GitHub了，前提你得有个GitHub账号，没有的话去注册一个（这里不提供教程，自己百度）</p>\n<ol>\n<li><p>登录你的GitHub，创建一个仓库</p>\n<p><img src=\"/2021/11/24/hexo/11-29-12.jpg\" alt=\"img\"></p>\n</li>\n<li><p>按照规则为你的仓库起名（这个名字就是别人可以访问你博客的网址）<br><img src=\"/2021/11/24/hexo/11-29-13.jpg\" alt=\"img\"><br><img src=\"/2021/11/24/hexo/11-29-14.jpg\" alt=\"img\"></p>\n</li>\n<li><p>打开<code>_config.yml</code>配置文件，配置你的仓库</p>\n<pre><code class=\"bash\"># vi _config.yml</code></pre>\n<p><img src=\"/2021/11/24/hexo/11-29-15.jpg\" alt=\"img\"></p>\n</li>\n<li><p>因为需要将项目推送到GitHub，所以需要安装一个插件</p>\n<pre><code class=\"bash\"># cnpm install --save hexo-deployer-git</code></pre>\n</li>\n<li><p>装好后直接用hexo g 生成博客文件，再用hexo d 推送项目到github上</p>\n<pre><code class=\"bash\"># hexo g\n# hexo d</code></pre>\n<p><img src=\"/2021/11/24/hexo/11-29-16.jpg\" alt=\"img\"></p>\n</li>\n<li><p>换用ssh公钥<br>你会发现每次执行hexo d 推送到github上时需要输入账号和密码，这有点令人不耐烦，因此下面给大家展示一种用ssh公钥的方法去部署github</p>\n<ul>\n<li><p>在虚拟机CentOS系统上下载ssh key</p>\n<pre><code class=\"bash\"># ssh-keygen -t rsa\n#一路回车即可，然后查看/root下的文件夹\n# ls -al /root</code></pre>\n</li>\n<li><p>这时候你会发现在root下有一个隐藏文件.ssh，打开.ssh下的</p>\n<pre><code>id_rsa.pub</code></pre><p>文件，复制此文件的全部内容,粘贴到下图所示位置</p>\n<p>打开github</p>\n<p><img src=\"/2021/11/24/hexo/11-29-17.jpg\" alt=\"img\"></p>\n<p><img src=\"/2021/11/24/hexo/11-29-18.jpg\" alt=\"img\"></p>\n<p><img src=\"/2021/11/24/hexo/11-29-19.jpg\" alt=\"img\"></p>\n</li>\n<li><p>相应的也要修改</p>\n<pre><code>_config.yml</code></pre><p>配置文件<br><img src=\"/2021/11/24/hexo/11-29-22.jpg\" alt=\"img\"><br><img src=\"/2021/11/24/hexo/11-29-21.jpg\" alt=\"img\"><br><img src=\"/2021/11/24/hexo/11-29-20.jpg\" alt=\"img\"></p>\n</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"5、收获成功的喜悦\"><a href=\"#5、收获成功的喜悦\" class=\"headerlink\" title=\"5、收获成功的喜悦\"></a>5、收获成功的喜悦</h4><p>当你看到这里恭喜你已经成功完成了第一份属于自己的博客了!但你会发现，你通过github访问你的博客会很卡，简单说一下原因。github服务器在国外，所以访问速度很慢，这里提供一个简单的解决办法</p>\n<ol>\n<li><p>可以用国内的coding，类似github，去coding官网注册一个账号，记得要实名认证，然后仿照github的操作将ssh key内容粘贴到指定区域<br><img src=\"/2021/11/24/hexo/11-29-24.jpg\" alt=\"img\"><br><img src=\"/2021/11/24/hexo/11-29-25.jpg\" alt=\"img\"></p>\n</li>\n<li><p>同样修改</p>\n<pre><code>_config.yml</code></pre><p>配置文件<br><img src=\"/2021/11/24/hexo/11-29-23.jpg\" alt=\"img\"></p>\n</li>\n<li><p>用<code>hexo clean</code>清理一下 ==&gt; <code>hexo g</code>生成 ==&gt; <code>hexo d</code>部署推送博客</p>\n</li>\n<li><p>接下来登录coding账号，查看仓库是存在项目，确定之后开始创建静态网站，步骤如下图所示<br><img src=\"/2021/11/24/hexo/11-29-26.jpg\" alt=\"img\"><br><img src=\"/2021/11/24/hexo/11-29-27.jpg\" alt=\"img\"><br><img src=\"/2021/11/24/hexo/11-29-28.jpg\" alt=\"img\"></p>\n</li>\n</ol>\n<h4 id=\"6、温馨提示\"><a href=\"#6、温馨提示\" class=\"headerlink\" title=\"6、温馨提示\"></a>6、温馨提示</h4><p>最后温馨提示一下，matery主题虽然应用到hexo框架上了，但仍需要改动一些配置文件，根据每个人不同的喜好可以制定自己独特的博客，至于个性化设置这里就不介绍了，需要的小伙伴可以去参考以下链接，看看大佬们是如何设计优化matery主题和hexo博客框架的。</p>\n<ul>\n<li>参考链接:<br><a href=\"https://sunhwee.com/posts/6e8839eb.html\" target=\"_blank\" rel=\"noopener\">洪卫の博客:Hexo+Github博客搭建完全教程</a><br><a href=\"https://godweiyang.com/2018/04/13hexo-blog/\" target=\"_blank\" rel=\"noopener\">韦阳的博客:超详细Hexo+Github博客搭建小白教程</a></li>\n</ul>\n<blockquote>\n<p>如果实在不懂的小伙伴可以在下方留言，也可以参考一下这个大佬的视频<a href=\"https://www.bilibili.com/video/av44544186/\" target=\"_blank\" rel=\"noopener\">hexo博客搭建</a></p>\n</blockquote>\n<h3 id=\"三、将第二步中的github和coding替换为自己的云服务器，下面介绍如何部署好云服务器\"><a href=\"#三、将第二步中的github和coding替换为自己的云服务器，下面介绍如何部署好云服务器\" class=\"headerlink\" title=\"三、将第二步中的github和coding替换为自己的云服务器，下面介绍如何部署好云服务器\"></a>三、将第二步中的github和coding替换为自己的云服务器，下面介绍如何部署好云服务器</h3><h4 id=\"1-创建git用户\"><a href=\"#1-创建git用户\" class=\"headerlink\" title=\"1. 创建git用户\"></a>1. 创建git用户</h4><p>当你做完前面两大步，这一步就相当的简单，原理都一样，首先在你的云服务机上，创建一个git用户,并指定密码</p>\n<pre><code class=\"bash\"># useradd git\n# passwd git</code></pre>\n<h4 id=\"2-部署密钥到服务器上\"><a href=\"#2-部署密钥到服务器上\" class=\"headerlink\" title=\"2. 部署密钥到服务器上\"></a>2. 部署密钥到服务器上</h4><p>切换到git用户，创建<code>.ssh</code>文件夹，以及在<code>.ssh</code>下创建<code>authorized_keys</code>文件,将ssh_key（也就是第二大步里面的那个密钥内容）粘贴到<code>authorized_keys</code>文件中</p>\n<pre><code class=\"bash\"># su git\n# 切换到git用户的家目录\n# cd ~  \n$ mkdir .ssh\n$ vim ~/.ssh/autorized_keys # wq保存退出\n# 修改一下.ssh 和 authorized_key 的权限，保证不被其他用户或用户组访问以及修改\n$ chmod 600 ~/.ssh/authorized_key\n$ chmod 700 ~/.ssh </code></pre>\n<blockquote>\n<p>没有安装vim的 安装一下： <code>yum install -y vim</code></p>\n</blockquote>\n<h4 id=\"3-安装nginx\"><a href=\"#3-安装nginx\" class=\"headerlink\" title=\"3. 安装nginx\"></a>3. 安装nginx</h4><pre><code class=\"bash\"># yum install -y nginx\n# systemctl start nginx.service # 启动nginx服务</code></pre>\n<p>当你通过外网访问你的服务器ip可以看到nginx的欢迎页面就说明你安装成功了。这里说一下，有可能你显示的时centos欢迎页面，这也没问题。（我的就是）<br>打开<code>/etc/nginx/nginx.conf</code>配置文件（如果找不到，你也可以用<code>nginx -t</code>查看配置文件在哪）</p>\n<p><img src=\"/2021/11/24/hexo/11-29-29.jpg\" alt=\"img\"></p>\n<p>接下来创建你的博客根目录(我创建的根目录是<code>/home/git/blog</code>)</p>\n<pre><code class=\"bash\">$ mkdir ~/blog</code></pre>\n<p>修改nginx配置文件如下（注意以下两个地方）<br>第一个是权限问题<br><img src=\"/2021/11/24/hexo/11-29-31.jpg\" alt=\"img\"><br>第二个是访问路径<br><img src=\"/2021/11/24/hexo/11-29-30.jpg\" alt=\"img\"><br>配置好就重启一下nginx</p>\n<pre><code class=\"bash\"># systemctl restart nginx.service</code></pre>\n<h4 id=\"4-创建git仓库\"><a href=\"#4-创建git仓库\" class=\"headerlink\" title=\"4.创建git仓库\"></a>4.创建git仓库</h4><p>创建git仓库以及用hooks钩子同步到你的博客根目录</p>\n<pre><code class=\"bash\">$ cd ~\n$ git init --bare blog.git\n$ ls -l blog.git\n# 修改一下权限\n# chown git:git -R blog.git\n# 创建post-receive文件\n$ vim blog.git/hooks/post-receive</code></pre>\n<p>添加以下内容：</p>\n<blockquote>\n<p>#!/bin/sh<br>git –work-tree=/home/git/blog –git-dir=/home/git/blog.git checkout -f<br><code>/home/git/blog</code>这是你刚刚创建的博客根目录<br>赋予其执行权限</p>\n</blockquote>\n<pre><code class=\"bash\">$ chmod +x /home/git/blog.git/hooks/post-receive</code></pre>\n<p>接下来创建git-receive-pack和git-upload-pack软连接,以防执行hexo d 命令时报错找不到</p>\n<pre><code class=\"bash\"># sudo ln -s /usr/local/git/bin/git-receive-pack  /usr/bin/git-recei\n# sudo ln -s /usr/local/git/bin/git-upload-pack  /usr/bin/git-upload-pack</code></pre>\n<h4 id=\"5-修改配置文件\"><a href=\"#5-修改配置文件\" class=\"headerlink\" title=\"5.修改配置文件\"></a>5.修改配置文件</h4><p>到本地的虚拟机系统上修改博客<code>_config.yml</code>配置文件<br>添加 <code>git@yourserver_ip:/home/git/blog.git</code>git服务器地址</p>\n<p><img src=\"/2021/11/24/hexo/11-29-32.jpg\" alt=\"img\"></p>\n<blockquote>\n<p>特别注意：<br>如果你之前跟我一样配置三个git服务器（github、coding、自己的云服务器）,那么你就要删除一下本地系统中的<code>.ssh</code>文件中的<code>known_hosts</code><br>只要你更改了<code>_config.yml</code>文件中git服务器地址，最好删除一下<code>known_hosts</code><br>执行<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code></p>\n</blockquote>\n<h3 id=\"四、总结一下可能会碰到的错误\"><a href=\"#四、总结一下可能会碰到的错误\" class=\"headerlink\" title=\"四、总结一下可能会碰到的错误\"></a>四、总结一下可能会碰到的错误</h3><ol>\n<li><p>经常会发生的错误：权限问题引起的。（这是个家常便饭，但你清楚了权限的重要性，那么你以后在linux系统上配置安装一些程序就很容易了）<br>有时候你在安装依赖文件或者执行某些命令如<code>hexo d hexo clean hexo g</code>等等会报错，那是因为你使用的当前用户权限不够。包括你在向git服务器推送项目时，你的服务器那边git用户权限不足而导致操作不了某些文件。</p>\n<p>所以建议你把博客根目录下所有文件的使用者更改为你当前用户。当然你也可以用root用户去操作，但是经常切换用户很麻烦，或者使用sudo借用root权限也要输入密码。<br>如：假设你的博客根目录路径为<code>/home/jake/myblog</code><br>那么使用以下命令更改权限</p>\n<pre><code class=\"bash\">$ sudo chown jake:jake -R /home/jake/myblog/*</code></pre>\n</li>\n<li><p>访问网页出现404错误，这种很好解决，一是你的nginx路径配错了，二是访问端口未开放，ip配置不对。</p>\n</li>\n<li><p><code>hexo d</code>推送项目到git服务器时验证失败，首先确保你把本地的ssh_key密钥内容复制到了你的git服务器上了，然后删除你本地的<code>.ssh</code>文件夹下的<code>known_hosts</code>文件，重新<code>hexo d</code>,还有一种可能，你没有装推送必要的依赖插件<code>hexo-deployer-git</code></p>\n</li>\n</ol>\n<h3 id=\"五、讨论以及心得\"><a href=\"#五、讨论以及心得\" class=\"headerlink\" title=\"五、讨论以及心得\"></a>五、讨论以及心得</h3><p>有人可能会问我为什么不直接用windows作为本地进行操作，而要大费周章地去搞个虚拟机系统操作。</p>\n<p>或许你会觉得Windows上操作会更容易，当然有些小伙伴可能想用windows搭建hexo博客，这里我就不介绍了。</p>\n<p>其实用windows去搭建hexo博客的话我个人感觉有些别扭，因为你在windows操作的话在安装完git之后也是用git bash来部署安装hexo博客的，等价于用git bash 来营造一个Linux系统终端；</p>\n<p>显得有点多此一举，况且多用用Linux系统对某些小伙伴以后的学习是有帮助的。</p>\n<p>比如：虚拟机系统如何查看端口状态以及端口的开放和关闭，如何开启和关闭防火墙、虚拟机网速问题、git服务器的安装和使用、github、coding版本项目管理工具的使用、初步认识nginx负载均衡等等，这些都是我在搭建hexo中需要了解的知识。另外最重要的是我又对Linux系统有了进一步的了解</p>\n<h3 id=\"六、参考链接\"><a href=\"#六、参考链接\" class=\"headerlink\" title=\"六、参考链接\"></a>六、参考链接</h3><ol>\n<li><a href=\"https://sunhwee.com/posts/6e8839eb.html\" target=\"_blank\" rel=\"noopener\">洪卫の博客:Hexo+Github博客搭建完全教程</a></li>\n<li><a href=\"https://godweiyang.com/2018/04/13hexo-blog/\" target=\"_blank\" rel=\"noopener\">韦阳的博客:超详细Hexo+Github博客搭建小白教程</a></li>\n<li><a href=\"https://blog.csdn.net/StaunchKai/article/details/82878928\" target=\"_blank\" rel=\"noopener\">Hexo 博客部署到腾讯云服务器全流程</a></li>\n<li><a href=\"https://blog.csdn.net/qq_34996727/article/details/81065961\" target=\"_blank\" rel=\"noopener\">centos7开放、关闭及查看端口</a></li>\n<li><a href=\"https://www.liaoxuefeng.com/wiki/896043488029600\" target=\"_blank\" rel=\"noopener\">廖雪峰的Git教程</a></li>\n</ol>\n<p><a href=\"http://www.nstop.cn/\" target=\"_blank\" rel=\"noopener\">文章来源</a></p>\n"},{"title":"Hello World","date":"2018-06-13T18:55:52.000Z","typora-root-url":"..","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n\t$ hexo new \"My New Post\"\n\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n\n\t$ hexo server\n\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n\n\t$ hexo generate\n\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n\n\t$ hexo deploy\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n\n\n\n\n\n![image-20200215031832012](/_posts/hello-world/image-20200215031832012.png)","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2018-06-14 02:55:52\ntypora-root-url: ..\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n\t$ hexo new \"My New Post\"\n\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n\n\t$ hexo server\n\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n\n\t$ hexo generate\n\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n\n\t$ hexo deploy\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n\n\n\n\n\n![image-20200215031832012](/_posts/hello-world/image-20200215031832012.png)","slug":"hello-world","published":1,"updated":"2021-11-25T05:23:40.681Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckweswgid000fe8vh2y0x6m2c","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre><code>$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre><code>$ hexo server</code></pre><p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre><code>$ hexo generate</code></pre><p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre><code>$ hexo deploy</code></pre><p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n<p><img src=\"/2018/06/14/hello-world/hello-world/image-20200215031832012.png\" alt=\"image-20200215031832012\"></p>\n","site":{"data":{"friends":[{"avatar":"http://q1.qlogo.cn/g?b=qq&nk=2750360683&s=640","name":"核心","introduction":"来自山东的一位普通高中生,喜欢捣鼓2333，爱好编程（新手）","url":"http://www.emtips.net/","title":"Piu~"},{"avatar":"https://i2.hdslb.com/bfs/face/2433a7d4053048811fec9907bcb066e867399da7.jpg","name":"SRO","introduction":"欢迎来到SRO知识库,您在这里可以看到大多数的SRO内部，外部资料","url":"https://sromc.cn/","title":"Piu~"},{"avatar":"http://q1.qlogo.cn/g?b=qq&nk=1692565761&s=640","name":"河南省商务中等职业学校","introduction":"网络搭建竞赛组","url":"https://hnswxx.cn/","title":"Piu~"},{"avatar":"http://q1.qlogo.cn/g?b=qq&nk=2191023046&s=640","name":"贺兰星辰","introduction":"HikariLan's Blog","url":"https://my.minecraft.kim/","title":"Piu~"}]}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre><code>$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre><code>$ hexo server</code></pre><p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre><code>$ hexo generate</code></pre><p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre><code>$ hexo deploy</code></pre><p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n<p><img src=\"/2018/06/14/hello-world/hello-world/image-20200215031832012.png\" alt=\"image-20200215031832012\"></p>\n"},{"title":"密码破解与心理学","typora-copy-images-to":"密码破解与心理学","date":"2021-11-25T09:04:51.000Z","_content":"\n# 十大基本规律\n1. 绝大多数人都高估了破译密码的难度和低估了自己密码存在的风险，因而，往往把能够破解密码的人当成神秘人物，同时基本很少有修改自己密码的习惯。\n2. 绝大多数人一生常用的密码通常不会超过3个，如果你破解了某人的QQ密码，很可能你也破解了他的论坛密码、邮箱密码、游戏账号密码……\n3. 从性别上看，男性的密码比女性的要更加难破；从年龄层面上看，年轻人的密码比35岁以上的人群的密码更加难破；从受教育层度上看，大专以上学历的人群相对于以下学历人群，密码破解难度更大，且大专、本科、硕士学历的人群密码破解难度基本上没有什么区别；从专业角度上看，理科生的密码比起文科生要难破一些，计算机相关专业的学生密码破解难度最大。\n4. 绝大多数人的密码，基本上都是有确定含义的，随机乱码组成的密码极度罕见（应该说我从来没有遇到过，不过如果是这种密码，我这种基于心理的思路，可以确定毫无办法）。\n5. 大多数人的密码要么纯粹用数字组成，要么纯粹用小写字母组成，要么用数字加字母组成，只有很少人会采用下划线，极少数的人字母区分大小写。\n6. 密码所采用的字母中，很多都是姓名拼音、名字拼音的全部或首字母缩写，某一图腾的英文单词（通常是名词）——图腾的含义后面会提到，某一单位名的首字母缩写，以及某一地名的拼音或英文及其缩写。\n7. 密码所采用的数字中，很多有关日期，且该日期对密码所有人拥有极其重要的意义，还有很多与地名和电话号码有关。\n8. 使用下划线的密码，下划线通常只出现一次，一般这类密码的主人密码保护意识很强，其密码往往还包含数字和字母，这种密码的下划线的位置通常处在数字和字母的分隔处；字母区分大小写的密码，大写通常只出现一次，并且很多时候都出现在密码的开头，极少数出现在结尾。\n9. 除非所登录系统有严格的位数限制，否则密码的位数通常是8位到11位，7位以下的密码和12位以上的密码较为少见。\n10. 公共网络的密码通常很少包含个人信息，大多数是单位名称的全部或某一部分的中文或英文全称，或者英文或拼音的首字母缩写，外加拥有特定含义的数字，这种数字通常是电话号码或者门牌号，另外，有些密码是上述特定字母或其缩写的简单重复，如：12341234、abcabcabc；个人密码则很少出现上述简单重复的情况。\n\n# 十大规律隐含的心理学特性\n## 惰性\n从上述很多条规律都可以看出人或多或少存在惰性，比如很少人会定期修改密码；再如很少人密码会区分大小写，因为这样的话必须进行至少一次大小写切换；再如各种不同账号使用同一密码都是人存在惰性的有力证明。\n\n## 自我意识\n自我意识很多时候体现在使用名字的密码上，通常，自我意识较为强烈的人，很看重自己的名号或者名誉，因而，其密码一旦使用自己的名字，往往就是名字的全拼，较少使用缩写，更不会省略自己的姓氏，另外，这类人也有很大一部分使用的是某一图腾的英文单词，例如某人非常崇拜某一偶像，那么，这个偶像就是他的图腾，其密码很有可能与这个图腾有关。\n\n## 自我保护意识\n从公用密码很少包含个人信息这一点很容易印证自我保护的问题，一般来说，当某一网管或其他特定工作性质的人需要为某公用账号设置密码时，首先需要考虑的是密码易为别人所理解和记忆，然而，一个人在考虑秘密之类的东西时，首先联想的是他自己身上的东西，由于这些东西涉及其个人隐私，因而很容易被他的潜意识所排除。\n\n## 爱与责任感\n不少人的密码会使用伴侣和孩子的姓名或生日、结婚纪念日、自己公司成立日期等诸如此类的信息，这很明显地体现了爱和责任感。\n\n## 完美主义倾向\n完美主义倾向在密码中主要体现在对称与平衡上面，这从名字加日期的组合式密码和带下划线的密码可以很容易看出来，例如，某人叫做张三，生日是1980年1月1日，那么，如果采用前者，其密码往往是zhangsan19800101或者zhangsan8011，不大可能设置成z1h9a8n0g0s0a1n01这种类型；如果使用下划线密码，则很大可能会采用zhangsan_19800101或者zhang_san_19800101，不大可能采用_zhangsan19800101或者z_hangsan19800101这种类型。\n\n# 常见的无脑型密码\n所谓无脑型密码，指那种破解起来没有任何技术含量，纯粹依靠运气就可以破解的密码，这种密码通常为公用，其结构很多时候为：某一数字的简单重复，某一简单规则的数字序列，某一简单规则的字母序列，按某种简单规则组合的数字和字母序列，以上四种密码有以下一些典型例子：01223456789,1234567890,123123123,12341234,0987654321，13579824680。\n\n或者这样：qwertyuiop，abcabcabc，abcdabcd，abcdefg,八个8,八个6，八个1，八个0，八个或者九个9，abcd1234,abc123abc123,abcd4321，所在城市区号的简单重复，等等。\n\n这种无脑型密码常见于公用的网络或者邮箱账号，尝试破解公共密码的时候，通常优先选用以上提到的这些密码进行尝试，在北京的时候，我用qwertyuiop破解了一次路由器的密码，来到潮州之后，第一次用1234567890破解了一次密码，后来才知道是同事手机网络的密码，现在用的网络是邻居的，密码是8个8.\n\n## 公共网络的路由器密码破解法\n其实从严格意义上来讲，只要接了路由器，那么，其网络必定是共享的，因而只要接了路由器的网络，都可以看成是公用网络，区别在于公用的程度，一般来说，从公用的程度来讲，路由器可以分为四类：公共场所、公司、公租房、家庭，其中公用程度越高，密码破解难度就越低。\n\n## 公共场所的路由器密码破解法\n公共场所通常包括旅馆、饮食场所、网吧、商场等人流量大，人群确定但身份群不稳定的场所，这种场所的网络基本上不会包含任何个人信息，且大多数密码都是无脑型密码，此外最常见的密码是以下几种：\n\n- 场所名称的拼音或英文的简单重复\n- 场所门牌号的简单重复或前半部分为门牌号，后一部分为门牌号的倒序\n- 场所名拼音或英文加上场所所在门牌号或分店号\n- 场所预约电话、送餐电话或400免费服务电话\n- 场所名拼音或英文加上4位到6为无脑型密码\n- 场所门口某路公交车号码的简单重复\n  \n> 总的来说，很多的场所是不设置密码的，设置密码的作用也不大，其设置密码的目的通常是防止临近商家或住户的盗用，但只要这些用户稍微花点心思，则获取密码易如反掌。\n\n## 公司路由器密码破解法\n如果你在搜索网络的时候，搜索到网络名为4位以上的大写英文字母的，这种网络很有可能是公司网络，其密码的组合通常非常简单，除了以上提到的无脑型密码以外，很有可能采用如下几种形式。\n\n- 公司名拼音或英文的简单重复，如中国移动，其某一门店的哦网络有可能是zgydzgyd，或者chinamobile\n- 公司门牌号的简单重复或者前半部分为门牌号，后一部分为门牌号的倒序，例如某公司位于某栋大楼的1606室，那么其密码有可能是16061606或者16066061\n- 公司前台电话号码，有时还会加上公司所在城市的区号\n- 公司名拼音或英文加上公司门牌号\n- 公司名拼音或英文加上某一4位到6位的无脑型密码\n- 公司名拼音或英文缩写加上电话号码或电话号码的最后4位\n\n> 总之，公司的网络由于用的人多，所以，其密码包含的较难记住的信息越少，破解难度是非常低的，只要有耐心多尝试几次，一般来说，都不难破解，至于公司的名称、门牌号码和电话号码如何获得，这个我想只要你在一些写字楼上过班，都不用我来教你。\n\n## 公租房路由器密码破解法\n这里所谓的公租房，是指来自不同地方彼此不认识的人或者彼此要好的同学、朋友、同事一起租住的房子，包括大学宿舍，职工宿舍，同时还包括彼此独立租房，但共用一个网络的用户群。\n\n公租房的密码类型已经或多或少接近于家庭密码，但由于成员关系不如家庭那么亲密，因而，其包含的个人信息依然较少，破解的成功率依然较为可观。除了上述提到的无脑型密码以外，公租房的密码通常还有以下几种类型：\n\n- 所在小区名或楼层名拼音的全部或者拼音简写的简单重复，例如“金碧花园”用户，其密码就有可能是jinbihuayuan或者jbhyjbh\n- 房号或者楼号加房号或其简单重复，或者前一部分为房号，后一部分为房号的倒序，例如我在北京时候住在某栋小区的2号楼2单元1202房，我为租用我网络的用户设置的密码就是12022021；同时，尝试过登录邻居路由器的时候，住在1201的公租房用户，其密码为12011201；住在11楼3号房的用户，其路由器密码为02021103。\n- 小区名的简写加上房号，例如，我在北京住的小区名为华龙美晟，搜到我楼下2号房的用户，其路由器密码为hlms1102。\n- 宿舍电话号码或者前面加上区号，例如，广州某大学宿舍的电话号码为61306325，那么，其密码有可能就是61306325或者02061306325.\n- 公租房用户都要经常用到的某一电话号码，例如送水电话，送煤气的电话，送餐电话，等等。\n\n## 家庭路由器密码破解法\n家庭密码在这四类密码中间，相对来说是最容易破解的，因为大家彼此都很亲密，因而，这类密码通常包含了不少家庭方面的信息，不过，从人性的角度来将，再亲密的人彼此之间也是存在隐私的，因而，这类密码通常不会包含真正内心深处的隐私，因而，相对于个人密码来讲，其破解难度要低得多。\n\n不少的家庭路由器密码依然使用上述的无脑型密码，另外一些则具备公租房密码的特点，以上这些都不再赘述，下面谈谈家庭路由器密码相对于公租房密码所不具备的特点及其破解方法。\n\n- 家庭姓氏拼音的简单重复，这种常见于姓氏拼音4个字母以上的家庭，如张、周等，而像李、林一类的姓氏，这种方式就要少见得多。另外，有趣的是，以姓氏进行简单重复的密码，其首字母通常会采用大写，有的甚至是遇到第一个字母就大写一次的现象，例如某一姓张的家庭，其密码有可能会采用Zhangzhang或者ZhangZhang的格式。\n\n- 家庭所居住的房屋的电话号码或者区号加上电话号码，这类密码有时候家庭会出于安全考虑，在电话号码最后会加上一位到两位防盗码。例如，某家庭的电话号码是81008100，那么其路由器密码有可能会是810081000，最后一个0就是防盗码。\n\n- 老家的电话号码，这是我阅读上面提到的那份资料所发现的一个密码规则，当时我发现有几个人采用这种类型的密码，其中一个人注册资料填写的寄件地址是北京，而户籍地址是河北某县的，而其密码以0开头，看起来像一个电话号码，因而上网查找，果然发现这个密码的前面几个数字与其户籍地址所在的县城区号相对应，因而断定这是一个老家的电话号码，尽管这属于个人密码，但是由于老家的电话是家庭成员所共知的，因而完全有可能被用作路由器密码。\n\n- 家庭姓氏的拼音加上电话号码或者手机号码。\n\n以下几条是我认为可能存在的规则，但是由于之前破解的过程没有相关的信息，因而没有经过验证的，一并提出来供大家参考。\n\n- 夫妻两个人的姓氏加上结婚纪念日，有可能是两个姓氏连在一起，后面加上结婚纪念日；也有可能是两个姓氏分别放在两端，结婚纪念日放在中间。\n- 第一个孩子的姓名、小命加上孩子生日。\n- 父亲或者母亲的生日。\n- 夫妻之间妻子的姓名，丈夫私底下对其的爱称加上妻子的生日。这一条是有性别的分工所决定的，因为通常涉及电脑的东西，男性懂得会更多，因此借此机会向配偶表达一下爱意是完全可能的。\n- 家里养的宠物的名字加上某一特定含义的数字。\n\n> 总之，只要你掌握足够的信息，通过这上面已经经过验证和没有经过验证的几条规律，就有极大的可能破解人家的路由器密码。\n\n以上就是几种人群分布所在网络的路由器密码破解的主要内容，而有的时候，破解密码甚至都不需要用到以上的方法，因为路由器通常也就是那么几个品牌，而很多品牌的路由器地址都是固定的，例如TP-Link及其他很多品牌的很多型号使用的地址是192.168.1.1，像腾达则很多使用192.168.0.1，而各大品牌的路由器的默认初始登录账号和密码都是admin，偏偏很多人又不会操作，有的即使懂得操作也不愿意去修改路由器的登录密码，因而有时候你可能很轻松的就进入人家的路由器去进行诸如设定固定IP、修改流量、重启路由器等操作。如果你搜索某个网络的网络名是诸如Tenda，TP-Link_2D18FA这样的含有品牌名的网络，那么，很有可能他的路由器登录密码也是没有修改的，只要你懂得路由器怎么操作，那么，这种网络是很容易就突破了。\n\n## 基于性格分析的个人密码破解法\n### 个人密码常用的组成要素\n- 自己姓名、伴侣姓名、孩子姓名的拼音或其缩写。\n- 自己生日、伴侣生日、孩子生日、父亲或母亲生日、自己公司开张纪念日、结婚纪念日、某个亲人的忌日等对密码主人有特别重要意义的日期。\n- 家庭电话号码、老家电话号码、个人手机号码、爱人手机号码。\n- 身份证、房产证、驾驶证、自己公司的经营许可证、营业执照等证件的号码或其号码段。\n- 与自己所追求或崇拜的事物有关的事物（即：图腾）的名称或日期。\n- 自己、亲人、宠物、图腾的昵称。\n- 爱人或者某一图腾的名称（通常是简称），加上1314（一生一世）或者5201314（我爱你一生一世）这样拥有谐音特性的数字串。\n\n# 图腾\n“图腾”体现在现代人的精神世界里，很多的时候是爱、理想、人格参照物等美好事物的象征。其一般意义通常与宗教或者原始崇拜有关，而宗教之所以能够一直存在，很大程度在于其能直达人类的内心深处，密码“密”的特点与图腾的这种特点很容易就能够互相结合，因而，与图腾相关联的一些事物，很容易被人们选作密码的载体。\n\n在密码中，常见的图腾通常有以下几种：\n\n- 初恋对象的名字拼音或其缩写，或者昵称的英文，初恋对象的生日或与初恋各种第一次的日期，与初恋对象有关的事物，例如某只宠物的名字、第一次约会的地点。\n- 某个特别崇拜的人物的姓名、外号或者生日、忌日。\n- 某个特别向往的地方的名字，包括发誓一辈子无论如何要去一次的地方或者故乡。\n- 某个特别向往的神话人物或一种与一种理想生活有关的事物，例如：乌托邦（Utopia）。\n- 某个童年时期对自己影响极深的人物的名字或者事物的名称，例如：电影《公民凯恩》中，凯恩至死都念念不忘的“rosebud”，如果凯恩生在现代，那么，我刚说他的密码百分之百会包含这个单词。\n\n## 不同人格类型的人群使用密码的习惯\n由于各自使用的标准不同，古今中外各种心理学家和人物学家，对于人群的分类方法可谓千差万别，例如：儒家通常会将人分为圣人、君子、小人，三国时期的刘劭则将人按才的不同分为英、雄、俊、杰，中国的命理学更是将人按照生辰八字的结合分出“财官双美格”、“食神生财格”等多种类型，而“阴阳二十五人”分类法则将人按照五行体现的气质将人分为二十五类；西方心理学有按星座进行区分的，还有按照九型人格进行区分的，而像弗洛伊德则将人的思想分为有意识和无意识两种，施普兰格尔则把人格分为理论、经济、艺术、社会、政治、宗教6种类型……\n\n由于理论基础不一样，因而其分类方法就不一样，对于密码来说，上述无论任何一种理论所提供的分类方法都难以能够和该人群的密码使用习惯一一对应，因而，下面我将结合自己的经验以及自己的思考，对不同类型的密码所对应的人群进行分类。\n\n---\n\n由于自己过往破译的密码并不算太多，而阅读过的那份材料所涉及的人又全部素未谋面，加上我并没有学过系统的心理学课程，因而，以下的分类方法未必科学，难免会遗漏某些人格类型，同时，也缺乏统计学意义上的证据作为支撑，因而你不妨把他看成是一种无稽之谈。需要特别指出的是，以下分类所涉及的人群，并没有严格的界限，有很多人同时兼具不同的性格特点，因而其密码也会同时拥有各自的特点。\n\n### 责任感型\n责任感通常来源于自信以及对家人强烈的爱，这种人通常在社会上比较成功，对社会现象有特定的判断标准，且其看法不容易为别人所动，体现在生活习惯上，他们选择工作时通常比较谨慎而且目标明确，日常生活较为单一，除了工作以外，他们会花很多的时间陪家人，赚来钱通常花在家人身上或者交给爱人保管。这种人群的密码通常包括以下的要素：爱人的姓名、昵称或生日，结婚纪念日，孩子的姓名、昵称或生日，老家的电话号码，父亲或母亲的生日。\n### 洁癖型\n此处指精神意义上的洁癖，这种人的思想中存在一个特定的界限，这个界限是无论自己还是别人都不允许逾越的禁区。这种人要么特别成功，要么整天抱怨；要么像个外交家，要么极度孤僻；同时他们别人的某些行为或者社会想象拥有常人所难以理解的评判标准，这种人的自我意识通常很强，而且对某种理想的人事或者生活拥有强烈的向往，在他们的内心深处，通常埋藏着一段失败但又刻骨铭心的情感经历。这一类型的人，其密码最大的可能是使用图腾。\n### 两肋插刀型\n这一类人通常具备很强的领袖气质，而且极度自信，他们通常有很多的朋友，而且非常好动，属于坐久了屁股就会长疮的人，他们隔三岔五就会带一大群朋友回家吃饭或者睡觉，也经常夜不归宿，朋友需要帮忙的时候，他们通常会二话不说地伸出援手，也经常路见不平，他们通常自我意识强烈，很少对人设防。其密码的类型通常不是无脑型就是自己的姓名加上出生年月，且姓名必定是姓氏加名字的全部字母，极少使用简写，顶多加上一两位的防盗码，有时也会使用亲人的信息。\n### 幻想型\n幻想型通常存在于花季少女，这种人的QQ空间、博客和微博通常带有炫目的色彩，通常使用一些童话、神话或幻想世界中才有可能存在的事物，他们追求时尚，爱看偶像剧，常会做出孩子气的行为，对小动物通常非常呵护，有不少人有养宠物的习惯，她们通常家庭条件较好，从小受惯长辈的宠爱，她们内心深处通常非常自私，尽管外表并非如此。这种人的密码类型通常使用图腾，且该图腾一般是某个白马王子的姓名或者生日，或者宠物的名字，或者某种她幻想中的理想事物。\n### 好斗型\n所谓好斗型，并非指表面上爱与人争吵或者打架，而是指表面上不懂声色，但却在暗处与你暗暗较劲的人，例如某次你考了第一名，而他考了第三名，在别人都恭维你，要你请客吃饭的时候，他会找借口不去，或显得心事重重，私底下会更加卖力学习，期望下一次考试超越你。这种人通常自我意识强烈，拥有让人难以忍受的自负，妒忌心也很强。这类人的密码通常与他自己有关，其使用的密码，通常要么包含自己的昵称、姓名、手机号码或生日，也有很大几率使用图腾，且这个图腾极有可能是他在孩提时代或青春期对他成长产生强烈影响的事物。\n### 事业领袖型\n这种人通常也具备很强的责任感，但与责任感型的人相比，他们的责任感的重心更多的放在工作上，他们严格要求自己，更加严格地要求自己的下属和亲人，有时会让人觉得无法忍受，工作起来，这种人是废寝忘食的，当他投入工作的时候，决不允许别人打扰他，说话的时候，一旦被人打断或者听到不想听的话，就会直接质问对方，这种人的密码，很多时候会使用自己的名字或者昵称，且很多时候会使用缩写或者不包括姓氏的名字拼音，或者与他公司或者事业有关的名称或号码，有时也会使用图腾，且该图腾要么是他认为别人绝对意想不到的事物。\n### 完美主义者\n其实每个人或多或少都有完美主义的倾向，对于完美主义倾向比较显著的人来说，他们未必注重自己着装的品位，但是他们会追求有品质的事物；他们崇拜的对象通常都是人格、智力都看上去完美无缺的人；他们的房间通常物品摆放整齐，有时出门走到半路，想起家里某个物品没有摆放好，甚至会跑回来把他放到让自己看起来安心的位置；他们通常喜欢自己整理自己的房间，不喜欢让别人插手，因为，在他们看来，由别人经手的东西都是不完美的；这种人通常严于律己，洁身自好，而且在道德上有种让一些小人难以忍受的优越感；这类人也许也会讲脏话，但在他们内心深处，对纯洁的爱情却极度向往，大多数这方面的男性拥有处女情结，女性则通常向往王子公主式样的爱情。这类人的密码，一旦使用名字，则名字很大几率是全名，或者是某一特定的单词（如love，great等具有美好意义的形容词）加上全名的简称，一旦使用日期则日期通常是20120101这样的格式，很少会选择1211或120101这种格式，一旦使用电话号码，则电话号码通常包含区号，他们手机的电话簿，每个人的人名通常是全名，极少会忽略姓，也很少使用昵称；一旦使用下划线，则下划线的位置通常是能够高度体现对称美的。\n### 现实主义者\n现实主义者体现在思想上，不相信奇迹，他们行为上不容易走极端，但思想上却非常极端，例如，他们相信某个名人的成功是难以复制的，尤其是他身边的人；他们认为官员中没有好官，娱乐圈的女性每个都被潜规则过，有时候和他们交谈，你会忍受不了他们满口的大道理。这类人的密码，一旦使用姓名，通常是简写，日期则以简约型的居多，如果使用下划线，他们对于对称没有什么要求，有时下划线会出现在第一位，字母区分大小写的在这一类型的人中最为常见。\n\n以上八种人格类型，到目前为止，是我所能遇到并总结出来的全部有关密码在性格特征上的分类，在我过往所破解和遇到的密码中，还没有任何一个密码所对应的人群逃得过以上所谈到的情况。另外，从星座的观点来看，还有一些比较有趣的现象，例如，责任感型密码通常分布在天蝎座、射手座、狮子座、处女座上面，洁癖型的密码通常分布在水瓶座、双子座、天蝎座、白羊座和处女座，两肋插刀型则很多分布在白羊座、双鱼座、狮子座和摩羯座上面，幻想型绝大部分分布在双子座、天平座、射手座、水瓶座上面，好斗型则很多分布在白羊座、巨蟹座、天蝎座、处女座和摩羯座上面，事业领袖型则很多分布在金牛座、狮子座、天平座和摩羯座，完美主义者型则大多出现在白羊座、天平座和水瓶座，现实主义者则很多分布在金牛座、巨蟹座、射手座和摩羯座。另外，双子座、双鱼座和天平座最容易使用无脑型密码。双子座和水瓶座使用密码的规律最难以捉摸。\n\n> 上述总结的内容正确与否还有待进一步验证，你也可以从上面找到一种你认为最符合你性格特征的类型，结合你自己的密码进行验证。\n\n# 密码破解案例示范\n## 破解某公司会议室路由器密码\n> 公司信息：  \n> IT行业；  \n> 公司名称两个汉字，全部拼音为10个字母；  \n> 英文简写为4个字母，假设为abcd；  \n> 会议室在16楼，号码已经忘记，以1601作为示例。    \n> \n> 路由器类型：  \n> TP-Link品牌某型号路由器，登录地址为192.168.1.1，不具备无线功能，有线登录时也需要账号密码  \n> \n> 网管人员：  \n> 认识的人，性格有点墙头草，容易左右摇摆；  \n> 一旦跟他说话时语气强硬，对方则深怕会得罪你的样子；  \n> 开会时经常心不在焉，说话有时不着边际；  \n> 做事拖沓，有头无尾  \n\n### 破解过程：  \n首先，分析网管人员的性格特点，由于是IT从业人员，因而通常具备较强的密码保护意识，因而不大可能使用无脑型密码，此外，从此人做事的习惯来看，可看出其对专业服务意识及自我认同度较差，不大可能使用严格的加密法。\n\n其次，上述性格类型的人通常有一种不安全感，因而，其设置的密码不大可能使用他自己的个人信息；此外，做事不认真的人通常有一定惰性，其设置的密码不会太长，八位至十位是最有可能的位数。\n\n其三，由上述两条可以判断，密码使用最大的可能要么是公司名全部拼音的10个字母，要么是英文缩写的简单重复或者英文缩写加上1601，也有可能是房间好的简单重复；进一步分析，此网管头脑简单，通常他宁愿使用16011601这样的序列，也不会有那心情去对后面的那个1601进行倒序。\n\n最后，账号名通常会使用约定俗称的字母组成，且很可能是4位到6位，所以，账号很大可能是公司简称abcd。\n\n### 最终结果：\n> 账号：abcd  \n> 密码：16011601  \n\n### 从密码逆推网管人员的性格：  \n平时对其印象完全正确，此人可做朋友，因为他没有什么心机，不会害你，但不可共事，因为缺乏责任感。日后项目重要节点的相关事项尽量不能托付给他，即使不得已托付此人，也必须保持高度警惕，不时跟进。然而，非常遗憾的是，最后关头我依然险些栽在此人手里，那是为了校对数据，由于当时系统有多个平台，而校对数据必须在真实平台上进行，在校对前，我特意向他用邮件和电话确定真实平台地址，后来安排了自己公司和合作单位的20几个人校对了整整一天，最后还是发现此人给我的地址是个测试平台地址，气得老子当着公司和他们公司领导的面狠狠地耍了一回酷，不过气归气，工作却得从头再来，于是只好一边找了10几个人，说了半天的好话，熬到半夜两点多才把所有数据校对完毕，91ri.org庆幸总算没有拖慢项目进度！\n\n---\n\n## 破解某同事个人密码\n> 对象个人信息：  \n> IT公司中层经理，多个项目参与者及主要负责人；  \n> 做事认真，有条不紊，名牌大学毕业；  \n> 为人圆滑、精明——应该说我很少遇到这么聪明的人；  \n> 对自己的业务能力极度精通，在公司人称“鬼才”；  \n> 性格平和，对下属非常宽容，经常面带微笑，拥有很强的人格魅力；  \n> 思维严谨，经常看有关人性和数学方面的书籍\n\n### 破解过程：\n首先，由于此人从属于IT行业，加上拥有很高的智商，因而通常拥有很强的密码保护意识，绝不可能使用无脑型密码——应该说，觉得他会使用无脑型密码就是对他智商的侮辱。\n\n其次，他也不大可能会在密码中透露自己的个人信息和爱人的身份信息，使用广州家里的电话号码，办公室号码和手机的可能性也不大，除非是老家的电话号码。\n\n再次，由于其强烈的密码保护意识，他的密码通常会比普通人的要长，有可能会达到13位以上。\n\n再次，最大可能是此人会使用“图腾”，由于其思维的严密性，喜欢数学，空间思维能力较强，会比较注重对称美，加上强烈的密码保护意识，很有可能会使用下划线，并且下划线的位置会高度体现对称美。\n\n再次，其使用的图腾极有可能是很多人平时容易忽略的常识性意象物，并且很有可能与其爱好有关，这时候一个意念物在我脑中一闪而过——圆周率π！印象中第一次接触这个常数倒不是在数学课，而是在历史课上，现在依然记得老师跟我们吹嘘的中国历史，还记得祖冲之以及“3.1415926至3.1415927之间”这句话。的确，对于一个酷爱数学的人来说，如果在数学世界里采用某个常数作为密码的意象物，还有什么比这个东西更合适的？——既是圆身上的东西，本身就是完美的象征，同时其通常被记住的位数是8位，在长度上也非常符合密码使用的习惯。\n\n最后就是组合了，小数点很有可能会采用下划线或者p(point)代替，首选3.1415926，这其实是一个无限循环的数字，而无限的符号我们知道，是一个横着写的8，对于高度注重对称美的数学爱好者来说，很可能会在数字和无限之间进行一下区分，于是，我首先想到的两个密码是3_1415926_8还有3p1415926_8，用其邮箱进行验证，结果均失败，数一下长度，只有11位，而且第一个还没有字母，而前面说过，通常使用下划线的人密码保护意识是很强的，通常使用了下划线，那么，其密码很可能包括数字和字母——字母嘛，首先想到的当然是他的名字缩写，为了不透露他的个人隐私，假设他叫张三好了。最后，当我破解了他的密码的时候，我差点兴奋得跳了起来，足足高兴了几天，连睡觉都合不拢嘴！女朋友很好奇问我为什么这么高兴，我一直都是笑而不语！\n\n### 最终结果：\n> 密码：zs_3_1415926_8\n\n### 从密码逆推此君的性格：\n此人对自我要求很高，有强烈完美主义倾向——从使用圆周率作为密码并且密码体现高度对称美可以看得出来；其次，此人自信但不自负，如果非常自负，那么，他完全没有必要在在最前面使用自己的姓名，因为通常来说很少有人会想到用圆周率这种意象物作为自己的密码，自负的人会认为使用圆周率已经足够；这种人通常胸怀宽广，能接受别人的意见或者建议，经常会反躬自省自己的错误并予以改正，生活中，他会是一个良师益友，工作上，他会是给力的伙伴，既可深交也可共事。但是，其缺点是做事一旦关乎自己，有时候会过于追求完美，从其密码所使用的下划线高度体现对称可以看得出来，这种人打工迟早会成为一个优秀的项目管理人或高层经理，但是，开拓自己的事业却不容易打破常规。\n\n不管怎样，在工作过程中我一直与此君相处得很好，从来没有红过脸，对我这个脾气暴躁的人来说这是甚为难得的，很大一部分原因我想是源于我对他发自内心的尊重，甚至当我知道了他的密码以后，一直以来还带着深深的负罪感和愧疚感，因而都很少联系他了！\n\n---\n\n## 破解某邻居的QQ密码\n> 对象个人信息：  \n> 85后，男性，每天都见面，每次见面时都会彼此很客气地打招呼，聊过几次天；  \n> 聊天过程其发音非常清楚，说话偶尔会骂两句，说话简洁，非常富有条理性，极少包含“那个”，“然后”这种潮汕人俗称“话屎”的词语；  \n> 他对社会上的一些现象非常强烈的反感；  \n> 眼神清澈，给人的感觉非常阳光，健康；  \n> 有时爱与我聊中国古文化，西方启蒙时期的哲学与思想，并且一聊起来双眼发光，极其兴奋。\n\n### 破解过程：\n首先，聊天时知道了他的出生年份1987年，同时还知道了他的名字，假设为“李四”，还知道他出身于农村。\n\n其次，眼神清澈，而且一见面就愿意向你敞开心扉讲心里话的人通常涉世未深，通常缺少防范意识，这类人的密码保护意识通常也比较差，猜测其密码有可能是姓名加上出生年月日的组合。\n\n再次，说话条理清晰，不带任何“话屎”，而且喜欢聊哲学，这让我想起我的很多射手座朋友，以次推断他可能属于射手座。\n\n再次，射手座生于每年的11月23日——12月21日，尝试用他的名字拼命lisi加上19871201这样的组合进行测试，尝试大约三十次全部失败。\n\n突然，我想得他来自农村，父母在80年代那个时候，极有可能仍在使用农历，因此，注册他身份证的时候，很有可能跟我一样采用农历，上网用万年历查下1987年阳历11月23日——12月21日这段时期所对应的农历日期，对应的农历时间段是10月初三至11月初一。\n\n### 最终结果：\n> 密码：lisi_19871011\n\n### 从密码逆推此君的性格：\n此君懂得使用下划线，说明他还有一定的密码保护意识，但是，从其使用自己姓名加上生日这一点可以判断他社会经验缺乏，应该较少与社会上的人接触，应该是宅男一类的人，工作不可能是销售类和管理类，很有可能是技术类。这种人通常比较爱交朋友，也非常值得交往，是那种你有万贯家财，到了重要的时候都可以放心托付给他一类的人。后来与他进一步的交往中一步步印证了我的论断。\n\n# 个人密码加密建议\n需要使用密码的场合通常是银行的账号，其他的绝大多数则通常是上网的各种邮箱、某些客户端软件、或者论坛的登录密码。绝大多数人上网时候都会使用一个固定的密码，而且基本上没有修改密码的习惯，因此，只要你在某个论坛的密码一旦泄露，那么，很可能你的所有邮箱、游戏账号等密码都会被人家一锅端。\n\n存在这种现象其实很容易理解，就是因为人的惰性，而且现在的网站那么多，如果针对各个网站去设置不同的密码，对于很多人来说，几乎是不可能完成的任务，因为这样你不仅需要记忆几十个甚至上百个密码，还必须记忆各个密码与各个网站的对应关系。\n\n其实，有一种办法可以保证你的密码可以随着不同网站而进行变换，同时又不需要记忆对应关系的。以下就以这种方法作为切入点，对大家的密码设置提供一些建议，这种办法我们不妨命名为“随机有据字符加固定序列密码”。\n\n---\n\n## 随机有据字符加固定序列密码\n这个名词拥有三个关键词——随机、有据、固定。先说“固定”，固定就是指你经常使用的密码，在你每个密码中都会出现的一个字符段，假如你已经用惯了某个密码，并且这个密码你把他用在绝大多数的地方，那么，就以这个密码作为固定序列，放在你新密码之中；所谓“随机”，指的是你设置的时候事先并不知道要设置什么样的字符，而是根据不同的网站或客户端进行变动，但是，其变动是有规则的，这个规则是你自己定的，而且不会让任何人知道；所谓“有据”，这个根据，则与网站的某一种要素挂钩，我推荐使用网站的名字，目的是方便你自己的记忆。以下我举个例子，你就会很清楚地理解这种所谓的“随机有据字符加固定序列密码”的特点了。\n\n假如你以往所常用的密码是qwert123，那么，在你的新密码中，同样保留这个字段，现在你自己定义这样一种规则：以网站的名称作为依据，登录任何一个网站，就以其名称作为参照物，截取其名称的第一个字母（或数字）和最后一个字母（数字），分别放在固定密码段的开头和结尾。例如：上新浪网，其名称为sina，那么，分别截取s和a，添加在你的固定密码组开头和结尾，那么，你在新浪上的密码就是sawrt123a；如果是迅雷的客户端，取其网站名Thunder的首字母t和最后一个字母r，这样你的迅雷地址就变成了tawrt123r，由于多了这样一层保护，那么，即使你的新浪微博密码丢失了，那么，别人也不容易用这个密码来盗取你的迅雷账号、qq号码，而且由于这种密码命名规则简单，你完全可以照用你原来的密码段，不用去修改密码输入的习惯。\n\n上述的命名规则完全由你自己来定，除了那种截取头尾的规则以外，还可以这样：截取网站名的首个字母或数字，同时数一下这个网站名的位数，如果是奇数，字母取大写；如果是偶数，字母取小写，将它加到你固定密码组的开头或者结尾；如果截取到的是数字，那么，同样数一下网站名的位数，如果是奇数，那么保留这样一个位数，如果是偶数，则将其双写，加到你的固定密码序列上。示例：sina，baidu，163和2144，sina包含4个字母，所以截取第一个字母的小写s；baidu是5个字母，于是截取其第一个字母的大写B；163是3个字符，于是取其第一个数字1,2144是4个字符，于是取其第一个数字的复写22，添加到你的固定密码组上，于是，你的新浪密码是sqwert123，百度密码则变成了Bqwert123，网易邮箱变成了1qwert123,2144网站的密码则变成了22qwert123。\n总之，怎么组合就看你自己考虑了，但随机段截取的规则一定要清晰可行，并且自己要牢记，而且随机字段包含的信息越少越好，太多未必能保护自己的密码，相反更容易让有心人发现规律。\n\n## 关于固定字符段的建议\n- 坚决不使用自己证件上所能查看到的信息，包括生日、证件号码、姓名及其缩写等等，同样也坚决不使用爱人和孩子的同类相关信息。更不要使用无脑型密码。\n- 可以使用电话号码，但是电话号码尽量使用老家的电话号码，并且对该电话号码添加或者减少一至两位的防盗码。\n- 可以使用爱人的昵称，但这个昵称最好是只有你和对方彼此知道的，尤其是互相吹枕头风的时候才使用的那种称谓。\n- 对于银行卡密码，如果你非要向爱人表达爱意，也可以使用你们的结婚纪念日或者其生日，但是一定进行诸如倒序、移位、加码等相关操作。例如：你们的结婚纪念日是2012年7月5日，你非要使用201275或者120775这样的数字，用倒序的观点，就成了572102和577021,；用移位的观点，不妨设置成720125或者071275；用加码的观点，可以是只加一位，变成201276和120776，也可以每位加1，312386,231886，什么规则由你自己选择，关键是你自己要容易记住，而别人又难以看懂。不要小看这种简单的操作，它很可能就是防止你密码泄露的关键。\n- 不需要考虑对称美，密码又不是让人看的，相反是见不得光的，见不得光的对称只能是孤芳自赏，因而，建议你采用下划线或者数字的时候，将其打乱之后插入字母中，最好其结构是一旦写出来会让人看着很别扭的那种——看着越别扭的密码越是好密码，相信我没错的！\n- 强烈建议使用图腾，因为那是你内心深处的东西，有时候即使是你最亲密的人都未必真正了解你内心深处在想什么，陌生人更加难以猜测。\n- 某些字母和数字之间由于形很相似，因而，当你需要使用数字时，不妨用字母进行一下伪装，反之亦然。包括1和l，2和z，6和b，8和B，9和q，0和o。\n- 没有必要定期修改你的固定字符段，那个意义不大，相反很可能会很容易就把自己弄晕，当然前提是你能做到上述提到的那些密码规则。\n\n## 关于安全问题的建议\n现在有很多网站尤其是论坛，为了所谓的安全性考虑，用户注册时通常会要求设置安全问题，以我自己的经验来看，那几乎是毫无作用的，这些安全问题通常会让你从8个左右的问题选择一个进行回答，很多人为了简单易记，通常会选择生日，这本来是没有什么问题的，问题在于电脑是没有智能的，它没有所谓的时间概念，相反，却有严格的格式概念，例如：某人生日是1980年1月1日，对于人来说，当某人问起你生日的时候，无论你是回答1980年1月1日，还是80年元旦，亦或是800101，都是一个概念，这个概念指向同一个目标，这个目标就是时间。然而对电脑来说，这几个却是完全不同的概念，对于电脑来说19800101与8011有着极大的差别，因而，有可能一些不同网站问你的是同一个问题，但是你在回答的时候却使用了不同的格式，这样注册多了，最后很可能连你自己都搞混了，有时候甚至会导致你自己连密码都修改不了。\n\n因而，我的习惯是除非网站指定安全问题为必填，否则我一律不填，如果填的话，我会随便选择一个问题，并且任何网站的任何安全问题，我都使用同一个标准格式，以前我使用的是“关你鸟事啊”，电脑问我你小学上那所学校啊？你爱人叫什么名字？我都一律回答“关你鸟事啊”——本来我怎样就不关你电脑你的事，还不是“关你鸟事”吗？！\n","source":"_posts/密码破解与心理学.md","raw":"---\ntitle: 密码破解与心理学\ntypora-copy-images-to: 密码破解与心理学\ndate: 2021-11-25 17:04:51\ntags:\n---\n\n# 十大基本规律\n1. 绝大多数人都高估了破译密码的难度和低估了自己密码存在的风险，因而，往往把能够破解密码的人当成神秘人物，同时基本很少有修改自己密码的习惯。\n2. 绝大多数人一生常用的密码通常不会超过3个，如果你破解了某人的QQ密码，很可能你也破解了他的论坛密码、邮箱密码、游戏账号密码……\n3. 从性别上看，男性的密码比女性的要更加难破；从年龄层面上看，年轻人的密码比35岁以上的人群的密码更加难破；从受教育层度上看，大专以上学历的人群相对于以下学历人群，密码破解难度更大，且大专、本科、硕士学历的人群密码破解难度基本上没有什么区别；从专业角度上看，理科生的密码比起文科生要难破一些，计算机相关专业的学生密码破解难度最大。\n4. 绝大多数人的密码，基本上都是有确定含义的，随机乱码组成的密码极度罕见（应该说我从来没有遇到过，不过如果是这种密码，我这种基于心理的思路，可以确定毫无办法）。\n5. 大多数人的密码要么纯粹用数字组成，要么纯粹用小写字母组成，要么用数字加字母组成，只有很少人会采用下划线，极少数的人字母区分大小写。\n6. 密码所采用的字母中，很多都是姓名拼音、名字拼音的全部或首字母缩写，某一图腾的英文单词（通常是名词）——图腾的含义后面会提到，某一单位名的首字母缩写，以及某一地名的拼音或英文及其缩写。\n7. 密码所采用的数字中，很多有关日期，且该日期对密码所有人拥有极其重要的意义，还有很多与地名和电话号码有关。\n8. 使用下划线的密码，下划线通常只出现一次，一般这类密码的主人密码保护意识很强，其密码往往还包含数字和字母，这种密码的下划线的位置通常处在数字和字母的分隔处；字母区分大小写的密码，大写通常只出现一次，并且很多时候都出现在密码的开头，极少数出现在结尾。\n9. 除非所登录系统有严格的位数限制，否则密码的位数通常是8位到11位，7位以下的密码和12位以上的密码较为少见。\n10. 公共网络的密码通常很少包含个人信息，大多数是单位名称的全部或某一部分的中文或英文全称，或者英文或拼音的首字母缩写，外加拥有特定含义的数字，这种数字通常是电话号码或者门牌号，另外，有些密码是上述特定字母或其缩写的简单重复，如：12341234、abcabcabc；个人密码则很少出现上述简单重复的情况。\n\n# 十大规律隐含的心理学特性\n## 惰性\n从上述很多条规律都可以看出人或多或少存在惰性，比如很少人会定期修改密码；再如很少人密码会区分大小写，因为这样的话必须进行至少一次大小写切换；再如各种不同账号使用同一密码都是人存在惰性的有力证明。\n\n## 自我意识\n自我意识很多时候体现在使用名字的密码上，通常，自我意识较为强烈的人，很看重自己的名号或者名誉，因而，其密码一旦使用自己的名字，往往就是名字的全拼，较少使用缩写，更不会省略自己的姓氏，另外，这类人也有很大一部分使用的是某一图腾的英文单词，例如某人非常崇拜某一偶像，那么，这个偶像就是他的图腾，其密码很有可能与这个图腾有关。\n\n## 自我保护意识\n从公用密码很少包含个人信息这一点很容易印证自我保护的问题，一般来说，当某一网管或其他特定工作性质的人需要为某公用账号设置密码时，首先需要考虑的是密码易为别人所理解和记忆，然而，一个人在考虑秘密之类的东西时，首先联想的是他自己身上的东西，由于这些东西涉及其个人隐私，因而很容易被他的潜意识所排除。\n\n## 爱与责任感\n不少人的密码会使用伴侣和孩子的姓名或生日、结婚纪念日、自己公司成立日期等诸如此类的信息，这很明显地体现了爱和责任感。\n\n## 完美主义倾向\n完美主义倾向在密码中主要体现在对称与平衡上面，这从名字加日期的组合式密码和带下划线的密码可以很容易看出来，例如，某人叫做张三，生日是1980年1月1日，那么，如果采用前者，其密码往往是zhangsan19800101或者zhangsan8011，不大可能设置成z1h9a8n0g0s0a1n01这种类型；如果使用下划线密码，则很大可能会采用zhangsan_19800101或者zhang_san_19800101，不大可能采用_zhangsan19800101或者z_hangsan19800101这种类型。\n\n# 常见的无脑型密码\n所谓无脑型密码，指那种破解起来没有任何技术含量，纯粹依靠运气就可以破解的密码，这种密码通常为公用，其结构很多时候为：某一数字的简单重复，某一简单规则的数字序列，某一简单规则的字母序列，按某种简单规则组合的数字和字母序列，以上四种密码有以下一些典型例子：01223456789,1234567890,123123123,12341234,0987654321，13579824680。\n\n或者这样：qwertyuiop，abcabcabc，abcdabcd，abcdefg,八个8,八个6，八个1，八个0，八个或者九个9，abcd1234,abc123abc123,abcd4321，所在城市区号的简单重复，等等。\n\n这种无脑型密码常见于公用的网络或者邮箱账号，尝试破解公共密码的时候，通常优先选用以上提到的这些密码进行尝试，在北京的时候，我用qwertyuiop破解了一次路由器的密码，来到潮州之后，第一次用1234567890破解了一次密码，后来才知道是同事手机网络的密码，现在用的网络是邻居的，密码是8个8.\n\n## 公共网络的路由器密码破解法\n其实从严格意义上来讲，只要接了路由器，那么，其网络必定是共享的，因而只要接了路由器的网络，都可以看成是公用网络，区别在于公用的程度，一般来说，从公用的程度来讲，路由器可以分为四类：公共场所、公司、公租房、家庭，其中公用程度越高，密码破解难度就越低。\n\n## 公共场所的路由器密码破解法\n公共场所通常包括旅馆、饮食场所、网吧、商场等人流量大，人群确定但身份群不稳定的场所，这种场所的网络基本上不会包含任何个人信息，且大多数密码都是无脑型密码，此外最常见的密码是以下几种：\n\n- 场所名称的拼音或英文的简单重复\n- 场所门牌号的简单重复或前半部分为门牌号，后一部分为门牌号的倒序\n- 场所名拼音或英文加上场所所在门牌号或分店号\n- 场所预约电话、送餐电话或400免费服务电话\n- 场所名拼音或英文加上4位到6为无脑型密码\n- 场所门口某路公交车号码的简单重复\n  \n> 总的来说，很多的场所是不设置密码的，设置密码的作用也不大，其设置密码的目的通常是防止临近商家或住户的盗用，但只要这些用户稍微花点心思，则获取密码易如反掌。\n\n## 公司路由器密码破解法\n如果你在搜索网络的时候，搜索到网络名为4位以上的大写英文字母的，这种网络很有可能是公司网络，其密码的组合通常非常简单，除了以上提到的无脑型密码以外，很有可能采用如下几种形式。\n\n- 公司名拼音或英文的简单重复，如中国移动，其某一门店的哦网络有可能是zgydzgyd，或者chinamobile\n- 公司门牌号的简单重复或者前半部分为门牌号，后一部分为门牌号的倒序，例如某公司位于某栋大楼的1606室，那么其密码有可能是16061606或者16066061\n- 公司前台电话号码，有时还会加上公司所在城市的区号\n- 公司名拼音或英文加上公司门牌号\n- 公司名拼音或英文加上某一4位到6位的无脑型密码\n- 公司名拼音或英文缩写加上电话号码或电话号码的最后4位\n\n> 总之，公司的网络由于用的人多，所以，其密码包含的较难记住的信息越少，破解难度是非常低的，只要有耐心多尝试几次，一般来说，都不难破解，至于公司的名称、门牌号码和电话号码如何获得，这个我想只要你在一些写字楼上过班，都不用我来教你。\n\n## 公租房路由器密码破解法\n这里所谓的公租房，是指来自不同地方彼此不认识的人或者彼此要好的同学、朋友、同事一起租住的房子，包括大学宿舍，职工宿舍，同时还包括彼此独立租房，但共用一个网络的用户群。\n\n公租房的密码类型已经或多或少接近于家庭密码，但由于成员关系不如家庭那么亲密，因而，其包含的个人信息依然较少，破解的成功率依然较为可观。除了上述提到的无脑型密码以外，公租房的密码通常还有以下几种类型：\n\n- 所在小区名或楼层名拼音的全部或者拼音简写的简单重复，例如“金碧花园”用户，其密码就有可能是jinbihuayuan或者jbhyjbh\n- 房号或者楼号加房号或其简单重复，或者前一部分为房号，后一部分为房号的倒序，例如我在北京时候住在某栋小区的2号楼2单元1202房，我为租用我网络的用户设置的密码就是12022021；同时，尝试过登录邻居路由器的时候，住在1201的公租房用户，其密码为12011201；住在11楼3号房的用户，其路由器密码为02021103。\n- 小区名的简写加上房号，例如，我在北京住的小区名为华龙美晟，搜到我楼下2号房的用户，其路由器密码为hlms1102。\n- 宿舍电话号码或者前面加上区号，例如，广州某大学宿舍的电话号码为61306325，那么，其密码有可能就是61306325或者02061306325.\n- 公租房用户都要经常用到的某一电话号码，例如送水电话，送煤气的电话，送餐电话，等等。\n\n## 家庭路由器密码破解法\n家庭密码在这四类密码中间，相对来说是最容易破解的，因为大家彼此都很亲密，因而，这类密码通常包含了不少家庭方面的信息，不过，从人性的角度来将，再亲密的人彼此之间也是存在隐私的，因而，这类密码通常不会包含真正内心深处的隐私，因而，相对于个人密码来讲，其破解难度要低得多。\n\n不少的家庭路由器密码依然使用上述的无脑型密码，另外一些则具备公租房密码的特点，以上这些都不再赘述，下面谈谈家庭路由器密码相对于公租房密码所不具备的特点及其破解方法。\n\n- 家庭姓氏拼音的简单重复，这种常见于姓氏拼音4个字母以上的家庭，如张、周等，而像李、林一类的姓氏，这种方式就要少见得多。另外，有趣的是，以姓氏进行简单重复的密码，其首字母通常会采用大写，有的甚至是遇到第一个字母就大写一次的现象，例如某一姓张的家庭，其密码有可能会采用Zhangzhang或者ZhangZhang的格式。\n\n- 家庭所居住的房屋的电话号码或者区号加上电话号码，这类密码有时候家庭会出于安全考虑，在电话号码最后会加上一位到两位防盗码。例如，某家庭的电话号码是81008100，那么其路由器密码有可能会是810081000，最后一个0就是防盗码。\n\n- 老家的电话号码，这是我阅读上面提到的那份资料所发现的一个密码规则，当时我发现有几个人采用这种类型的密码，其中一个人注册资料填写的寄件地址是北京，而户籍地址是河北某县的，而其密码以0开头，看起来像一个电话号码，因而上网查找，果然发现这个密码的前面几个数字与其户籍地址所在的县城区号相对应，因而断定这是一个老家的电话号码，尽管这属于个人密码，但是由于老家的电话是家庭成员所共知的，因而完全有可能被用作路由器密码。\n\n- 家庭姓氏的拼音加上电话号码或者手机号码。\n\n以下几条是我认为可能存在的规则，但是由于之前破解的过程没有相关的信息，因而没有经过验证的，一并提出来供大家参考。\n\n- 夫妻两个人的姓氏加上结婚纪念日，有可能是两个姓氏连在一起，后面加上结婚纪念日；也有可能是两个姓氏分别放在两端，结婚纪念日放在中间。\n- 第一个孩子的姓名、小命加上孩子生日。\n- 父亲或者母亲的生日。\n- 夫妻之间妻子的姓名，丈夫私底下对其的爱称加上妻子的生日。这一条是有性别的分工所决定的，因为通常涉及电脑的东西，男性懂得会更多，因此借此机会向配偶表达一下爱意是完全可能的。\n- 家里养的宠物的名字加上某一特定含义的数字。\n\n> 总之，只要你掌握足够的信息，通过这上面已经经过验证和没有经过验证的几条规律，就有极大的可能破解人家的路由器密码。\n\n以上就是几种人群分布所在网络的路由器密码破解的主要内容，而有的时候，破解密码甚至都不需要用到以上的方法，因为路由器通常也就是那么几个品牌，而很多品牌的路由器地址都是固定的，例如TP-Link及其他很多品牌的很多型号使用的地址是192.168.1.1，像腾达则很多使用192.168.0.1，而各大品牌的路由器的默认初始登录账号和密码都是admin，偏偏很多人又不会操作，有的即使懂得操作也不愿意去修改路由器的登录密码，因而有时候你可能很轻松的就进入人家的路由器去进行诸如设定固定IP、修改流量、重启路由器等操作。如果你搜索某个网络的网络名是诸如Tenda，TP-Link_2D18FA这样的含有品牌名的网络，那么，很有可能他的路由器登录密码也是没有修改的，只要你懂得路由器怎么操作，那么，这种网络是很容易就突破了。\n\n## 基于性格分析的个人密码破解法\n### 个人密码常用的组成要素\n- 自己姓名、伴侣姓名、孩子姓名的拼音或其缩写。\n- 自己生日、伴侣生日、孩子生日、父亲或母亲生日、自己公司开张纪念日、结婚纪念日、某个亲人的忌日等对密码主人有特别重要意义的日期。\n- 家庭电话号码、老家电话号码、个人手机号码、爱人手机号码。\n- 身份证、房产证、驾驶证、自己公司的经营许可证、营业执照等证件的号码或其号码段。\n- 与自己所追求或崇拜的事物有关的事物（即：图腾）的名称或日期。\n- 自己、亲人、宠物、图腾的昵称。\n- 爱人或者某一图腾的名称（通常是简称），加上1314（一生一世）或者5201314（我爱你一生一世）这样拥有谐音特性的数字串。\n\n# 图腾\n“图腾”体现在现代人的精神世界里，很多的时候是爱、理想、人格参照物等美好事物的象征。其一般意义通常与宗教或者原始崇拜有关，而宗教之所以能够一直存在，很大程度在于其能直达人类的内心深处，密码“密”的特点与图腾的这种特点很容易就能够互相结合，因而，与图腾相关联的一些事物，很容易被人们选作密码的载体。\n\n在密码中，常见的图腾通常有以下几种：\n\n- 初恋对象的名字拼音或其缩写，或者昵称的英文，初恋对象的生日或与初恋各种第一次的日期，与初恋对象有关的事物，例如某只宠物的名字、第一次约会的地点。\n- 某个特别崇拜的人物的姓名、外号或者生日、忌日。\n- 某个特别向往的地方的名字，包括发誓一辈子无论如何要去一次的地方或者故乡。\n- 某个特别向往的神话人物或一种与一种理想生活有关的事物，例如：乌托邦（Utopia）。\n- 某个童年时期对自己影响极深的人物的名字或者事物的名称，例如：电影《公民凯恩》中，凯恩至死都念念不忘的“rosebud”，如果凯恩生在现代，那么，我刚说他的密码百分之百会包含这个单词。\n\n## 不同人格类型的人群使用密码的习惯\n由于各自使用的标准不同，古今中外各种心理学家和人物学家，对于人群的分类方法可谓千差万别，例如：儒家通常会将人分为圣人、君子、小人，三国时期的刘劭则将人按才的不同分为英、雄、俊、杰，中国的命理学更是将人按照生辰八字的结合分出“财官双美格”、“食神生财格”等多种类型，而“阴阳二十五人”分类法则将人按照五行体现的气质将人分为二十五类；西方心理学有按星座进行区分的，还有按照九型人格进行区分的，而像弗洛伊德则将人的思想分为有意识和无意识两种，施普兰格尔则把人格分为理论、经济、艺术、社会、政治、宗教6种类型……\n\n由于理论基础不一样，因而其分类方法就不一样，对于密码来说，上述无论任何一种理论所提供的分类方法都难以能够和该人群的密码使用习惯一一对应，因而，下面我将结合自己的经验以及自己的思考，对不同类型的密码所对应的人群进行分类。\n\n---\n\n由于自己过往破译的密码并不算太多，而阅读过的那份材料所涉及的人又全部素未谋面，加上我并没有学过系统的心理学课程，因而，以下的分类方法未必科学，难免会遗漏某些人格类型，同时，也缺乏统计学意义上的证据作为支撑，因而你不妨把他看成是一种无稽之谈。需要特别指出的是，以下分类所涉及的人群，并没有严格的界限，有很多人同时兼具不同的性格特点，因而其密码也会同时拥有各自的特点。\n\n### 责任感型\n责任感通常来源于自信以及对家人强烈的爱，这种人通常在社会上比较成功，对社会现象有特定的判断标准，且其看法不容易为别人所动，体现在生活习惯上，他们选择工作时通常比较谨慎而且目标明确，日常生活较为单一，除了工作以外，他们会花很多的时间陪家人，赚来钱通常花在家人身上或者交给爱人保管。这种人群的密码通常包括以下的要素：爱人的姓名、昵称或生日，结婚纪念日，孩子的姓名、昵称或生日，老家的电话号码，父亲或母亲的生日。\n### 洁癖型\n此处指精神意义上的洁癖，这种人的思想中存在一个特定的界限，这个界限是无论自己还是别人都不允许逾越的禁区。这种人要么特别成功，要么整天抱怨；要么像个外交家，要么极度孤僻；同时他们别人的某些行为或者社会想象拥有常人所难以理解的评判标准，这种人的自我意识通常很强，而且对某种理想的人事或者生活拥有强烈的向往，在他们的内心深处，通常埋藏着一段失败但又刻骨铭心的情感经历。这一类型的人，其密码最大的可能是使用图腾。\n### 两肋插刀型\n这一类人通常具备很强的领袖气质，而且极度自信，他们通常有很多的朋友，而且非常好动，属于坐久了屁股就会长疮的人，他们隔三岔五就会带一大群朋友回家吃饭或者睡觉，也经常夜不归宿，朋友需要帮忙的时候，他们通常会二话不说地伸出援手，也经常路见不平，他们通常自我意识强烈，很少对人设防。其密码的类型通常不是无脑型就是自己的姓名加上出生年月，且姓名必定是姓氏加名字的全部字母，极少使用简写，顶多加上一两位的防盗码，有时也会使用亲人的信息。\n### 幻想型\n幻想型通常存在于花季少女，这种人的QQ空间、博客和微博通常带有炫目的色彩，通常使用一些童话、神话或幻想世界中才有可能存在的事物，他们追求时尚，爱看偶像剧，常会做出孩子气的行为，对小动物通常非常呵护，有不少人有养宠物的习惯，她们通常家庭条件较好，从小受惯长辈的宠爱，她们内心深处通常非常自私，尽管外表并非如此。这种人的密码类型通常使用图腾，且该图腾一般是某个白马王子的姓名或者生日，或者宠物的名字，或者某种她幻想中的理想事物。\n### 好斗型\n所谓好斗型，并非指表面上爱与人争吵或者打架，而是指表面上不懂声色，但却在暗处与你暗暗较劲的人，例如某次你考了第一名，而他考了第三名，在别人都恭维你，要你请客吃饭的时候，他会找借口不去，或显得心事重重，私底下会更加卖力学习，期望下一次考试超越你。这种人通常自我意识强烈，拥有让人难以忍受的自负，妒忌心也很强。这类人的密码通常与他自己有关，其使用的密码，通常要么包含自己的昵称、姓名、手机号码或生日，也有很大几率使用图腾，且这个图腾极有可能是他在孩提时代或青春期对他成长产生强烈影响的事物。\n### 事业领袖型\n这种人通常也具备很强的责任感，但与责任感型的人相比，他们的责任感的重心更多的放在工作上，他们严格要求自己，更加严格地要求自己的下属和亲人，有时会让人觉得无法忍受，工作起来，这种人是废寝忘食的，当他投入工作的时候，决不允许别人打扰他，说话的时候，一旦被人打断或者听到不想听的话，就会直接质问对方，这种人的密码，很多时候会使用自己的名字或者昵称，且很多时候会使用缩写或者不包括姓氏的名字拼音，或者与他公司或者事业有关的名称或号码，有时也会使用图腾，且该图腾要么是他认为别人绝对意想不到的事物。\n### 完美主义者\n其实每个人或多或少都有完美主义的倾向，对于完美主义倾向比较显著的人来说，他们未必注重自己着装的品位，但是他们会追求有品质的事物；他们崇拜的对象通常都是人格、智力都看上去完美无缺的人；他们的房间通常物品摆放整齐，有时出门走到半路，想起家里某个物品没有摆放好，甚至会跑回来把他放到让自己看起来安心的位置；他们通常喜欢自己整理自己的房间，不喜欢让别人插手，因为，在他们看来，由别人经手的东西都是不完美的；这种人通常严于律己，洁身自好，而且在道德上有种让一些小人难以忍受的优越感；这类人也许也会讲脏话，但在他们内心深处，对纯洁的爱情却极度向往，大多数这方面的男性拥有处女情结，女性则通常向往王子公主式样的爱情。这类人的密码，一旦使用名字，则名字很大几率是全名，或者是某一特定的单词（如love，great等具有美好意义的形容词）加上全名的简称，一旦使用日期则日期通常是20120101这样的格式，很少会选择1211或120101这种格式，一旦使用电话号码，则电话号码通常包含区号，他们手机的电话簿，每个人的人名通常是全名，极少会忽略姓，也很少使用昵称；一旦使用下划线，则下划线的位置通常是能够高度体现对称美的。\n### 现实主义者\n现实主义者体现在思想上，不相信奇迹，他们行为上不容易走极端，但思想上却非常极端，例如，他们相信某个名人的成功是难以复制的，尤其是他身边的人；他们认为官员中没有好官，娱乐圈的女性每个都被潜规则过，有时候和他们交谈，你会忍受不了他们满口的大道理。这类人的密码，一旦使用姓名，通常是简写，日期则以简约型的居多，如果使用下划线，他们对于对称没有什么要求，有时下划线会出现在第一位，字母区分大小写的在这一类型的人中最为常见。\n\n以上八种人格类型，到目前为止，是我所能遇到并总结出来的全部有关密码在性格特征上的分类，在我过往所破解和遇到的密码中，还没有任何一个密码所对应的人群逃得过以上所谈到的情况。另外，从星座的观点来看，还有一些比较有趣的现象，例如，责任感型密码通常分布在天蝎座、射手座、狮子座、处女座上面，洁癖型的密码通常分布在水瓶座、双子座、天蝎座、白羊座和处女座，两肋插刀型则很多分布在白羊座、双鱼座、狮子座和摩羯座上面，幻想型绝大部分分布在双子座、天平座、射手座、水瓶座上面，好斗型则很多分布在白羊座、巨蟹座、天蝎座、处女座和摩羯座上面，事业领袖型则很多分布在金牛座、狮子座、天平座和摩羯座，完美主义者型则大多出现在白羊座、天平座和水瓶座，现实主义者则很多分布在金牛座、巨蟹座、射手座和摩羯座。另外，双子座、双鱼座和天平座最容易使用无脑型密码。双子座和水瓶座使用密码的规律最难以捉摸。\n\n> 上述总结的内容正确与否还有待进一步验证，你也可以从上面找到一种你认为最符合你性格特征的类型，结合你自己的密码进行验证。\n\n# 密码破解案例示范\n## 破解某公司会议室路由器密码\n> 公司信息：  \n> IT行业；  \n> 公司名称两个汉字，全部拼音为10个字母；  \n> 英文简写为4个字母，假设为abcd；  \n> 会议室在16楼，号码已经忘记，以1601作为示例。    \n> \n> 路由器类型：  \n> TP-Link品牌某型号路由器，登录地址为192.168.1.1，不具备无线功能，有线登录时也需要账号密码  \n> \n> 网管人员：  \n> 认识的人，性格有点墙头草，容易左右摇摆；  \n> 一旦跟他说话时语气强硬，对方则深怕会得罪你的样子；  \n> 开会时经常心不在焉，说话有时不着边际；  \n> 做事拖沓，有头无尾  \n\n### 破解过程：  \n首先，分析网管人员的性格特点，由于是IT从业人员，因而通常具备较强的密码保护意识，因而不大可能使用无脑型密码，此外，从此人做事的习惯来看，可看出其对专业服务意识及自我认同度较差，不大可能使用严格的加密法。\n\n其次，上述性格类型的人通常有一种不安全感，因而，其设置的密码不大可能使用他自己的个人信息；此外，做事不认真的人通常有一定惰性，其设置的密码不会太长，八位至十位是最有可能的位数。\n\n其三，由上述两条可以判断，密码使用最大的可能要么是公司名全部拼音的10个字母，要么是英文缩写的简单重复或者英文缩写加上1601，也有可能是房间好的简单重复；进一步分析，此网管头脑简单，通常他宁愿使用16011601这样的序列，也不会有那心情去对后面的那个1601进行倒序。\n\n最后，账号名通常会使用约定俗称的字母组成，且很可能是4位到6位，所以，账号很大可能是公司简称abcd。\n\n### 最终结果：\n> 账号：abcd  \n> 密码：16011601  \n\n### 从密码逆推网管人员的性格：  \n平时对其印象完全正确，此人可做朋友，因为他没有什么心机，不会害你，但不可共事，因为缺乏责任感。日后项目重要节点的相关事项尽量不能托付给他，即使不得已托付此人，也必须保持高度警惕，不时跟进。然而，非常遗憾的是，最后关头我依然险些栽在此人手里，那是为了校对数据，由于当时系统有多个平台，而校对数据必须在真实平台上进行，在校对前，我特意向他用邮件和电话确定真实平台地址，后来安排了自己公司和合作单位的20几个人校对了整整一天，最后还是发现此人给我的地址是个测试平台地址，气得老子当着公司和他们公司领导的面狠狠地耍了一回酷，不过气归气，工作却得从头再来，于是只好一边找了10几个人，说了半天的好话，熬到半夜两点多才把所有数据校对完毕，91ri.org庆幸总算没有拖慢项目进度！\n\n---\n\n## 破解某同事个人密码\n> 对象个人信息：  \n> IT公司中层经理，多个项目参与者及主要负责人；  \n> 做事认真，有条不紊，名牌大学毕业；  \n> 为人圆滑、精明——应该说我很少遇到这么聪明的人；  \n> 对自己的业务能力极度精通，在公司人称“鬼才”；  \n> 性格平和，对下属非常宽容，经常面带微笑，拥有很强的人格魅力；  \n> 思维严谨，经常看有关人性和数学方面的书籍\n\n### 破解过程：\n首先，由于此人从属于IT行业，加上拥有很高的智商，因而通常拥有很强的密码保护意识，绝不可能使用无脑型密码——应该说，觉得他会使用无脑型密码就是对他智商的侮辱。\n\n其次，他也不大可能会在密码中透露自己的个人信息和爱人的身份信息，使用广州家里的电话号码，办公室号码和手机的可能性也不大，除非是老家的电话号码。\n\n再次，由于其强烈的密码保护意识，他的密码通常会比普通人的要长，有可能会达到13位以上。\n\n再次，最大可能是此人会使用“图腾”，由于其思维的严密性，喜欢数学，空间思维能力较强，会比较注重对称美，加上强烈的密码保护意识，很有可能会使用下划线，并且下划线的位置会高度体现对称美。\n\n再次，其使用的图腾极有可能是很多人平时容易忽略的常识性意象物，并且很有可能与其爱好有关，这时候一个意念物在我脑中一闪而过——圆周率π！印象中第一次接触这个常数倒不是在数学课，而是在历史课上，现在依然记得老师跟我们吹嘘的中国历史，还记得祖冲之以及“3.1415926至3.1415927之间”这句话。的确，对于一个酷爱数学的人来说，如果在数学世界里采用某个常数作为密码的意象物，还有什么比这个东西更合适的？——既是圆身上的东西，本身就是完美的象征，同时其通常被记住的位数是8位，在长度上也非常符合密码使用的习惯。\n\n最后就是组合了，小数点很有可能会采用下划线或者p(point)代替，首选3.1415926，这其实是一个无限循环的数字，而无限的符号我们知道，是一个横着写的8，对于高度注重对称美的数学爱好者来说，很可能会在数字和无限之间进行一下区分，于是，我首先想到的两个密码是3_1415926_8还有3p1415926_8，用其邮箱进行验证，结果均失败，数一下长度，只有11位，而且第一个还没有字母，而前面说过，通常使用下划线的人密码保护意识是很强的，通常使用了下划线，那么，其密码很可能包括数字和字母——字母嘛，首先想到的当然是他的名字缩写，为了不透露他的个人隐私，假设他叫张三好了。最后，当我破解了他的密码的时候，我差点兴奋得跳了起来，足足高兴了几天，连睡觉都合不拢嘴！女朋友很好奇问我为什么这么高兴，我一直都是笑而不语！\n\n### 最终结果：\n> 密码：zs_3_1415926_8\n\n### 从密码逆推此君的性格：\n此人对自我要求很高，有强烈完美主义倾向——从使用圆周率作为密码并且密码体现高度对称美可以看得出来；其次，此人自信但不自负，如果非常自负，那么，他完全没有必要在在最前面使用自己的姓名，因为通常来说很少有人会想到用圆周率这种意象物作为自己的密码，自负的人会认为使用圆周率已经足够；这种人通常胸怀宽广，能接受别人的意见或者建议，经常会反躬自省自己的错误并予以改正，生活中，他会是一个良师益友，工作上，他会是给力的伙伴，既可深交也可共事。但是，其缺点是做事一旦关乎自己，有时候会过于追求完美，从其密码所使用的下划线高度体现对称可以看得出来，这种人打工迟早会成为一个优秀的项目管理人或高层经理，但是，开拓自己的事业却不容易打破常规。\n\n不管怎样，在工作过程中我一直与此君相处得很好，从来没有红过脸，对我这个脾气暴躁的人来说这是甚为难得的，很大一部分原因我想是源于我对他发自内心的尊重，甚至当我知道了他的密码以后，一直以来还带着深深的负罪感和愧疚感，因而都很少联系他了！\n\n---\n\n## 破解某邻居的QQ密码\n> 对象个人信息：  \n> 85后，男性，每天都见面，每次见面时都会彼此很客气地打招呼，聊过几次天；  \n> 聊天过程其发音非常清楚，说话偶尔会骂两句，说话简洁，非常富有条理性，极少包含“那个”，“然后”这种潮汕人俗称“话屎”的词语；  \n> 他对社会上的一些现象非常强烈的反感；  \n> 眼神清澈，给人的感觉非常阳光，健康；  \n> 有时爱与我聊中国古文化，西方启蒙时期的哲学与思想，并且一聊起来双眼发光，极其兴奋。\n\n### 破解过程：\n首先，聊天时知道了他的出生年份1987年，同时还知道了他的名字，假设为“李四”，还知道他出身于农村。\n\n其次，眼神清澈，而且一见面就愿意向你敞开心扉讲心里话的人通常涉世未深，通常缺少防范意识，这类人的密码保护意识通常也比较差，猜测其密码有可能是姓名加上出生年月日的组合。\n\n再次，说话条理清晰，不带任何“话屎”，而且喜欢聊哲学，这让我想起我的很多射手座朋友，以次推断他可能属于射手座。\n\n再次，射手座生于每年的11月23日——12月21日，尝试用他的名字拼命lisi加上19871201这样的组合进行测试，尝试大约三十次全部失败。\n\n突然，我想得他来自农村，父母在80年代那个时候，极有可能仍在使用农历，因此，注册他身份证的时候，很有可能跟我一样采用农历，上网用万年历查下1987年阳历11月23日——12月21日这段时期所对应的农历日期，对应的农历时间段是10月初三至11月初一。\n\n### 最终结果：\n> 密码：lisi_19871011\n\n### 从密码逆推此君的性格：\n此君懂得使用下划线，说明他还有一定的密码保护意识，但是，从其使用自己姓名加上生日这一点可以判断他社会经验缺乏，应该较少与社会上的人接触，应该是宅男一类的人，工作不可能是销售类和管理类，很有可能是技术类。这种人通常比较爱交朋友，也非常值得交往，是那种你有万贯家财，到了重要的时候都可以放心托付给他一类的人。后来与他进一步的交往中一步步印证了我的论断。\n\n# 个人密码加密建议\n需要使用密码的场合通常是银行的账号，其他的绝大多数则通常是上网的各种邮箱、某些客户端软件、或者论坛的登录密码。绝大多数人上网时候都会使用一个固定的密码，而且基本上没有修改密码的习惯，因此，只要你在某个论坛的密码一旦泄露，那么，很可能你的所有邮箱、游戏账号等密码都会被人家一锅端。\n\n存在这种现象其实很容易理解，就是因为人的惰性，而且现在的网站那么多，如果针对各个网站去设置不同的密码，对于很多人来说，几乎是不可能完成的任务，因为这样你不仅需要记忆几十个甚至上百个密码，还必须记忆各个密码与各个网站的对应关系。\n\n其实，有一种办法可以保证你的密码可以随着不同网站而进行变换，同时又不需要记忆对应关系的。以下就以这种方法作为切入点，对大家的密码设置提供一些建议，这种办法我们不妨命名为“随机有据字符加固定序列密码”。\n\n---\n\n## 随机有据字符加固定序列密码\n这个名词拥有三个关键词——随机、有据、固定。先说“固定”，固定就是指你经常使用的密码，在你每个密码中都会出现的一个字符段，假如你已经用惯了某个密码，并且这个密码你把他用在绝大多数的地方，那么，就以这个密码作为固定序列，放在你新密码之中；所谓“随机”，指的是你设置的时候事先并不知道要设置什么样的字符，而是根据不同的网站或客户端进行变动，但是，其变动是有规则的，这个规则是你自己定的，而且不会让任何人知道；所谓“有据”，这个根据，则与网站的某一种要素挂钩，我推荐使用网站的名字，目的是方便你自己的记忆。以下我举个例子，你就会很清楚地理解这种所谓的“随机有据字符加固定序列密码”的特点了。\n\n假如你以往所常用的密码是qwert123，那么，在你的新密码中，同样保留这个字段，现在你自己定义这样一种规则：以网站的名称作为依据，登录任何一个网站，就以其名称作为参照物，截取其名称的第一个字母（或数字）和最后一个字母（数字），分别放在固定密码段的开头和结尾。例如：上新浪网，其名称为sina，那么，分别截取s和a，添加在你的固定密码组开头和结尾，那么，你在新浪上的密码就是sawrt123a；如果是迅雷的客户端，取其网站名Thunder的首字母t和最后一个字母r，这样你的迅雷地址就变成了tawrt123r，由于多了这样一层保护，那么，即使你的新浪微博密码丢失了，那么，别人也不容易用这个密码来盗取你的迅雷账号、qq号码，而且由于这种密码命名规则简单，你完全可以照用你原来的密码段，不用去修改密码输入的习惯。\n\n上述的命名规则完全由你自己来定，除了那种截取头尾的规则以外，还可以这样：截取网站名的首个字母或数字，同时数一下这个网站名的位数，如果是奇数，字母取大写；如果是偶数，字母取小写，将它加到你固定密码组的开头或者结尾；如果截取到的是数字，那么，同样数一下网站名的位数，如果是奇数，那么保留这样一个位数，如果是偶数，则将其双写，加到你的固定密码序列上。示例：sina，baidu，163和2144，sina包含4个字母，所以截取第一个字母的小写s；baidu是5个字母，于是截取其第一个字母的大写B；163是3个字符，于是取其第一个数字1,2144是4个字符，于是取其第一个数字的复写22，添加到你的固定密码组上，于是，你的新浪密码是sqwert123，百度密码则变成了Bqwert123，网易邮箱变成了1qwert123,2144网站的密码则变成了22qwert123。\n总之，怎么组合就看你自己考虑了，但随机段截取的规则一定要清晰可行，并且自己要牢记，而且随机字段包含的信息越少越好，太多未必能保护自己的密码，相反更容易让有心人发现规律。\n\n## 关于固定字符段的建议\n- 坚决不使用自己证件上所能查看到的信息，包括生日、证件号码、姓名及其缩写等等，同样也坚决不使用爱人和孩子的同类相关信息。更不要使用无脑型密码。\n- 可以使用电话号码，但是电话号码尽量使用老家的电话号码，并且对该电话号码添加或者减少一至两位的防盗码。\n- 可以使用爱人的昵称，但这个昵称最好是只有你和对方彼此知道的，尤其是互相吹枕头风的时候才使用的那种称谓。\n- 对于银行卡密码，如果你非要向爱人表达爱意，也可以使用你们的结婚纪念日或者其生日，但是一定进行诸如倒序、移位、加码等相关操作。例如：你们的结婚纪念日是2012年7月5日，你非要使用201275或者120775这样的数字，用倒序的观点，就成了572102和577021,；用移位的观点，不妨设置成720125或者071275；用加码的观点，可以是只加一位，变成201276和120776，也可以每位加1，312386,231886，什么规则由你自己选择，关键是你自己要容易记住，而别人又难以看懂。不要小看这种简单的操作，它很可能就是防止你密码泄露的关键。\n- 不需要考虑对称美，密码又不是让人看的，相反是见不得光的，见不得光的对称只能是孤芳自赏，因而，建议你采用下划线或者数字的时候，将其打乱之后插入字母中，最好其结构是一旦写出来会让人看着很别扭的那种——看着越别扭的密码越是好密码，相信我没错的！\n- 强烈建议使用图腾，因为那是你内心深处的东西，有时候即使是你最亲密的人都未必真正了解你内心深处在想什么，陌生人更加难以猜测。\n- 某些字母和数字之间由于形很相似，因而，当你需要使用数字时，不妨用字母进行一下伪装，反之亦然。包括1和l，2和z，6和b，8和B，9和q，0和o。\n- 没有必要定期修改你的固定字符段，那个意义不大，相反很可能会很容易就把自己弄晕，当然前提是你能做到上述提到的那些密码规则。\n\n## 关于安全问题的建议\n现在有很多网站尤其是论坛，为了所谓的安全性考虑，用户注册时通常会要求设置安全问题，以我自己的经验来看，那几乎是毫无作用的，这些安全问题通常会让你从8个左右的问题选择一个进行回答，很多人为了简单易记，通常会选择生日，这本来是没有什么问题的，问题在于电脑是没有智能的，它没有所谓的时间概念，相反，却有严格的格式概念，例如：某人生日是1980年1月1日，对于人来说，当某人问起你生日的时候，无论你是回答1980年1月1日，还是80年元旦，亦或是800101，都是一个概念，这个概念指向同一个目标，这个目标就是时间。然而对电脑来说，这几个却是完全不同的概念，对于电脑来说19800101与8011有着极大的差别，因而，有可能一些不同网站问你的是同一个问题，但是你在回答的时候却使用了不同的格式，这样注册多了，最后很可能连你自己都搞混了，有时候甚至会导致你自己连密码都修改不了。\n\n因而，我的习惯是除非网站指定安全问题为必填，否则我一律不填，如果填的话，我会随便选择一个问题，并且任何网站的任何安全问题，我都使用同一个标准格式，以前我使用的是“关你鸟事啊”，电脑问我你小学上那所学校啊？你爱人叫什么名字？我都一律回答“关你鸟事啊”——本来我怎样就不关你电脑你的事，还不是“关你鸟事”吗？！\n","slug":"密码破解与心理学","published":1,"updated":"2021-11-25T10:21:30.473Z","_id":"ckweswgif000je8vhfmwy7htx","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"十大基本规律\"><a href=\"#十大基本规律\" class=\"headerlink\" title=\"十大基本规律\"></a>十大基本规律</h1><ol>\n<li>绝大多数人都高估了破译密码的难度和低估了自己密码存在的风险，因而，往往把能够破解密码的人当成神秘人物，同时基本很少有修改自己密码的习惯。</li>\n<li>绝大多数人一生常用的密码通常不会超过3个，如果你破解了某人的QQ密码，很可能你也破解了他的论坛密码、邮箱密码、游戏账号密码……</li>\n<li>从性别上看，男性的密码比女性的要更加难破；从年龄层面上看，年轻人的密码比35岁以上的人群的密码更加难破；从受教育层度上看，大专以上学历的人群相对于以下学历人群，密码破解难度更大，且大专、本科、硕士学历的人群密码破解难度基本上没有什么区别；从专业角度上看，理科生的密码比起文科生要难破一些，计算机相关专业的学生密码破解难度最大。</li>\n<li>绝大多数人的密码，基本上都是有确定含义的，随机乱码组成的密码极度罕见（应该说我从来没有遇到过，不过如果是这种密码，我这种基于心理的思路，可以确定毫无办法）。</li>\n<li>大多数人的密码要么纯粹用数字组成，要么纯粹用小写字母组成，要么用数字加字母组成，只有很少人会采用下划线，极少数的人字母区分大小写。</li>\n<li>密码所采用的字母中，很多都是姓名拼音、名字拼音的全部或首字母缩写，某一图腾的英文单词（通常是名词）——图腾的含义后面会提到，某一单位名的首字母缩写，以及某一地名的拼音或英文及其缩写。</li>\n<li>密码所采用的数字中，很多有关日期，且该日期对密码所有人拥有极其重要的意义，还有很多与地名和电话号码有关。</li>\n<li>使用下划线的密码，下划线通常只出现一次，一般这类密码的主人密码保护意识很强，其密码往往还包含数字和字母，这种密码的下划线的位置通常处在数字和字母的分隔处；字母区分大小写的密码，大写通常只出现一次，并且很多时候都出现在密码的开头，极少数出现在结尾。</li>\n<li>除非所登录系统有严格的位数限制，否则密码的位数通常是8位到11位，7位以下的密码和12位以上的密码较为少见。</li>\n<li>公共网络的密码通常很少包含个人信息，大多数是单位名称的全部或某一部分的中文或英文全称，或者英文或拼音的首字母缩写，外加拥有特定含义的数字，这种数字通常是电话号码或者门牌号，另外，有些密码是上述特定字母或其缩写的简单重复，如：12341234、abcabcabc；个人密码则很少出现上述简单重复的情况。</li>\n</ol>\n<h1 id=\"十大规律隐含的心理学特性\"><a href=\"#十大规律隐含的心理学特性\" class=\"headerlink\" title=\"十大规律隐含的心理学特性\"></a>十大规律隐含的心理学特性</h1><h2 id=\"惰性\"><a href=\"#惰性\" class=\"headerlink\" title=\"惰性\"></a>惰性</h2><p>从上述很多条规律都可以看出人或多或少存在惰性，比如很少人会定期修改密码；再如很少人密码会区分大小写，因为这样的话必须进行至少一次大小写切换；再如各种不同账号使用同一密码都是人存在惰性的有力证明。</p>\n<h2 id=\"自我意识\"><a href=\"#自我意识\" class=\"headerlink\" title=\"自我意识\"></a>自我意识</h2><p>自我意识很多时候体现在使用名字的密码上，通常，自我意识较为强烈的人，很看重自己的名号或者名誉，因而，其密码一旦使用自己的名字，往往就是名字的全拼，较少使用缩写，更不会省略自己的姓氏，另外，这类人也有很大一部分使用的是某一图腾的英文单词，例如某人非常崇拜某一偶像，那么，这个偶像就是他的图腾，其密码很有可能与这个图腾有关。</p>\n<h2 id=\"自我保护意识\"><a href=\"#自我保护意识\" class=\"headerlink\" title=\"自我保护意识\"></a>自我保护意识</h2><p>从公用密码很少包含个人信息这一点很容易印证自我保护的问题，一般来说，当某一网管或其他特定工作性质的人需要为某公用账号设置密码时，首先需要考虑的是密码易为别人所理解和记忆，然而，一个人在考虑秘密之类的东西时，首先联想的是他自己身上的东西，由于这些东西涉及其个人隐私，因而很容易被他的潜意识所排除。</p>\n<h2 id=\"爱与责任感\"><a href=\"#爱与责任感\" class=\"headerlink\" title=\"爱与责任感\"></a>爱与责任感</h2><p>不少人的密码会使用伴侣和孩子的姓名或生日、结婚纪念日、自己公司成立日期等诸如此类的信息，这很明显地体现了爱和责任感。</p>\n<h2 id=\"完美主义倾向\"><a href=\"#完美主义倾向\" class=\"headerlink\" title=\"完美主义倾向\"></a>完美主义倾向</h2><p>完美主义倾向在密码中主要体现在对称与平衡上面，这从名字加日期的组合式密码和带下划线的密码可以很容易看出来，例如，某人叫做张三，生日是1980年1月1日，那么，如果采用前者，其密码往往是zhangsan19800101或者zhangsan8011，不大可能设置成z1h9a8n0g0s0a1n01这种类型；如果使用下划线密码，则很大可能会采用zhangsan_19800101或者zhang_san_19800101，不大可能采用_zhangsan19800101或者z_hangsan19800101这种类型。</p>\n<h1 id=\"常见的无脑型密码\"><a href=\"#常见的无脑型密码\" class=\"headerlink\" title=\"常见的无脑型密码\"></a>常见的无脑型密码</h1><p>所谓无脑型密码，指那种破解起来没有任何技术含量，纯粹依靠运气就可以破解的密码，这种密码通常为公用，其结构很多时候为：某一数字的简单重复，某一简单规则的数字序列，某一简单规则的字母序列，按某种简单规则组合的数字和字母序列，以上四种密码有以下一些典型例子：01223456789,1234567890,123123123,12341234,0987654321，13579824680。</p>\n<p>或者这样：qwertyuiop，abcabcabc，abcdabcd，abcdefg,八个8,八个6，八个1，八个0，八个或者九个9，abcd1234,abc123abc123,abcd4321，所在城市区号的简单重复，等等。</p>\n<p>这种无脑型密码常见于公用的网络或者邮箱账号，尝试破解公共密码的时候，通常优先选用以上提到的这些密码进行尝试，在北京的时候，我用qwertyuiop破解了一次路由器的密码，来到潮州之后，第一次用1234567890破解了一次密码，后来才知道是同事手机网络的密码，现在用的网络是邻居的，密码是8个8.</p>\n<h2 id=\"公共网络的路由器密码破解法\"><a href=\"#公共网络的路由器密码破解法\" class=\"headerlink\" title=\"公共网络的路由器密码破解法\"></a>公共网络的路由器密码破解法</h2><p>其实从严格意义上来讲，只要接了路由器，那么，其网络必定是共享的，因而只要接了路由器的网络，都可以看成是公用网络，区别在于公用的程度，一般来说，从公用的程度来讲，路由器可以分为四类：公共场所、公司、公租房、家庭，其中公用程度越高，密码破解难度就越低。</p>\n<h2 id=\"公共场所的路由器密码破解法\"><a href=\"#公共场所的路由器密码破解法\" class=\"headerlink\" title=\"公共场所的路由器密码破解法\"></a>公共场所的路由器密码破解法</h2><p>公共场所通常包括旅馆、饮食场所、网吧、商场等人流量大，人群确定但身份群不稳定的场所，这种场所的网络基本上不会包含任何个人信息，且大多数密码都是无脑型密码，此外最常见的密码是以下几种：</p>\n<ul>\n<li>场所名称的拼音或英文的简单重复</li>\n<li>场所门牌号的简单重复或前半部分为门牌号，后一部分为门牌号的倒序</li>\n<li>场所名拼音或英文加上场所所在门牌号或分店号</li>\n<li>场所预约电话、送餐电话或400免费服务电话</li>\n<li>场所名拼音或英文加上4位到6为无脑型密码</li>\n<li>场所门口某路公交车号码的简单重复</li>\n</ul>\n<blockquote>\n<p>总的来说，很多的场所是不设置密码的，设置密码的作用也不大，其设置密码的目的通常是防止临近商家或住户的盗用，但只要这些用户稍微花点心思，则获取密码易如反掌。</p>\n</blockquote>\n<h2 id=\"公司路由器密码破解法\"><a href=\"#公司路由器密码破解法\" class=\"headerlink\" title=\"公司路由器密码破解法\"></a>公司路由器密码破解法</h2><p>如果你在搜索网络的时候，搜索到网络名为4位以上的大写英文字母的，这种网络很有可能是公司网络，其密码的组合通常非常简单，除了以上提到的无脑型密码以外，很有可能采用如下几种形式。</p>\n<ul>\n<li>公司名拼音或英文的简单重复，如中国移动，其某一门店的哦网络有可能是zgydzgyd，或者chinamobile</li>\n<li>公司门牌号的简单重复或者前半部分为门牌号，后一部分为门牌号的倒序，例如某公司位于某栋大楼的1606室，那么其密码有可能是16061606或者16066061</li>\n<li>公司前台电话号码，有时还会加上公司所在城市的区号</li>\n<li>公司名拼音或英文加上公司门牌号</li>\n<li>公司名拼音或英文加上某一4位到6位的无脑型密码</li>\n<li>公司名拼音或英文缩写加上电话号码或电话号码的最后4位</li>\n</ul>\n<blockquote>\n<p>总之，公司的网络由于用的人多，所以，其密码包含的较难记住的信息越少，破解难度是非常低的，只要有耐心多尝试几次，一般来说，都不难破解，至于公司的名称、门牌号码和电话号码如何获得，这个我想只要你在一些写字楼上过班，都不用我来教你。</p>\n</blockquote>\n<h2 id=\"公租房路由器密码破解法\"><a href=\"#公租房路由器密码破解法\" class=\"headerlink\" title=\"公租房路由器密码破解法\"></a>公租房路由器密码破解法</h2><p>这里所谓的公租房，是指来自不同地方彼此不认识的人或者彼此要好的同学、朋友、同事一起租住的房子，包括大学宿舍，职工宿舍，同时还包括彼此独立租房，但共用一个网络的用户群。</p>\n<p>公租房的密码类型已经或多或少接近于家庭密码，但由于成员关系不如家庭那么亲密，因而，其包含的个人信息依然较少，破解的成功率依然较为可观。除了上述提到的无脑型密码以外，公租房的密码通常还有以下几种类型：</p>\n<ul>\n<li>所在小区名或楼层名拼音的全部或者拼音简写的简单重复，例如“金碧花园”用户，其密码就有可能是jinbihuayuan或者jbhyjbh</li>\n<li>房号或者楼号加房号或其简单重复，或者前一部分为房号，后一部分为房号的倒序，例如我在北京时候住在某栋小区的2号楼2单元1202房，我为租用我网络的用户设置的密码就是12022021；同时，尝试过登录邻居路由器的时候，住在1201的公租房用户，其密码为12011201；住在11楼3号房的用户，其路由器密码为02021103。</li>\n<li>小区名的简写加上房号，例如，我在北京住的小区名为华龙美晟，搜到我楼下2号房的用户，其路由器密码为hlms1102。</li>\n<li>宿舍电话号码或者前面加上区号，例如，广州某大学宿舍的电话号码为61306325，那么，其密码有可能就是61306325或者02061306325.</li>\n<li>公租房用户都要经常用到的某一电话号码，例如送水电话，送煤气的电话，送餐电话，等等。</li>\n</ul>\n<h2 id=\"家庭路由器密码破解法\"><a href=\"#家庭路由器密码破解法\" class=\"headerlink\" title=\"家庭路由器密码破解法\"></a>家庭路由器密码破解法</h2><p>家庭密码在这四类密码中间，相对来说是最容易破解的，因为大家彼此都很亲密，因而，这类密码通常包含了不少家庭方面的信息，不过，从人性的角度来将，再亲密的人彼此之间也是存在隐私的，因而，这类密码通常不会包含真正内心深处的隐私，因而，相对于个人密码来讲，其破解难度要低得多。</p>\n<p>不少的家庭路由器密码依然使用上述的无脑型密码，另外一些则具备公租房密码的特点，以上这些都不再赘述，下面谈谈家庭路由器密码相对于公租房密码所不具备的特点及其破解方法。</p>\n<ul>\n<li><p>家庭姓氏拼音的简单重复，这种常见于姓氏拼音4个字母以上的家庭，如张、周等，而像李、林一类的姓氏，这种方式就要少见得多。另外，有趣的是，以姓氏进行简单重复的密码，其首字母通常会采用大写，有的甚至是遇到第一个字母就大写一次的现象，例如某一姓张的家庭，其密码有可能会采用Zhangzhang或者ZhangZhang的格式。</p>\n</li>\n<li><p>家庭所居住的房屋的电话号码或者区号加上电话号码，这类密码有时候家庭会出于安全考虑，在电话号码最后会加上一位到两位防盗码。例如，某家庭的电话号码是81008100，那么其路由器密码有可能会是810081000，最后一个0就是防盗码。</p>\n</li>\n<li><p>老家的电话号码，这是我阅读上面提到的那份资料所发现的一个密码规则，当时我发现有几个人采用这种类型的密码，其中一个人注册资料填写的寄件地址是北京，而户籍地址是河北某县的，而其密码以0开头，看起来像一个电话号码，因而上网查找，果然发现这个密码的前面几个数字与其户籍地址所在的县城区号相对应，因而断定这是一个老家的电话号码，尽管这属于个人密码，但是由于老家的电话是家庭成员所共知的，因而完全有可能被用作路由器密码。</p>\n</li>\n<li><p>家庭姓氏的拼音加上电话号码或者手机号码。</p>\n</li>\n</ul>\n<p>以下几条是我认为可能存在的规则，但是由于之前破解的过程没有相关的信息，因而没有经过验证的，一并提出来供大家参考。</p>\n<ul>\n<li>夫妻两个人的姓氏加上结婚纪念日，有可能是两个姓氏连在一起，后面加上结婚纪念日；也有可能是两个姓氏分别放在两端，结婚纪念日放在中间。</li>\n<li>第一个孩子的姓名、小命加上孩子生日。</li>\n<li>父亲或者母亲的生日。</li>\n<li>夫妻之间妻子的姓名，丈夫私底下对其的爱称加上妻子的生日。这一条是有性别的分工所决定的，因为通常涉及电脑的东西，男性懂得会更多，因此借此机会向配偶表达一下爱意是完全可能的。</li>\n<li>家里养的宠物的名字加上某一特定含义的数字。</li>\n</ul>\n<blockquote>\n<p>总之，只要你掌握足够的信息，通过这上面已经经过验证和没有经过验证的几条规律，就有极大的可能破解人家的路由器密码。</p>\n</blockquote>\n<p>以上就是几种人群分布所在网络的路由器密码破解的主要内容，而有的时候，破解密码甚至都不需要用到以上的方法，因为路由器通常也就是那么几个品牌，而很多品牌的路由器地址都是固定的，例如TP-Link及其他很多品牌的很多型号使用的地址是192.168.1.1，像腾达则很多使用192.168.0.1，而各大品牌的路由器的默认初始登录账号和密码都是admin，偏偏很多人又不会操作，有的即使懂得操作也不愿意去修改路由器的登录密码，因而有时候你可能很轻松的就进入人家的路由器去进行诸如设定固定IP、修改流量、重启路由器等操作。如果你搜索某个网络的网络名是诸如Tenda，TP-Link_2D18FA这样的含有品牌名的网络，那么，很有可能他的路由器登录密码也是没有修改的，只要你懂得路由器怎么操作，那么，这种网络是很容易就突破了。</p>\n<h2 id=\"基于性格分析的个人密码破解法\"><a href=\"#基于性格分析的个人密码破解法\" class=\"headerlink\" title=\"基于性格分析的个人密码破解法\"></a>基于性格分析的个人密码破解法</h2><h3 id=\"个人密码常用的组成要素\"><a href=\"#个人密码常用的组成要素\" class=\"headerlink\" title=\"个人密码常用的组成要素\"></a>个人密码常用的组成要素</h3><ul>\n<li>自己姓名、伴侣姓名、孩子姓名的拼音或其缩写。</li>\n<li>自己生日、伴侣生日、孩子生日、父亲或母亲生日、自己公司开张纪念日、结婚纪念日、某个亲人的忌日等对密码主人有特别重要意义的日期。</li>\n<li>家庭电话号码、老家电话号码、个人手机号码、爱人手机号码。</li>\n<li>身份证、房产证、驾驶证、自己公司的经营许可证、营业执照等证件的号码或其号码段。</li>\n<li>与自己所追求或崇拜的事物有关的事物（即：图腾）的名称或日期。</li>\n<li>自己、亲人、宠物、图腾的昵称。</li>\n<li>爱人或者某一图腾的名称（通常是简称），加上1314（一生一世）或者5201314（我爱你一生一世）这样拥有谐音特性的数字串。</li>\n</ul>\n<h1 id=\"图腾\"><a href=\"#图腾\" class=\"headerlink\" title=\"图腾\"></a>图腾</h1><p>“图腾”体现在现代人的精神世界里，很多的时候是爱、理想、人格参照物等美好事物的象征。其一般意义通常与宗教或者原始崇拜有关，而宗教之所以能够一直存在，很大程度在于其能直达人类的内心深处，密码“密”的特点与图腾的这种特点很容易就能够互相结合，因而，与图腾相关联的一些事物，很容易被人们选作密码的载体。</p>\n<p>在密码中，常见的图腾通常有以下几种：</p>\n<ul>\n<li>初恋对象的名字拼音或其缩写，或者昵称的英文，初恋对象的生日或与初恋各种第一次的日期，与初恋对象有关的事物，例如某只宠物的名字、第一次约会的地点。</li>\n<li>某个特别崇拜的人物的姓名、外号或者生日、忌日。</li>\n<li>某个特别向往的地方的名字，包括发誓一辈子无论如何要去一次的地方或者故乡。</li>\n<li>某个特别向往的神话人物或一种与一种理想生活有关的事物，例如：乌托邦（Utopia）。</li>\n<li>某个童年时期对自己影响极深的人物的名字或者事物的名称，例如：电影《公民凯恩》中，凯恩至死都念念不忘的“rosebud”，如果凯恩生在现代，那么，我刚说他的密码百分之百会包含这个单词。</li>\n</ul>\n<h2 id=\"不同人格类型的人群使用密码的习惯\"><a href=\"#不同人格类型的人群使用密码的习惯\" class=\"headerlink\" title=\"不同人格类型的人群使用密码的习惯\"></a>不同人格类型的人群使用密码的习惯</h2><p>由于各自使用的标准不同，古今中外各种心理学家和人物学家，对于人群的分类方法可谓千差万别，例如：儒家通常会将人分为圣人、君子、小人，三国时期的刘劭则将人按才的不同分为英、雄、俊、杰，中国的命理学更是将人按照生辰八字的结合分出“财官双美格”、“食神生财格”等多种类型，而“阴阳二十五人”分类法则将人按照五行体现的气质将人分为二十五类；西方心理学有按星座进行区分的，还有按照九型人格进行区分的，而像弗洛伊德则将人的思想分为有意识和无意识两种，施普兰格尔则把人格分为理论、经济、艺术、社会、政治、宗教6种类型……</p>\n<p>由于理论基础不一样，因而其分类方法就不一样，对于密码来说，上述无论任何一种理论所提供的分类方法都难以能够和该人群的密码使用习惯一一对应，因而，下面我将结合自己的经验以及自己的思考，对不同类型的密码所对应的人群进行分类。</p>\n<hr>\n<p>由于自己过往破译的密码并不算太多，而阅读过的那份材料所涉及的人又全部素未谋面，加上我并没有学过系统的心理学课程，因而，以下的分类方法未必科学，难免会遗漏某些人格类型，同时，也缺乏统计学意义上的证据作为支撑，因而你不妨把他看成是一种无稽之谈。需要特别指出的是，以下分类所涉及的人群，并没有严格的界限，有很多人同时兼具不同的性格特点，因而其密码也会同时拥有各自的特点。</p>\n<h3 id=\"责任感型\"><a href=\"#责任感型\" class=\"headerlink\" title=\"责任感型\"></a>责任感型</h3><p>责任感通常来源于自信以及对家人强烈的爱，这种人通常在社会上比较成功，对社会现象有特定的判断标准，且其看法不容易为别人所动，体现在生活习惯上，他们选择工作时通常比较谨慎而且目标明确，日常生活较为单一，除了工作以外，他们会花很多的时间陪家人，赚来钱通常花在家人身上或者交给爱人保管。这种人群的密码通常包括以下的要素：爱人的姓名、昵称或生日，结婚纪念日，孩子的姓名、昵称或生日，老家的电话号码，父亲或母亲的生日。</p>\n<h3 id=\"洁癖型\"><a href=\"#洁癖型\" class=\"headerlink\" title=\"洁癖型\"></a>洁癖型</h3><p>此处指精神意义上的洁癖，这种人的思想中存在一个特定的界限，这个界限是无论自己还是别人都不允许逾越的禁区。这种人要么特别成功，要么整天抱怨；要么像个外交家，要么极度孤僻；同时他们别人的某些行为或者社会想象拥有常人所难以理解的评判标准，这种人的自我意识通常很强，而且对某种理想的人事或者生活拥有强烈的向往，在他们的内心深处，通常埋藏着一段失败但又刻骨铭心的情感经历。这一类型的人，其密码最大的可能是使用图腾。</p>\n<h3 id=\"两肋插刀型\"><a href=\"#两肋插刀型\" class=\"headerlink\" title=\"两肋插刀型\"></a>两肋插刀型</h3><p>这一类人通常具备很强的领袖气质，而且极度自信，他们通常有很多的朋友，而且非常好动，属于坐久了屁股就会长疮的人，他们隔三岔五就会带一大群朋友回家吃饭或者睡觉，也经常夜不归宿，朋友需要帮忙的时候，他们通常会二话不说地伸出援手，也经常路见不平，他们通常自我意识强烈，很少对人设防。其密码的类型通常不是无脑型就是自己的姓名加上出生年月，且姓名必定是姓氏加名字的全部字母，极少使用简写，顶多加上一两位的防盗码，有时也会使用亲人的信息。</p>\n<h3 id=\"幻想型\"><a href=\"#幻想型\" class=\"headerlink\" title=\"幻想型\"></a>幻想型</h3><p>幻想型通常存在于花季少女，这种人的QQ空间、博客和微博通常带有炫目的色彩，通常使用一些童话、神话或幻想世界中才有可能存在的事物，他们追求时尚，爱看偶像剧，常会做出孩子气的行为，对小动物通常非常呵护，有不少人有养宠物的习惯，她们通常家庭条件较好，从小受惯长辈的宠爱，她们内心深处通常非常自私，尽管外表并非如此。这种人的密码类型通常使用图腾，且该图腾一般是某个白马王子的姓名或者生日，或者宠物的名字，或者某种她幻想中的理想事物。</p>\n<h3 id=\"好斗型\"><a href=\"#好斗型\" class=\"headerlink\" title=\"好斗型\"></a>好斗型</h3><p>所谓好斗型，并非指表面上爱与人争吵或者打架，而是指表面上不懂声色，但却在暗处与你暗暗较劲的人，例如某次你考了第一名，而他考了第三名，在别人都恭维你，要你请客吃饭的时候，他会找借口不去，或显得心事重重，私底下会更加卖力学习，期望下一次考试超越你。这种人通常自我意识强烈，拥有让人难以忍受的自负，妒忌心也很强。这类人的密码通常与他自己有关，其使用的密码，通常要么包含自己的昵称、姓名、手机号码或生日，也有很大几率使用图腾，且这个图腾极有可能是他在孩提时代或青春期对他成长产生强烈影响的事物。</p>\n<h3 id=\"事业领袖型\"><a href=\"#事业领袖型\" class=\"headerlink\" title=\"事业领袖型\"></a>事业领袖型</h3><p>这种人通常也具备很强的责任感，但与责任感型的人相比，他们的责任感的重心更多的放在工作上，他们严格要求自己，更加严格地要求自己的下属和亲人，有时会让人觉得无法忍受，工作起来，这种人是废寝忘食的，当他投入工作的时候，决不允许别人打扰他，说话的时候，一旦被人打断或者听到不想听的话，就会直接质问对方，这种人的密码，很多时候会使用自己的名字或者昵称，且很多时候会使用缩写或者不包括姓氏的名字拼音，或者与他公司或者事业有关的名称或号码，有时也会使用图腾，且该图腾要么是他认为别人绝对意想不到的事物。</p>\n<h3 id=\"完美主义者\"><a href=\"#完美主义者\" class=\"headerlink\" title=\"完美主义者\"></a>完美主义者</h3><p>其实每个人或多或少都有完美主义的倾向，对于完美主义倾向比较显著的人来说，他们未必注重自己着装的品位，但是他们会追求有品质的事物；他们崇拜的对象通常都是人格、智力都看上去完美无缺的人；他们的房间通常物品摆放整齐，有时出门走到半路，想起家里某个物品没有摆放好，甚至会跑回来把他放到让自己看起来安心的位置；他们通常喜欢自己整理自己的房间，不喜欢让别人插手，因为，在他们看来，由别人经手的东西都是不完美的；这种人通常严于律己，洁身自好，而且在道德上有种让一些小人难以忍受的优越感；这类人也许也会讲脏话，但在他们内心深处，对纯洁的爱情却极度向往，大多数这方面的男性拥有处女情结，女性则通常向往王子公主式样的爱情。这类人的密码，一旦使用名字，则名字很大几率是全名，或者是某一特定的单词（如love，great等具有美好意义的形容词）加上全名的简称，一旦使用日期则日期通常是20120101这样的格式，很少会选择1211或120101这种格式，一旦使用电话号码，则电话号码通常包含区号，他们手机的电话簿，每个人的人名通常是全名，极少会忽略姓，也很少使用昵称；一旦使用下划线，则下划线的位置通常是能够高度体现对称美的。</p>\n<h3 id=\"现实主义者\"><a href=\"#现实主义者\" class=\"headerlink\" title=\"现实主义者\"></a>现实主义者</h3><p>现实主义者体现在思想上，不相信奇迹，他们行为上不容易走极端，但思想上却非常极端，例如，他们相信某个名人的成功是难以复制的，尤其是他身边的人；他们认为官员中没有好官，娱乐圈的女性每个都被潜规则过，有时候和他们交谈，你会忍受不了他们满口的大道理。这类人的密码，一旦使用姓名，通常是简写，日期则以简约型的居多，如果使用下划线，他们对于对称没有什么要求，有时下划线会出现在第一位，字母区分大小写的在这一类型的人中最为常见。</p>\n<p>以上八种人格类型，到目前为止，是我所能遇到并总结出来的全部有关密码在性格特征上的分类，在我过往所破解和遇到的密码中，还没有任何一个密码所对应的人群逃得过以上所谈到的情况。另外，从星座的观点来看，还有一些比较有趣的现象，例如，责任感型密码通常分布在天蝎座、射手座、狮子座、处女座上面，洁癖型的密码通常分布在水瓶座、双子座、天蝎座、白羊座和处女座，两肋插刀型则很多分布在白羊座、双鱼座、狮子座和摩羯座上面，幻想型绝大部分分布在双子座、天平座、射手座、水瓶座上面，好斗型则很多分布在白羊座、巨蟹座、天蝎座、处女座和摩羯座上面，事业领袖型则很多分布在金牛座、狮子座、天平座和摩羯座，完美主义者型则大多出现在白羊座、天平座和水瓶座，现实主义者则很多分布在金牛座、巨蟹座、射手座和摩羯座。另外，双子座、双鱼座和天平座最容易使用无脑型密码。双子座和水瓶座使用密码的规律最难以捉摸。</p>\n<blockquote>\n<p>上述总结的内容正确与否还有待进一步验证，你也可以从上面找到一种你认为最符合你性格特征的类型，结合你自己的密码进行验证。</p>\n</blockquote>\n<h1 id=\"密码破解案例示范\"><a href=\"#密码破解案例示范\" class=\"headerlink\" title=\"密码破解案例示范\"></a>密码破解案例示范</h1><h2 id=\"破解某公司会议室路由器密码\"><a href=\"#破解某公司会议室路由器密码\" class=\"headerlink\" title=\"破解某公司会议室路由器密码\"></a>破解某公司会议室路由器密码</h2><blockquote>\n<p>公司信息：<br>IT行业；<br>公司名称两个汉字，全部拼音为10个字母；<br>英文简写为4个字母，假设为abcd；<br>会议室在16楼，号码已经忘记，以1601作为示例。    </p>\n<p>路由器类型：<br>TP-Link品牌某型号路由器，登录地址为192.168.1.1，不具备无线功能，有线登录时也需要账号密码  </p>\n<p>网管人员：<br>认识的人，性格有点墙头草，容易左右摇摆；<br>一旦跟他说话时语气强硬，对方则深怕会得罪你的样子；<br>开会时经常心不在焉，说话有时不着边际；<br>做事拖沓，有头无尾  </p>\n</blockquote>\n<h3 id=\"破解过程：\"><a href=\"#破解过程：\" class=\"headerlink\" title=\"破解过程：\"></a>破解过程：</h3><p>首先，分析网管人员的性格特点，由于是IT从业人员，因而通常具备较强的密码保护意识，因而不大可能使用无脑型密码，此外，从此人做事的习惯来看，可看出其对专业服务意识及自我认同度较差，不大可能使用严格的加密法。</p>\n<p>其次，上述性格类型的人通常有一种不安全感，因而，其设置的密码不大可能使用他自己的个人信息；此外，做事不认真的人通常有一定惰性，其设置的密码不会太长，八位至十位是最有可能的位数。</p>\n<p>其三，由上述两条可以判断，密码使用最大的可能要么是公司名全部拼音的10个字母，要么是英文缩写的简单重复或者英文缩写加上1601，也有可能是房间好的简单重复；进一步分析，此网管头脑简单，通常他宁愿使用16011601这样的序列，也不会有那心情去对后面的那个1601进行倒序。</p>\n<p>最后，账号名通常会使用约定俗称的字母组成，且很可能是4位到6位，所以，账号很大可能是公司简称abcd。</p>\n<h3 id=\"最终结果：\"><a href=\"#最终结果：\" class=\"headerlink\" title=\"最终结果：\"></a>最终结果：</h3><blockquote>\n<p>账号：abcd<br>密码：16011601  </p>\n</blockquote>\n<h3 id=\"从密码逆推网管人员的性格：\"><a href=\"#从密码逆推网管人员的性格：\" class=\"headerlink\" title=\"从密码逆推网管人员的性格：\"></a>从密码逆推网管人员的性格：</h3><p>平时对其印象完全正确，此人可做朋友，因为他没有什么心机，不会害你，但不可共事，因为缺乏责任感。日后项目重要节点的相关事项尽量不能托付给他，即使不得已托付此人，也必须保持高度警惕，不时跟进。然而，非常遗憾的是，最后关头我依然险些栽在此人手里，那是为了校对数据，由于当时系统有多个平台，而校对数据必须在真实平台上进行，在校对前，我特意向他用邮件和电话确定真实平台地址，后来安排了自己公司和合作单位的20几个人校对了整整一天，最后还是发现此人给我的地址是个测试平台地址，气得老子当着公司和他们公司领导的面狠狠地耍了一回酷，不过气归气，工作却得从头再来，于是只好一边找了10几个人，说了半天的好话，熬到半夜两点多才把所有数据校对完毕，91ri.org庆幸总算没有拖慢项目进度！</p>\n<hr>\n<h2 id=\"破解某同事个人密码\"><a href=\"#破解某同事个人密码\" class=\"headerlink\" title=\"破解某同事个人密码\"></a>破解某同事个人密码</h2><blockquote>\n<p>对象个人信息：<br>IT公司中层经理，多个项目参与者及主要负责人；<br>做事认真，有条不紊，名牌大学毕业；<br>为人圆滑、精明——应该说我很少遇到这么聪明的人；<br>对自己的业务能力极度精通，在公司人称“鬼才”；<br>性格平和，对下属非常宽容，经常面带微笑，拥有很强的人格魅力；<br>思维严谨，经常看有关人性和数学方面的书籍</p>\n</blockquote>\n<h3 id=\"破解过程：-1\"><a href=\"#破解过程：-1\" class=\"headerlink\" title=\"破解过程：\"></a>破解过程：</h3><p>首先，由于此人从属于IT行业，加上拥有很高的智商，因而通常拥有很强的密码保护意识，绝不可能使用无脑型密码——应该说，觉得他会使用无脑型密码就是对他智商的侮辱。</p>\n<p>其次，他也不大可能会在密码中透露自己的个人信息和爱人的身份信息，使用广州家里的电话号码，办公室号码和手机的可能性也不大，除非是老家的电话号码。</p>\n<p>再次，由于其强烈的密码保护意识，他的密码通常会比普通人的要长，有可能会达到13位以上。</p>\n<p>再次，最大可能是此人会使用“图腾”，由于其思维的严密性，喜欢数学，空间思维能力较强，会比较注重对称美，加上强烈的密码保护意识，很有可能会使用下划线，并且下划线的位置会高度体现对称美。</p>\n<p>再次，其使用的图腾极有可能是很多人平时容易忽略的常识性意象物，并且很有可能与其爱好有关，这时候一个意念物在我脑中一闪而过——圆周率π！印象中第一次接触这个常数倒不是在数学课，而是在历史课上，现在依然记得老师跟我们吹嘘的中国历史，还记得祖冲之以及“3.1415926至3.1415927之间”这句话。的确，对于一个酷爱数学的人来说，如果在数学世界里采用某个常数作为密码的意象物，还有什么比这个东西更合适的？——既是圆身上的东西，本身就是完美的象征，同时其通常被记住的位数是8位，在长度上也非常符合密码使用的习惯。</p>\n<p>最后就是组合了，小数点很有可能会采用下划线或者p(point)代替，首选3.1415926，这其实是一个无限循环的数字，而无限的符号我们知道，是一个横着写的8，对于高度注重对称美的数学爱好者来说，很可能会在数字和无限之间进行一下区分，于是，我首先想到的两个密码是3_1415926_8还有3p1415926_8，用其邮箱进行验证，结果均失败，数一下长度，只有11位，而且第一个还没有字母，而前面说过，通常使用下划线的人密码保护意识是很强的，通常使用了下划线，那么，其密码很可能包括数字和字母——字母嘛，首先想到的当然是他的名字缩写，为了不透露他的个人隐私，假设他叫张三好了。最后，当我破解了他的密码的时候，我差点兴奋得跳了起来，足足高兴了几天，连睡觉都合不拢嘴！女朋友很好奇问我为什么这么高兴，我一直都是笑而不语！</p>\n<h3 id=\"最终结果：-1\"><a href=\"#最终结果：-1\" class=\"headerlink\" title=\"最终结果：\"></a>最终结果：</h3><blockquote>\n<p>密码：zs_3_1415926_8</p>\n</blockquote>\n<h3 id=\"从密码逆推此君的性格：\"><a href=\"#从密码逆推此君的性格：\" class=\"headerlink\" title=\"从密码逆推此君的性格：\"></a>从密码逆推此君的性格：</h3><p>此人对自我要求很高，有强烈完美主义倾向——从使用圆周率作为密码并且密码体现高度对称美可以看得出来；其次，此人自信但不自负，如果非常自负，那么，他完全没有必要在在最前面使用自己的姓名，因为通常来说很少有人会想到用圆周率这种意象物作为自己的密码，自负的人会认为使用圆周率已经足够；这种人通常胸怀宽广，能接受别人的意见或者建议，经常会反躬自省自己的错误并予以改正，生活中，他会是一个良师益友，工作上，他会是给力的伙伴，既可深交也可共事。但是，其缺点是做事一旦关乎自己，有时候会过于追求完美，从其密码所使用的下划线高度体现对称可以看得出来，这种人打工迟早会成为一个优秀的项目管理人或高层经理，但是，开拓自己的事业却不容易打破常规。</p>\n<p>不管怎样，在工作过程中我一直与此君相处得很好，从来没有红过脸，对我这个脾气暴躁的人来说这是甚为难得的，很大一部分原因我想是源于我对他发自内心的尊重，甚至当我知道了他的密码以后，一直以来还带着深深的负罪感和愧疚感，因而都很少联系他了！</p>\n<hr>\n<h2 id=\"破解某邻居的QQ密码\"><a href=\"#破解某邻居的QQ密码\" class=\"headerlink\" title=\"破解某邻居的QQ密码\"></a>破解某邻居的QQ密码</h2><blockquote>\n<p>对象个人信息：<br>85后，男性，每天都见面，每次见面时都会彼此很客气地打招呼，聊过几次天；<br>聊天过程其发音非常清楚，说话偶尔会骂两句，说话简洁，非常富有条理性，极少包含“那个”，“然后”这种潮汕人俗称“话屎”的词语；<br>他对社会上的一些现象非常强烈的反感；<br>眼神清澈，给人的感觉非常阳光，健康；<br>有时爱与我聊中国古文化，西方启蒙时期的哲学与思想，并且一聊起来双眼发光，极其兴奋。</p>\n</blockquote>\n<h3 id=\"破解过程：-2\"><a href=\"#破解过程：-2\" class=\"headerlink\" title=\"破解过程：\"></a>破解过程：</h3><p>首先，聊天时知道了他的出生年份1987年，同时还知道了他的名字，假设为“李四”，还知道他出身于农村。</p>\n<p>其次，眼神清澈，而且一见面就愿意向你敞开心扉讲心里话的人通常涉世未深，通常缺少防范意识，这类人的密码保护意识通常也比较差，猜测其密码有可能是姓名加上出生年月日的组合。</p>\n<p>再次，说话条理清晰，不带任何“话屎”，而且喜欢聊哲学，这让我想起我的很多射手座朋友，以次推断他可能属于射手座。</p>\n<p>再次，射手座生于每年的11月23日——12月21日，尝试用他的名字拼命lisi加上19871201这样的组合进行测试，尝试大约三十次全部失败。</p>\n<p>突然，我想得他来自农村，父母在80年代那个时候，极有可能仍在使用农历，因此，注册他身份证的时候，很有可能跟我一样采用农历，上网用万年历查下1987年阳历11月23日——12月21日这段时期所对应的农历日期，对应的农历时间段是10月初三至11月初一。</p>\n<h3 id=\"最终结果：-2\"><a href=\"#最终结果：-2\" class=\"headerlink\" title=\"最终结果：\"></a>最终结果：</h3><blockquote>\n<p>密码：lisi_19871011</p>\n</blockquote>\n<h3 id=\"从密码逆推此君的性格：-1\"><a href=\"#从密码逆推此君的性格：-1\" class=\"headerlink\" title=\"从密码逆推此君的性格：\"></a>从密码逆推此君的性格：</h3><p>此君懂得使用下划线，说明他还有一定的密码保护意识，但是，从其使用自己姓名加上生日这一点可以判断他社会经验缺乏，应该较少与社会上的人接触，应该是宅男一类的人，工作不可能是销售类和管理类，很有可能是技术类。这种人通常比较爱交朋友，也非常值得交往，是那种你有万贯家财，到了重要的时候都可以放心托付给他一类的人。后来与他进一步的交往中一步步印证了我的论断。</p>\n<h1 id=\"个人密码加密建议\"><a href=\"#个人密码加密建议\" class=\"headerlink\" title=\"个人密码加密建议\"></a>个人密码加密建议</h1><p>需要使用密码的场合通常是银行的账号，其他的绝大多数则通常是上网的各种邮箱、某些客户端软件、或者论坛的登录密码。绝大多数人上网时候都会使用一个固定的密码，而且基本上没有修改密码的习惯，因此，只要你在某个论坛的密码一旦泄露，那么，很可能你的所有邮箱、游戏账号等密码都会被人家一锅端。</p>\n<p>存在这种现象其实很容易理解，就是因为人的惰性，而且现在的网站那么多，如果针对各个网站去设置不同的密码，对于很多人来说，几乎是不可能完成的任务，因为这样你不仅需要记忆几十个甚至上百个密码，还必须记忆各个密码与各个网站的对应关系。</p>\n<p>其实，有一种办法可以保证你的密码可以随着不同网站而进行变换，同时又不需要记忆对应关系的。以下就以这种方法作为切入点，对大家的密码设置提供一些建议，这种办法我们不妨命名为“随机有据字符加固定序列密码”。</p>\n<hr>\n<h2 id=\"随机有据字符加固定序列密码\"><a href=\"#随机有据字符加固定序列密码\" class=\"headerlink\" title=\"随机有据字符加固定序列密码\"></a>随机有据字符加固定序列密码</h2><p>这个名词拥有三个关键词——随机、有据、固定。先说“固定”，固定就是指你经常使用的密码，在你每个密码中都会出现的一个字符段，假如你已经用惯了某个密码，并且这个密码你把他用在绝大多数的地方，那么，就以这个密码作为固定序列，放在你新密码之中；所谓“随机”，指的是你设置的时候事先并不知道要设置什么样的字符，而是根据不同的网站或客户端进行变动，但是，其变动是有规则的，这个规则是你自己定的，而且不会让任何人知道；所谓“有据”，这个根据，则与网站的某一种要素挂钩，我推荐使用网站的名字，目的是方便你自己的记忆。以下我举个例子，你就会很清楚地理解这种所谓的“随机有据字符加固定序列密码”的特点了。</p>\n<p>假如你以往所常用的密码是qwert123，那么，在你的新密码中，同样保留这个字段，现在你自己定义这样一种规则：以网站的名称作为依据，登录任何一个网站，就以其名称作为参照物，截取其名称的第一个字母（或数字）和最后一个字母（数字），分别放在固定密码段的开头和结尾。例如：上新浪网，其名称为sina，那么，分别截取s和a，添加在你的固定密码组开头和结尾，那么，你在新浪上的密码就是sawrt123a；如果是迅雷的客户端，取其网站名Thunder的首字母t和最后一个字母r，这样你的迅雷地址就变成了tawrt123r，由于多了这样一层保护，那么，即使你的新浪微博密码丢失了，那么，别人也不容易用这个密码来盗取你的迅雷账号、qq号码，而且由于这种密码命名规则简单，你完全可以照用你原来的密码段，不用去修改密码输入的习惯。</p>\n<p>上述的命名规则完全由你自己来定，除了那种截取头尾的规则以外，还可以这样：截取网站名的首个字母或数字，同时数一下这个网站名的位数，如果是奇数，字母取大写；如果是偶数，字母取小写，将它加到你固定密码组的开头或者结尾；如果截取到的是数字，那么，同样数一下网站名的位数，如果是奇数，那么保留这样一个位数，如果是偶数，则将其双写，加到你的固定密码序列上。示例：sina，baidu，163和2144，sina包含4个字母，所以截取第一个字母的小写s；baidu是5个字母，于是截取其第一个字母的大写B；163是3个字符，于是取其第一个数字1,2144是4个字符，于是取其第一个数字的复写22，添加到你的固定密码组上，于是，你的新浪密码是sqwert123，百度密码则变成了Bqwert123，网易邮箱变成了1qwert123,2144网站的密码则变成了22qwert123。<br>总之，怎么组合就看你自己考虑了，但随机段截取的规则一定要清晰可行，并且自己要牢记，而且随机字段包含的信息越少越好，太多未必能保护自己的密码，相反更容易让有心人发现规律。</p>\n<h2 id=\"关于固定字符段的建议\"><a href=\"#关于固定字符段的建议\" class=\"headerlink\" title=\"关于固定字符段的建议\"></a>关于固定字符段的建议</h2><ul>\n<li>坚决不使用自己证件上所能查看到的信息，包括生日、证件号码、姓名及其缩写等等，同样也坚决不使用爱人和孩子的同类相关信息。更不要使用无脑型密码。</li>\n<li>可以使用电话号码，但是电话号码尽量使用老家的电话号码，并且对该电话号码添加或者减少一至两位的防盗码。</li>\n<li>可以使用爱人的昵称，但这个昵称最好是只有你和对方彼此知道的，尤其是互相吹枕头风的时候才使用的那种称谓。</li>\n<li>对于银行卡密码，如果你非要向爱人表达爱意，也可以使用你们的结婚纪念日或者其生日，但是一定进行诸如倒序、移位、加码等相关操作。例如：你们的结婚纪念日是2012年7月5日，你非要使用201275或者120775这样的数字，用倒序的观点，就成了572102和577021,；用移位的观点，不妨设置成720125或者071275；用加码的观点，可以是只加一位，变成201276和120776，也可以每位加1，312386,231886，什么规则由你自己选择，关键是你自己要容易记住，而别人又难以看懂。不要小看这种简单的操作，它很可能就是防止你密码泄露的关键。</li>\n<li>不需要考虑对称美，密码又不是让人看的，相反是见不得光的，见不得光的对称只能是孤芳自赏，因而，建议你采用下划线或者数字的时候，将其打乱之后插入字母中，最好其结构是一旦写出来会让人看着很别扭的那种——看着越别扭的密码越是好密码，相信我没错的！</li>\n<li>强烈建议使用图腾，因为那是你内心深处的东西，有时候即使是你最亲密的人都未必真正了解你内心深处在想什么，陌生人更加难以猜测。</li>\n<li>某些字母和数字之间由于形很相似，因而，当你需要使用数字时，不妨用字母进行一下伪装，反之亦然。包括1和l，2和z，6和b，8和B，9和q，0和o。</li>\n<li>没有必要定期修改你的固定字符段，那个意义不大，相反很可能会很容易就把自己弄晕，当然前提是你能做到上述提到的那些密码规则。</li>\n</ul>\n<h2 id=\"关于安全问题的建议\"><a href=\"#关于安全问题的建议\" class=\"headerlink\" title=\"关于安全问题的建议\"></a>关于安全问题的建议</h2><p>现在有很多网站尤其是论坛，为了所谓的安全性考虑，用户注册时通常会要求设置安全问题，以我自己的经验来看，那几乎是毫无作用的，这些安全问题通常会让你从8个左右的问题选择一个进行回答，很多人为了简单易记，通常会选择生日，这本来是没有什么问题的，问题在于电脑是没有智能的，它没有所谓的时间概念，相反，却有严格的格式概念，例如：某人生日是1980年1月1日，对于人来说，当某人问起你生日的时候，无论你是回答1980年1月1日，还是80年元旦，亦或是800101，都是一个概念，这个概念指向同一个目标，这个目标就是时间。然而对电脑来说，这几个却是完全不同的概念，对于电脑来说19800101与8011有着极大的差别，因而，有可能一些不同网站问你的是同一个问题，但是你在回答的时候却使用了不同的格式，这样注册多了，最后很可能连你自己都搞混了，有时候甚至会导致你自己连密码都修改不了。</p>\n<p>因而，我的习惯是除非网站指定安全问题为必填，否则我一律不填，如果填的话，我会随便选择一个问题，并且任何网站的任何安全问题，我都使用同一个标准格式，以前我使用的是“关你鸟事啊”，电脑问我你小学上那所学校啊？你爱人叫什么名字？我都一律回答“关你鸟事啊”——本来我怎样就不关你电脑你的事，还不是“关你鸟事”吗？！</p>\n","site":{"data":{"friends":[{"avatar":"http://q1.qlogo.cn/g?b=qq&nk=2750360683&s=640","name":"核心","introduction":"来自山东的一位普通高中生,喜欢捣鼓2333，爱好编程（新手）","url":"http://www.emtips.net/","title":"Piu~"},{"avatar":"https://i2.hdslb.com/bfs/face/2433a7d4053048811fec9907bcb066e867399da7.jpg","name":"SRO","introduction":"欢迎来到SRO知识库,您在这里可以看到大多数的SRO内部，外部资料","url":"https://sromc.cn/","title":"Piu~"},{"avatar":"http://q1.qlogo.cn/g?b=qq&nk=1692565761&s=640","name":"河南省商务中等职业学校","introduction":"网络搭建竞赛组","url":"https://hnswxx.cn/","title":"Piu~"},{"avatar":"http://q1.qlogo.cn/g?b=qq&nk=2191023046&s=640","name":"贺兰星辰","introduction":"HikariLan's Blog","url":"https://my.minecraft.kim/","title":"Piu~"}]}},"excerpt":"","more":"<h1 id=\"十大基本规律\"><a href=\"#十大基本规律\" class=\"headerlink\" title=\"十大基本规律\"></a>十大基本规律</h1><ol>\n<li>绝大多数人都高估了破译密码的难度和低估了自己密码存在的风险，因而，往往把能够破解密码的人当成神秘人物，同时基本很少有修改自己密码的习惯。</li>\n<li>绝大多数人一生常用的密码通常不会超过3个，如果你破解了某人的QQ密码，很可能你也破解了他的论坛密码、邮箱密码、游戏账号密码……</li>\n<li>从性别上看，男性的密码比女性的要更加难破；从年龄层面上看，年轻人的密码比35岁以上的人群的密码更加难破；从受教育层度上看，大专以上学历的人群相对于以下学历人群，密码破解难度更大，且大专、本科、硕士学历的人群密码破解难度基本上没有什么区别；从专业角度上看，理科生的密码比起文科生要难破一些，计算机相关专业的学生密码破解难度最大。</li>\n<li>绝大多数人的密码，基本上都是有确定含义的，随机乱码组成的密码极度罕见（应该说我从来没有遇到过，不过如果是这种密码，我这种基于心理的思路，可以确定毫无办法）。</li>\n<li>大多数人的密码要么纯粹用数字组成，要么纯粹用小写字母组成，要么用数字加字母组成，只有很少人会采用下划线，极少数的人字母区分大小写。</li>\n<li>密码所采用的字母中，很多都是姓名拼音、名字拼音的全部或首字母缩写，某一图腾的英文单词（通常是名词）——图腾的含义后面会提到，某一单位名的首字母缩写，以及某一地名的拼音或英文及其缩写。</li>\n<li>密码所采用的数字中，很多有关日期，且该日期对密码所有人拥有极其重要的意义，还有很多与地名和电话号码有关。</li>\n<li>使用下划线的密码，下划线通常只出现一次，一般这类密码的主人密码保护意识很强，其密码往往还包含数字和字母，这种密码的下划线的位置通常处在数字和字母的分隔处；字母区分大小写的密码，大写通常只出现一次，并且很多时候都出现在密码的开头，极少数出现在结尾。</li>\n<li>除非所登录系统有严格的位数限制，否则密码的位数通常是8位到11位，7位以下的密码和12位以上的密码较为少见。</li>\n<li>公共网络的密码通常很少包含个人信息，大多数是单位名称的全部或某一部分的中文或英文全称，或者英文或拼音的首字母缩写，外加拥有特定含义的数字，这种数字通常是电话号码或者门牌号，另外，有些密码是上述特定字母或其缩写的简单重复，如：12341234、abcabcabc；个人密码则很少出现上述简单重复的情况。</li>\n</ol>\n<h1 id=\"十大规律隐含的心理学特性\"><a href=\"#十大规律隐含的心理学特性\" class=\"headerlink\" title=\"十大规律隐含的心理学特性\"></a>十大规律隐含的心理学特性</h1><h2 id=\"惰性\"><a href=\"#惰性\" class=\"headerlink\" title=\"惰性\"></a>惰性</h2><p>从上述很多条规律都可以看出人或多或少存在惰性，比如很少人会定期修改密码；再如很少人密码会区分大小写，因为这样的话必须进行至少一次大小写切换；再如各种不同账号使用同一密码都是人存在惰性的有力证明。</p>\n<h2 id=\"自我意识\"><a href=\"#自我意识\" class=\"headerlink\" title=\"自我意识\"></a>自我意识</h2><p>自我意识很多时候体现在使用名字的密码上，通常，自我意识较为强烈的人，很看重自己的名号或者名誉，因而，其密码一旦使用自己的名字，往往就是名字的全拼，较少使用缩写，更不会省略自己的姓氏，另外，这类人也有很大一部分使用的是某一图腾的英文单词，例如某人非常崇拜某一偶像，那么，这个偶像就是他的图腾，其密码很有可能与这个图腾有关。</p>\n<h2 id=\"自我保护意识\"><a href=\"#自我保护意识\" class=\"headerlink\" title=\"自我保护意识\"></a>自我保护意识</h2><p>从公用密码很少包含个人信息这一点很容易印证自我保护的问题，一般来说，当某一网管或其他特定工作性质的人需要为某公用账号设置密码时，首先需要考虑的是密码易为别人所理解和记忆，然而，一个人在考虑秘密之类的东西时，首先联想的是他自己身上的东西，由于这些东西涉及其个人隐私，因而很容易被他的潜意识所排除。</p>\n<h2 id=\"爱与责任感\"><a href=\"#爱与责任感\" class=\"headerlink\" title=\"爱与责任感\"></a>爱与责任感</h2><p>不少人的密码会使用伴侣和孩子的姓名或生日、结婚纪念日、自己公司成立日期等诸如此类的信息，这很明显地体现了爱和责任感。</p>\n<h2 id=\"完美主义倾向\"><a href=\"#完美主义倾向\" class=\"headerlink\" title=\"完美主义倾向\"></a>完美主义倾向</h2><p>完美主义倾向在密码中主要体现在对称与平衡上面，这从名字加日期的组合式密码和带下划线的密码可以很容易看出来，例如，某人叫做张三，生日是1980年1月1日，那么，如果采用前者，其密码往往是zhangsan19800101或者zhangsan8011，不大可能设置成z1h9a8n0g0s0a1n01这种类型；如果使用下划线密码，则很大可能会采用zhangsan_19800101或者zhang_san_19800101，不大可能采用_zhangsan19800101或者z_hangsan19800101这种类型。</p>\n<h1 id=\"常见的无脑型密码\"><a href=\"#常见的无脑型密码\" class=\"headerlink\" title=\"常见的无脑型密码\"></a>常见的无脑型密码</h1><p>所谓无脑型密码，指那种破解起来没有任何技术含量，纯粹依靠运气就可以破解的密码，这种密码通常为公用，其结构很多时候为：某一数字的简单重复，某一简单规则的数字序列，某一简单规则的字母序列，按某种简单规则组合的数字和字母序列，以上四种密码有以下一些典型例子：01223456789,1234567890,123123123,12341234,0987654321，13579824680。</p>\n<p>或者这样：qwertyuiop，abcabcabc，abcdabcd，abcdefg,八个8,八个6，八个1，八个0，八个或者九个9，abcd1234,abc123abc123,abcd4321，所在城市区号的简单重复，等等。</p>\n<p>这种无脑型密码常见于公用的网络或者邮箱账号，尝试破解公共密码的时候，通常优先选用以上提到的这些密码进行尝试，在北京的时候，我用qwertyuiop破解了一次路由器的密码，来到潮州之后，第一次用1234567890破解了一次密码，后来才知道是同事手机网络的密码，现在用的网络是邻居的，密码是8个8.</p>\n<h2 id=\"公共网络的路由器密码破解法\"><a href=\"#公共网络的路由器密码破解法\" class=\"headerlink\" title=\"公共网络的路由器密码破解法\"></a>公共网络的路由器密码破解法</h2><p>其实从严格意义上来讲，只要接了路由器，那么，其网络必定是共享的，因而只要接了路由器的网络，都可以看成是公用网络，区别在于公用的程度，一般来说，从公用的程度来讲，路由器可以分为四类：公共场所、公司、公租房、家庭，其中公用程度越高，密码破解难度就越低。</p>\n<h2 id=\"公共场所的路由器密码破解法\"><a href=\"#公共场所的路由器密码破解法\" class=\"headerlink\" title=\"公共场所的路由器密码破解法\"></a>公共场所的路由器密码破解法</h2><p>公共场所通常包括旅馆、饮食场所、网吧、商场等人流量大，人群确定但身份群不稳定的场所，这种场所的网络基本上不会包含任何个人信息，且大多数密码都是无脑型密码，此外最常见的密码是以下几种：</p>\n<ul>\n<li>场所名称的拼音或英文的简单重复</li>\n<li>场所门牌号的简单重复或前半部分为门牌号，后一部分为门牌号的倒序</li>\n<li>场所名拼音或英文加上场所所在门牌号或分店号</li>\n<li>场所预约电话、送餐电话或400免费服务电话</li>\n<li>场所名拼音或英文加上4位到6为无脑型密码</li>\n<li>场所门口某路公交车号码的简单重复</li>\n</ul>\n<blockquote>\n<p>总的来说，很多的场所是不设置密码的，设置密码的作用也不大，其设置密码的目的通常是防止临近商家或住户的盗用，但只要这些用户稍微花点心思，则获取密码易如反掌。</p>\n</blockquote>\n<h2 id=\"公司路由器密码破解法\"><a href=\"#公司路由器密码破解法\" class=\"headerlink\" title=\"公司路由器密码破解法\"></a>公司路由器密码破解法</h2><p>如果你在搜索网络的时候，搜索到网络名为4位以上的大写英文字母的，这种网络很有可能是公司网络，其密码的组合通常非常简单，除了以上提到的无脑型密码以外，很有可能采用如下几种形式。</p>\n<ul>\n<li>公司名拼音或英文的简单重复，如中国移动，其某一门店的哦网络有可能是zgydzgyd，或者chinamobile</li>\n<li>公司门牌号的简单重复或者前半部分为门牌号，后一部分为门牌号的倒序，例如某公司位于某栋大楼的1606室，那么其密码有可能是16061606或者16066061</li>\n<li>公司前台电话号码，有时还会加上公司所在城市的区号</li>\n<li>公司名拼音或英文加上公司门牌号</li>\n<li>公司名拼音或英文加上某一4位到6位的无脑型密码</li>\n<li>公司名拼音或英文缩写加上电话号码或电话号码的最后4位</li>\n</ul>\n<blockquote>\n<p>总之，公司的网络由于用的人多，所以，其密码包含的较难记住的信息越少，破解难度是非常低的，只要有耐心多尝试几次，一般来说，都不难破解，至于公司的名称、门牌号码和电话号码如何获得，这个我想只要你在一些写字楼上过班，都不用我来教你。</p>\n</blockquote>\n<h2 id=\"公租房路由器密码破解法\"><a href=\"#公租房路由器密码破解法\" class=\"headerlink\" title=\"公租房路由器密码破解法\"></a>公租房路由器密码破解法</h2><p>这里所谓的公租房，是指来自不同地方彼此不认识的人或者彼此要好的同学、朋友、同事一起租住的房子，包括大学宿舍，职工宿舍，同时还包括彼此独立租房，但共用一个网络的用户群。</p>\n<p>公租房的密码类型已经或多或少接近于家庭密码，但由于成员关系不如家庭那么亲密，因而，其包含的个人信息依然较少，破解的成功率依然较为可观。除了上述提到的无脑型密码以外，公租房的密码通常还有以下几种类型：</p>\n<ul>\n<li>所在小区名或楼层名拼音的全部或者拼音简写的简单重复，例如“金碧花园”用户，其密码就有可能是jinbihuayuan或者jbhyjbh</li>\n<li>房号或者楼号加房号或其简单重复，或者前一部分为房号，后一部分为房号的倒序，例如我在北京时候住在某栋小区的2号楼2单元1202房，我为租用我网络的用户设置的密码就是12022021；同时，尝试过登录邻居路由器的时候，住在1201的公租房用户，其密码为12011201；住在11楼3号房的用户，其路由器密码为02021103。</li>\n<li>小区名的简写加上房号，例如，我在北京住的小区名为华龙美晟，搜到我楼下2号房的用户，其路由器密码为hlms1102。</li>\n<li>宿舍电话号码或者前面加上区号，例如，广州某大学宿舍的电话号码为61306325，那么，其密码有可能就是61306325或者02061306325.</li>\n<li>公租房用户都要经常用到的某一电话号码，例如送水电话，送煤气的电话，送餐电话，等等。</li>\n</ul>\n<h2 id=\"家庭路由器密码破解法\"><a href=\"#家庭路由器密码破解法\" class=\"headerlink\" title=\"家庭路由器密码破解法\"></a>家庭路由器密码破解法</h2><p>家庭密码在这四类密码中间，相对来说是最容易破解的，因为大家彼此都很亲密，因而，这类密码通常包含了不少家庭方面的信息，不过，从人性的角度来将，再亲密的人彼此之间也是存在隐私的，因而，这类密码通常不会包含真正内心深处的隐私，因而，相对于个人密码来讲，其破解难度要低得多。</p>\n<p>不少的家庭路由器密码依然使用上述的无脑型密码，另外一些则具备公租房密码的特点，以上这些都不再赘述，下面谈谈家庭路由器密码相对于公租房密码所不具备的特点及其破解方法。</p>\n<ul>\n<li><p>家庭姓氏拼音的简单重复，这种常见于姓氏拼音4个字母以上的家庭，如张、周等，而像李、林一类的姓氏，这种方式就要少见得多。另外，有趣的是，以姓氏进行简单重复的密码，其首字母通常会采用大写，有的甚至是遇到第一个字母就大写一次的现象，例如某一姓张的家庭，其密码有可能会采用Zhangzhang或者ZhangZhang的格式。</p>\n</li>\n<li><p>家庭所居住的房屋的电话号码或者区号加上电话号码，这类密码有时候家庭会出于安全考虑，在电话号码最后会加上一位到两位防盗码。例如，某家庭的电话号码是81008100，那么其路由器密码有可能会是810081000，最后一个0就是防盗码。</p>\n</li>\n<li><p>老家的电话号码，这是我阅读上面提到的那份资料所发现的一个密码规则，当时我发现有几个人采用这种类型的密码，其中一个人注册资料填写的寄件地址是北京，而户籍地址是河北某县的，而其密码以0开头，看起来像一个电话号码，因而上网查找，果然发现这个密码的前面几个数字与其户籍地址所在的县城区号相对应，因而断定这是一个老家的电话号码，尽管这属于个人密码，但是由于老家的电话是家庭成员所共知的，因而完全有可能被用作路由器密码。</p>\n</li>\n<li><p>家庭姓氏的拼音加上电话号码或者手机号码。</p>\n</li>\n</ul>\n<p>以下几条是我认为可能存在的规则，但是由于之前破解的过程没有相关的信息，因而没有经过验证的，一并提出来供大家参考。</p>\n<ul>\n<li>夫妻两个人的姓氏加上结婚纪念日，有可能是两个姓氏连在一起，后面加上结婚纪念日；也有可能是两个姓氏分别放在两端，结婚纪念日放在中间。</li>\n<li>第一个孩子的姓名、小命加上孩子生日。</li>\n<li>父亲或者母亲的生日。</li>\n<li>夫妻之间妻子的姓名，丈夫私底下对其的爱称加上妻子的生日。这一条是有性别的分工所决定的，因为通常涉及电脑的东西，男性懂得会更多，因此借此机会向配偶表达一下爱意是完全可能的。</li>\n<li>家里养的宠物的名字加上某一特定含义的数字。</li>\n</ul>\n<blockquote>\n<p>总之，只要你掌握足够的信息，通过这上面已经经过验证和没有经过验证的几条规律，就有极大的可能破解人家的路由器密码。</p>\n</blockquote>\n<p>以上就是几种人群分布所在网络的路由器密码破解的主要内容，而有的时候，破解密码甚至都不需要用到以上的方法，因为路由器通常也就是那么几个品牌，而很多品牌的路由器地址都是固定的，例如TP-Link及其他很多品牌的很多型号使用的地址是192.168.1.1，像腾达则很多使用192.168.0.1，而各大品牌的路由器的默认初始登录账号和密码都是admin，偏偏很多人又不会操作，有的即使懂得操作也不愿意去修改路由器的登录密码，因而有时候你可能很轻松的就进入人家的路由器去进行诸如设定固定IP、修改流量、重启路由器等操作。如果你搜索某个网络的网络名是诸如Tenda，TP-Link_2D18FA这样的含有品牌名的网络，那么，很有可能他的路由器登录密码也是没有修改的，只要你懂得路由器怎么操作，那么，这种网络是很容易就突破了。</p>\n<h2 id=\"基于性格分析的个人密码破解法\"><a href=\"#基于性格分析的个人密码破解法\" class=\"headerlink\" title=\"基于性格分析的个人密码破解法\"></a>基于性格分析的个人密码破解法</h2><h3 id=\"个人密码常用的组成要素\"><a href=\"#个人密码常用的组成要素\" class=\"headerlink\" title=\"个人密码常用的组成要素\"></a>个人密码常用的组成要素</h3><ul>\n<li>自己姓名、伴侣姓名、孩子姓名的拼音或其缩写。</li>\n<li>自己生日、伴侣生日、孩子生日、父亲或母亲生日、自己公司开张纪念日、结婚纪念日、某个亲人的忌日等对密码主人有特别重要意义的日期。</li>\n<li>家庭电话号码、老家电话号码、个人手机号码、爱人手机号码。</li>\n<li>身份证、房产证、驾驶证、自己公司的经营许可证、营业执照等证件的号码或其号码段。</li>\n<li>与自己所追求或崇拜的事物有关的事物（即：图腾）的名称或日期。</li>\n<li>自己、亲人、宠物、图腾的昵称。</li>\n<li>爱人或者某一图腾的名称（通常是简称），加上1314（一生一世）或者5201314（我爱你一生一世）这样拥有谐音特性的数字串。</li>\n</ul>\n<h1 id=\"图腾\"><a href=\"#图腾\" class=\"headerlink\" title=\"图腾\"></a>图腾</h1><p>“图腾”体现在现代人的精神世界里，很多的时候是爱、理想、人格参照物等美好事物的象征。其一般意义通常与宗教或者原始崇拜有关，而宗教之所以能够一直存在，很大程度在于其能直达人类的内心深处，密码“密”的特点与图腾的这种特点很容易就能够互相结合，因而，与图腾相关联的一些事物，很容易被人们选作密码的载体。</p>\n<p>在密码中，常见的图腾通常有以下几种：</p>\n<ul>\n<li>初恋对象的名字拼音或其缩写，或者昵称的英文，初恋对象的生日或与初恋各种第一次的日期，与初恋对象有关的事物，例如某只宠物的名字、第一次约会的地点。</li>\n<li>某个特别崇拜的人物的姓名、外号或者生日、忌日。</li>\n<li>某个特别向往的地方的名字，包括发誓一辈子无论如何要去一次的地方或者故乡。</li>\n<li>某个特别向往的神话人物或一种与一种理想生活有关的事物，例如：乌托邦（Utopia）。</li>\n<li>某个童年时期对自己影响极深的人物的名字或者事物的名称，例如：电影《公民凯恩》中，凯恩至死都念念不忘的“rosebud”，如果凯恩生在现代，那么，我刚说他的密码百分之百会包含这个单词。</li>\n</ul>\n<h2 id=\"不同人格类型的人群使用密码的习惯\"><a href=\"#不同人格类型的人群使用密码的习惯\" class=\"headerlink\" title=\"不同人格类型的人群使用密码的习惯\"></a>不同人格类型的人群使用密码的习惯</h2><p>由于各自使用的标准不同，古今中外各种心理学家和人物学家，对于人群的分类方法可谓千差万别，例如：儒家通常会将人分为圣人、君子、小人，三国时期的刘劭则将人按才的不同分为英、雄、俊、杰，中国的命理学更是将人按照生辰八字的结合分出“财官双美格”、“食神生财格”等多种类型，而“阴阳二十五人”分类法则将人按照五行体现的气质将人分为二十五类；西方心理学有按星座进行区分的，还有按照九型人格进行区分的，而像弗洛伊德则将人的思想分为有意识和无意识两种，施普兰格尔则把人格分为理论、经济、艺术、社会、政治、宗教6种类型……</p>\n<p>由于理论基础不一样，因而其分类方法就不一样，对于密码来说，上述无论任何一种理论所提供的分类方法都难以能够和该人群的密码使用习惯一一对应，因而，下面我将结合自己的经验以及自己的思考，对不同类型的密码所对应的人群进行分类。</p>\n<hr>\n<p>由于自己过往破译的密码并不算太多，而阅读过的那份材料所涉及的人又全部素未谋面，加上我并没有学过系统的心理学课程，因而，以下的分类方法未必科学，难免会遗漏某些人格类型，同时，也缺乏统计学意义上的证据作为支撑，因而你不妨把他看成是一种无稽之谈。需要特别指出的是，以下分类所涉及的人群，并没有严格的界限，有很多人同时兼具不同的性格特点，因而其密码也会同时拥有各自的特点。</p>\n<h3 id=\"责任感型\"><a href=\"#责任感型\" class=\"headerlink\" title=\"责任感型\"></a>责任感型</h3><p>责任感通常来源于自信以及对家人强烈的爱，这种人通常在社会上比较成功，对社会现象有特定的判断标准，且其看法不容易为别人所动，体现在生活习惯上，他们选择工作时通常比较谨慎而且目标明确，日常生活较为单一，除了工作以外，他们会花很多的时间陪家人，赚来钱通常花在家人身上或者交给爱人保管。这种人群的密码通常包括以下的要素：爱人的姓名、昵称或生日，结婚纪念日，孩子的姓名、昵称或生日，老家的电话号码，父亲或母亲的生日。</p>\n<h3 id=\"洁癖型\"><a href=\"#洁癖型\" class=\"headerlink\" title=\"洁癖型\"></a>洁癖型</h3><p>此处指精神意义上的洁癖，这种人的思想中存在一个特定的界限，这个界限是无论自己还是别人都不允许逾越的禁区。这种人要么特别成功，要么整天抱怨；要么像个外交家，要么极度孤僻；同时他们别人的某些行为或者社会想象拥有常人所难以理解的评判标准，这种人的自我意识通常很强，而且对某种理想的人事或者生活拥有强烈的向往，在他们的内心深处，通常埋藏着一段失败但又刻骨铭心的情感经历。这一类型的人，其密码最大的可能是使用图腾。</p>\n<h3 id=\"两肋插刀型\"><a href=\"#两肋插刀型\" class=\"headerlink\" title=\"两肋插刀型\"></a>两肋插刀型</h3><p>这一类人通常具备很强的领袖气质，而且极度自信，他们通常有很多的朋友，而且非常好动，属于坐久了屁股就会长疮的人，他们隔三岔五就会带一大群朋友回家吃饭或者睡觉，也经常夜不归宿，朋友需要帮忙的时候，他们通常会二话不说地伸出援手，也经常路见不平，他们通常自我意识强烈，很少对人设防。其密码的类型通常不是无脑型就是自己的姓名加上出生年月，且姓名必定是姓氏加名字的全部字母，极少使用简写，顶多加上一两位的防盗码，有时也会使用亲人的信息。</p>\n<h3 id=\"幻想型\"><a href=\"#幻想型\" class=\"headerlink\" title=\"幻想型\"></a>幻想型</h3><p>幻想型通常存在于花季少女，这种人的QQ空间、博客和微博通常带有炫目的色彩，通常使用一些童话、神话或幻想世界中才有可能存在的事物，他们追求时尚，爱看偶像剧，常会做出孩子气的行为，对小动物通常非常呵护，有不少人有养宠物的习惯，她们通常家庭条件较好，从小受惯长辈的宠爱，她们内心深处通常非常自私，尽管外表并非如此。这种人的密码类型通常使用图腾，且该图腾一般是某个白马王子的姓名或者生日，或者宠物的名字，或者某种她幻想中的理想事物。</p>\n<h3 id=\"好斗型\"><a href=\"#好斗型\" class=\"headerlink\" title=\"好斗型\"></a>好斗型</h3><p>所谓好斗型，并非指表面上爱与人争吵或者打架，而是指表面上不懂声色，但却在暗处与你暗暗较劲的人，例如某次你考了第一名，而他考了第三名，在别人都恭维你，要你请客吃饭的时候，他会找借口不去，或显得心事重重，私底下会更加卖力学习，期望下一次考试超越你。这种人通常自我意识强烈，拥有让人难以忍受的自负，妒忌心也很强。这类人的密码通常与他自己有关，其使用的密码，通常要么包含自己的昵称、姓名、手机号码或生日，也有很大几率使用图腾，且这个图腾极有可能是他在孩提时代或青春期对他成长产生强烈影响的事物。</p>\n<h3 id=\"事业领袖型\"><a href=\"#事业领袖型\" class=\"headerlink\" title=\"事业领袖型\"></a>事业领袖型</h3><p>这种人通常也具备很强的责任感，但与责任感型的人相比，他们的责任感的重心更多的放在工作上，他们严格要求自己，更加严格地要求自己的下属和亲人，有时会让人觉得无法忍受，工作起来，这种人是废寝忘食的，当他投入工作的时候，决不允许别人打扰他，说话的时候，一旦被人打断或者听到不想听的话，就会直接质问对方，这种人的密码，很多时候会使用自己的名字或者昵称，且很多时候会使用缩写或者不包括姓氏的名字拼音，或者与他公司或者事业有关的名称或号码，有时也会使用图腾，且该图腾要么是他认为别人绝对意想不到的事物。</p>\n<h3 id=\"完美主义者\"><a href=\"#完美主义者\" class=\"headerlink\" title=\"完美主义者\"></a>完美主义者</h3><p>其实每个人或多或少都有完美主义的倾向，对于完美主义倾向比较显著的人来说，他们未必注重自己着装的品位，但是他们会追求有品质的事物；他们崇拜的对象通常都是人格、智力都看上去完美无缺的人；他们的房间通常物品摆放整齐，有时出门走到半路，想起家里某个物品没有摆放好，甚至会跑回来把他放到让自己看起来安心的位置；他们通常喜欢自己整理自己的房间，不喜欢让别人插手，因为，在他们看来，由别人经手的东西都是不完美的；这种人通常严于律己，洁身自好，而且在道德上有种让一些小人难以忍受的优越感；这类人也许也会讲脏话，但在他们内心深处，对纯洁的爱情却极度向往，大多数这方面的男性拥有处女情结，女性则通常向往王子公主式样的爱情。这类人的密码，一旦使用名字，则名字很大几率是全名，或者是某一特定的单词（如love，great等具有美好意义的形容词）加上全名的简称，一旦使用日期则日期通常是20120101这样的格式，很少会选择1211或120101这种格式，一旦使用电话号码，则电话号码通常包含区号，他们手机的电话簿，每个人的人名通常是全名，极少会忽略姓，也很少使用昵称；一旦使用下划线，则下划线的位置通常是能够高度体现对称美的。</p>\n<h3 id=\"现实主义者\"><a href=\"#现实主义者\" class=\"headerlink\" title=\"现实主义者\"></a>现实主义者</h3><p>现实主义者体现在思想上，不相信奇迹，他们行为上不容易走极端，但思想上却非常极端，例如，他们相信某个名人的成功是难以复制的，尤其是他身边的人；他们认为官员中没有好官，娱乐圈的女性每个都被潜规则过，有时候和他们交谈，你会忍受不了他们满口的大道理。这类人的密码，一旦使用姓名，通常是简写，日期则以简约型的居多，如果使用下划线，他们对于对称没有什么要求，有时下划线会出现在第一位，字母区分大小写的在这一类型的人中最为常见。</p>\n<p>以上八种人格类型，到目前为止，是我所能遇到并总结出来的全部有关密码在性格特征上的分类，在我过往所破解和遇到的密码中，还没有任何一个密码所对应的人群逃得过以上所谈到的情况。另外，从星座的观点来看，还有一些比较有趣的现象，例如，责任感型密码通常分布在天蝎座、射手座、狮子座、处女座上面，洁癖型的密码通常分布在水瓶座、双子座、天蝎座、白羊座和处女座，两肋插刀型则很多分布在白羊座、双鱼座、狮子座和摩羯座上面，幻想型绝大部分分布在双子座、天平座、射手座、水瓶座上面，好斗型则很多分布在白羊座、巨蟹座、天蝎座、处女座和摩羯座上面，事业领袖型则很多分布在金牛座、狮子座、天平座和摩羯座，完美主义者型则大多出现在白羊座、天平座和水瓶座，现实主义者则很多分布在金牛座、巨蟹座、射手座和摩羯座。另外，双子座、双鱼座和天平座最容易使用无脑型密码。双子座和水瓶座使用密码的规律最难以捉摸。</p>\n<blockquote>\n<p>上述总结的内容正确与否还有待进一步验证，你也可以从上面找到一种你认为最符合你性格特征的类型，结合你自己的密码进行验证。</p>\n</blockquote>\n<h1 id=\"密码破解案例示范\"><a href=\"#密码破解案例示范\" class=\"headerlink\" title=\"密码破解案例示范\"></a>密码破解案例示范</h1><h2 id=\"破解某公司会议室路由器密码\"><a href=\"#破解某公司会议室路由器密码\" class=\"headerlink\" title=\"破解某公司会议室路由器密码\"></a>破解某公司会议室路由器密码</h2><blockquote>\n<p>公司信息：<br>IT行业；<br>公司名称两个汉字，全部拼音为10个字母；<br>英文简写为4个字母，假设为abcd；<br>会议室在16楼，号码已经忘记，以1601作为示例。    </p>\n<p>路由器类型：<br>TP-Link品牌某型号路由器，登录地址为192.168.1.1，不具备无线功能，有线登录时也需要账号密码  </p>\n<p>网管人员：<br>认识的人，性格有点墙头草，容易左右摇摆；<br>一旦跟他说话时语气强硬，对方则深怕会得罪你的样子；<br>开会时经常心不在焉，说话有时不着边际；<br>做事拖沓，有头无尾  </p>\n</blockquote>\n<h3 id=\"破解过程：\"><a href=\"#破解过程：\" class=\"headerlink\" title=\"破解过程：\"></a>破解过程：</h3><p>首先，分析网管人员的性格特点，由于是IT从业人员，因而通常具备较强的密码保护意识，因而不大可能使用无脑型密码，此外，从此人做事的习惯来看，可看出其对专业服务意识及自我认同度较差，不大可能使用严格的加密法。</p>\n<p>其次，上述性格类型的人通常有一种不安全感，因而，其设置的密码不大可能使用他自己的个人信息；此外，做事不认真的人通常有一定惰性，其设置的密码不会太长，八位至十位是最有可能的位数。</p>\n<p>其三，由上述两条可以判断，密码使用最大的可能要么是公司名全部拼音的10个字母，要么是英文缩写的简单重复或者英文缩写加上1601，也有可能是房间好的简单重复；进一步分析，此网管头脑简单，通常他宁愿使用16011601这样的序列，也不会有那心情去对后面的那个1601进行倒序。</p>\n<p>最后，账号名通常会使用约定俗称的字母组成，且很可能是4位到6位，所以，账号很大可能是公司简称abcd。</p>\n<h3 id=\"最终结果：\"><a href=\"#最终结果：\" class=\"headerlink\" title=\"最终结果：\"></a>最终结果：</h3><blockquote>\n<p>账号：abcd<br>密码：16011601  </p>\n</blockquote>\n<h3 id=\"从密码逆推网管人员的性格：\"><a href=\"#从密码逆推网管人员的性格：\" class=\"headerlink\" title=\"从密码逆推网管人员的性格：\"></a>从密码逆推网管人员的性格：</h3><p>平时对其印象完全正确，此人可做朋友，因为他没有什么心机，不会害你，但不可共事，因为缺乏责任感。日后项目重要节点的相关事项尽量不能托付给他，即使不得已托付此人，也必须保持高度警惕，不时跟进。然而，非常遗憾的是，最后关头我依然险些栽在此人手里，那是为了校对数据，由于当时系统有多个平台，而校对数据必须在真实平台上进行，在校对前，我特意向他用邮件和电话确定真实平台地址，后来安排了自己公司和合作单位的20几个人校对了整整一天，最后还是发现此人给我的地址是个测试平台地址，气得老子当着公司和他们公司领导的面狠狠地耍了一回酷，不过气归气，工作却得从头再来，于是只好一边找了10几个人，说了半天的好话，熬到半夜两点多才把所有数据校对完毕，91ri.org庆幸总算没有拖慢项目进度！</p>\n<hr>\n<h2 id=\"破解某同事个人密码\"><a href=\"#破解某同事个人密码\" class=\"headerlink\" title=\"破解某同事个人密码\"></a>破解某同事个人密码</h2><blockquote>\n<p>对象个人信息：<br>IT公司中层经理，多个项目参与者及主要负责人；<br>做事认真，有条不紊，名牌大学毕业；<br>为人圆滑、精明——应该说我很少遇到这么聪明的人；<br>对自己的业务能力极度精通，在公司人称“鬼才”；<br>性格平和，对下属非常宽容，经常面带微笑，拥有很强的人格魅力；<br>思维严谨，经常看有关人性和数学方面的书籍</p>\n</blockquote>\n<h3 id=\"破解过程：-1\"><a href=\"#破解过程：-1\" class=\"headerlink\" title=\"破解过程：\"></a>破解过程：</h3><p>首先，由于此人从属于IT行业，加上拥有很高的智商，因而通常拥有很强的密码保护意识，绝不可能使用无脑型密码——应该说，觉得他会使用无脑型密码就是对他智商的侮辱。</p>\n<p>其次，他也不大可能会在密码中透露自己的个人信息和爱人的身份信息，使用广州家里的电话号码，办公室号码和手机的可能性也不大，除非是老家的电话号码。</p>\n<p>再次，由于其强烈的密码保护意识，他的密码通常会比普通人的要长，有可能会达到13位以上。</p>\n<p>再次，最大可能是此人会使用“图腾”，由于其思维的严密性，喜欢数学，空间思维能力较强，会比较注重对称美，加上强烈的密码保护意识，很有可能会使用下划线，并且下划线的位置会高度体现对称美。</p>\n<p>再次，其使用的图腾极有可能是很多人平时容易忽略的常识性意象物，并且很有可能与其爱好有关，这时候一个意念物在我脑中一闪而过——圆周率π！印象中第一次接触这个常数倒不是在数学课，而是在历史课上，现在依然记得老师跟我们吹嘘的中国历史，还记得祖冲之以及“3.1415926至3.1415927之间”这句话。的确，对于一个酷爱数学的人来说，如果在数学世界里采用某个常数作为密码的意象物，还有什么比这个东西更合适的？——既是圆身上的东西，本身就是完美的象征，同时其通常被记住的位数是8位，在长度上也非常符合密码使用的习惯。</p>\n<p>最后就是组合了，小数点很有可能会采用下划线或者p(point)代替，首选3.1415926，这其实是一个无限循环的数字，而无限的符号我们知道，是一个横着写的8，对于高度注重对称美的数学爱好者来说，很可能会在数字和无限之间进行一下区分，于是，我首先想到的两个密码是3_1415926_8还有3p1415926_8，用其邮箱进行验证，结果均失败，数一下长度，只有11位，而且第一个还没有字母，而前面说过，通常使用下划线的人密码保护意识是很强的，通常使用了下划线，那么，其密码很可能包括数字和字母——字母嘛，首先想到的当然是他的名字缩写，为了不透露他的个人隐私，假设他叫张三好了。最后，当我破解了他的密码的时候，我差点兴奋得跳了起来，足足高兴了几天，连睡觉都合不拢嘴！女朋友很好奇问我为什么这么高兴，我一直都是笑而不语！</p>\n<h3 id=\"最终结果：-1\"><a href=\"#最终结果：-1\" class=\"headerlink\" title=\"最终结果：\"></a>最终结果：</h3><blockquote>\n<p>密码：zs_3_1415926_8</p>\n</blockquote>\n<h3 id=\"从密码逆推此君的性格：\"><a href=\"#从密码逆推此君的性格：\" class=\"headerlink\" title=\"从密码逆推此君的性格：\"></a>从密码逆推此君的性格：</h3><p>此人对自我要求很高，有强烈完美主义倾向——从使用圆周率作为密码并且密码体现高度对称美可以看得出来；其次，此人自信但不自负，如果非常自负，那么，他完全没有必要在在最前面使用自己的姓名，因为通常来说很少有人会想到用圆周率这种意象物作为自己的密码，自负的人会认为使用圆周率已经足够；这种人通常胸怀宽广，能接受别人的意见或者建议，经常会反躬自省自己的错误并予以改正，生活中，他会是一个良师益友，工作上，他会是给力的伙伴，既可深交也可共事。但是，其缺点是做事一旦关乎自己，有时候会过于追求完美，从其密码所使用的下划线高度体现对称可以看得出来，这种人打工迟早会成为一个优秀的项目管理人或高层经理，但是，开拓自己的事业却不容易打破常规。</p>\n<p>不管怎样，在工作过程中我一直与此君相处得很好，从来没有红过脸，对我这个脾气暴躁的人来说这是甚为难得的，很大一部分原因我想是源于我对他发自内心的尊重，甚至当我知道了他的密码以后，一直以来还带着深深的负罪感和愧疚感，因而都很少联系他了！</p>\n<hr>\n<h2 id=\"破解某邻居的QQ密码\"><a href=\"#破解某邻居的QQ密码\" class=\"headerlink\" title=\"破解某邻居的QQ密码\"></a>破解某邻居的QQ密码</h2><blockquote>\n<p>对象个人信息：<br>85后，男性，每天都见面，每次见面时都会彼此很客气地打招呼，聊过几次天；<br>聊天过程其发音非常清楚，说话偶尔会骂两句，说话简洁，非常富有条理性，极少包含“那个”，“然后”这种潮汕人俗称“话屎”的词语；<br>他对社会上的一些现象非常强烈的反感；<br>眼神清澈，给人的感觉非常阳光，健康；<br>有时爱与我聊中国古文化，西方启蒙时期的哲学与思想，并且一聊起来双眼发光，极其兴奋。</p>\n</blockquote>\n<h3 id=\"破解过程：-2\"><a href=\"#破解过程：-2\" class=\"headerlink\" title=\"破解过程：\"></a>破解过程：</h3><p>首先，聊天时知道了他的出生年份1987年，同时还知道了他的名字，假设为“李四”，还知道他出身于农村。</p>\n<p>其次，眼神清澈，而且一见面就愿意向你敞开心扉讲心里话的人通常涉世未深，通常缺少防范意识，这类人的密码保护意识通常也比较差，猜测其密码有可能是姓名加上出生年月日的组合。</p>\n<p>再次，说话条理清晰，不带任何“话屎”，而且喜欢聊哲学，这让我想起我的很多射手座朋友，以次推断他可能属于射手座。</p>\n<p>再次，射手座生于每年的11月23日——12月21日，尝试用他的名字拼命lisi加上19871201这样的组合进行测试，尝试大约三十次全部失败。</p>\n<p>突然，我想得他来自农村，父母在80年代那个时候，极有可能仍在使用农历，因此，注册他身份证的时候，很有可能跟我一样采用农历，上网用万年历查下1987年阳历11月23日——12月21日这段时期所对应的农历日期，对应的农历时间段是10月初三至11月初一。</p>\n<h3 id=\"最终结果：-2\"><a href=\"#最终结果：-2\" class=\"headerlink\" title=\"最终结果：\"></a>最终结果：</h3><blockquote>\n<p>密码：lisi_19871011</p>\n</blockquote>\n<h3 id=\"从密码逆推此君的性格：-1\"><a href=\"#从密码逆推此君的性格：-1\" class=\"headerlink\" title=\"从密码逆推此君的性格：\"></a>从密码逆推此君的性格：</h3><p>此君懂得使用下划线，说明他还有一定的密码保护意识，但是，从其使用自己姓名加上生日这一点可以判断他社会经验缺乏，应该较少与社会上的人接触，应该是宅男一类的人，工作不可能是销售类和管理类，很有可能是技术类。这种人通常比较爱交朋友，也非常值得交往，是那种你有万贯家财，到了重要的时候都可以放心托付给他一类的人。后来与他进一步的交往中一步步印证了我的论断。</p>\n<h1 id=\"个人密码加密建议\"><a href=\"#个人密码加密建议\" class=\"headerlink\" title=\"个人密码加密建议\"></a>个人密码加密建议</h1><p>需要使用密码的场合通常是银行的账号，其他的绝大多数则通常是上网的各种邮箱、某些客户端软件、或者论坛的登录密码。绝大多数人上网时候都会使用一个固定的密码，而且基本上没有修改密码的习惯，因此，只要你在某个论坛的密码一旦泄露，那么，很可能你的所有邮箱、游戏账号等密码都会被人家一锅端。</p>\n<p>存在这种现象其实很容易理解，就是因为人的惰性，而且现在的网站那么多，如果针对各个网站去设置不同的密码，对于很多人来说，几乎是不可能完成的任务，因为这样你不仅需要记忆几十个甚至上百个密码，还必须记忆各个密码与各个网站的对应关系。</p>\n<p>其实，有一种办法可以保证你的密码可以随着不同网站而进行变换，同时又不需要记忆对应关系的。以下就以这种方法作为切入点，对大家的密码设置提供一些建议，这种办法我们不妨命名为“随机有据字符加固定序列密码”。</p>\n<hr>\n<h2 id=\"随机有据字符加固定序列密码\"><a href=\"#随机有据字符加固定序列密码\" class=\"headerlink\" title=\"随机有据字符加固定序列密码\"></a>随机有据字符加固定序列密码</h2><p>这个名词拥有三个关键词——随机、有据、固定。先说“固定”，固定就是指你经常使用的密码，在你每个密码中都会出现的一个字符段，假如你已经用惯了某个密码，并且这个密码你把他用在绝大多数的地方，那么，就以这个密码作为固定序列，放在你新密码之中；所谓“随机”，指的是你设置的时候事先并不知道要设置什么样的字符，而是根据不同的网站或客户端进行变动，但是，其变动是有规则的，这个规则是你自己定的，而且不会让任何人知道；所谓“有据”，这个根据，则与网站的某一种要素挂钩，我推荐使用网站的名字，目的是方便你自己的记忆。以下我举个例子，你就会很清楚地理解这种所谓的“随机有据字符加固定序列密码”的特点了。</p>\n<p>假如你以往所常用的密码是qwert123，那么，在你的新密码中，同样保留这个字段，现在你自己定义这样一种规则：以网站的名称作为依据，登录任何一个网站，就以其名称作为参照物，截取其名称的第一个字母（或数字）和最后一个字母（数字），分别放在固定密码段的开头和结尾。例如：上新浪网，其名称为sina，那么，分别截取s和a，添加在你的固定密码组开头和结尾，那么，你在新浪上的密码就是sawrt123a；如果是迅雷的客户端，取其网站名Thunder的首字母t和最后一个字母r，这样你的迅雷地址就变成了tawrt123r，由于多了这样一层保护，那么，即使你的新浪微博密码丢失了，那么，别人也不容易用这个密码来盗取你的迅雷账号、qq号码，而且由于这种密码命名规则简单，你完全可以照用你原来的密码段，不用去修改密码输入的习惯。</p>\n<p>上述的命名规则完全由你自己来定，除了那种截取头尾的规则以外，还可以这样：截取网站名的首个字母或数字，同时数一下这个网站名的位数，如果是奇数，字母取大写；如果是偶数，字母取小写，将它加到你固定密码组的开头或者结尾；如果截取到的是数字，那么，同样数一下网站名的位数，如果是奇数，那么保留这样一个位数，如果是偶数，则将其双写，加到你的固定密码序列上。示例：sina，baidu，163和2144，sina包含4个字母，所以截取第一个字母的小写s；baidu是5个字母，于是截取其第一个字母的大写B；163是3个字符，于是取其第一个数字1,2144是4个字符，于是取其第一个数字的复写22，添加到你的固定密码组上，于是，你的新浪密码是sqwert123，百度密码则变成了Bqwert123，网易邮箱变成了1qwert123,2144网站的密码则变成了22qwert123。<br>总之，怎么组合就看你自己考虑了，但随机段截取的规则一定要清晰可行，并且自己要牢记，而且随机字段包含的信息越少越好，太多未必能保护自己的密码，相反更容易让有心人发现规律。</p>\n<h2 id=\"关于固定字符段的建议\"><a href=\"#关于固定字符段的建议\" class=\"headerlink\" title=\"关于固定字符段的建议\"></a>关于固定字符段的建议</h2><ul>\n<li>坚决不使用自己证件上所能查看到的信息，包括生日、证件号码、姓名及其缩写等等，同样也坚决不使用爱人和孩子的同类相关信息。更不要使用无脑型密码。</li>\n<li>可以使用电话号码，但是电话号码尽量使用老家的电话号码，并且对该电话号码添加或者减少一至两位的防盗码。</li>\n<li>可以使用爱人的昵称，但这个昵称最好是只有你和对方彼此知道的，尤其是互相吹枕头风的时候才使用的那种称谓。</li>\n<li>对于银行卡密码，如果你非要向爱人表达爱意，也可以使用你们的结婚纪念日或者其生日，但是一定进行诸如倒序、移位、加码等相关操作。例如：你们的结婚纪念日是2012年7月5日，你非要使用201275或者120775这样的数字，用倒序的观点，就成了572102和577021,；用移位的观点，不妨设置成720125或者071275；用加码的观点，可以是只加一位，变成201276和120776，也可以每位加1，312386,231886，什么规则由你自己选择，关键是你自己要容易记住，而别人又难以看懂。不要小看这种简单的操作，它很可能就是防止你密码泄露的关键。</li>\n<li>不需要考虑对称美，密码又不是让人看的，相反是见不得光的，见不得光的对称只能是孤芳自赏，因而，建议你采用下划线或者数字的时候，将其打乱之后插入字母中，最好其结构是一旦写出来会让人看着很别扭的那种——看着越别扭的密码越是好密码，相信我没错的！</li>\n<li>强烈建议使用图腾，因为那是你内心深处的东西，有时候即使是你最亲密的人都未必真正了解你内心深处在想什么，陌生人更加难以猜测。</li>\n<li>某些字母和数字之间由于形很相似，因而，当你需要使用数字时，不妨用字母进行一下伪装，反之亦然。包括1和l，2和z，6和b，8和B，9和q，0和o。</li>\n<li>没有必要定期修改你的固定字符段，那个意义不大，相反很可能会很容易就把自己弄晕，当然前提是你能做到上述提到的那些密码规则。</li>\n</ul>\n<h2 id=\"关于安全问题的建议\"><a href=\"#关于安全问题的建议\" class=\"headerlink\" title=\"关于安全问题的建议\"></a>关于安全问题的建议</h2><p>现在有很多网站尤其是论坛，为了所谓的安全性考虑，用户注册时通常会要求设置安全问题，以我自己的经验来看，那几乎是毫无作用的，这些安全问题通常会让你从8个左右的问题选择一个进行回答，很多人为了简单易记，通常会选择生日，这本来是没有什么问题的，问题在于电脑是没有智能的，它没有所谓的时间概念，相反，却有严格的格式概念，例如：某人生日是1980年1月1日，对于人来说，当某人问起你生日的时候，无论你是回答1980年1月1日，还是80年元旦，亦或是800101，都是一个概念，这个概念指向同一个目标，这个目标就是时间。然而对电脑来说，这几个却是完全不同的概念，对于电脑来说19800101与8011有着极大的差别，因而，有可能一些不同网站问你的是同一个问题，但是你在回答的时候却使用了不同的格式，这样注册多了，最后很可能连你自己都搞混了，有时候甚至会导致你自己连密码都修改不了。</p>\n<p>因而，我的习惯是除非网站指定安全问题为必填，否则我一律不填，如果填的话，我会随便选择一个问题，并且任何网站的任何安全问题，我都使用同一个标准格式，以前我使用的是“关你鸟事啊”，电脑问我你小学上那所学校啊？你爱人叫什么名字？我都一律回答“关你鸟事啊”——本来我怎样就不关你电脑你的事，还不是“关你鸟事”吗？！</p>\n"}],"PostAsset":[{"_id":"source/_posts/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215413958-1581710292740.png","slug":"20170802215413958-1581710292740.png","post":"ckweswgi80008e8vh26vgf0xf","modified":0,"renderable":0},{"_id":"source/_posts/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215413958.png","slug":"20170802215413958.png","post":"ckweswgi80008e8vh26vgf0xf","modified":0,"renderable":0},{"_id":"source/_posts/hello-world/image-20200215031832012.png","slug":"image-20200215031832012.png","post":"ckweswgid000fe8vh2y0x6m2c","modified":0,"renderable":0},{"_id":"source/_posts/HexoReferencesToLocalImagesCannotBeDisplayed/20181115112933605.png","slug":"20181115112933605.png","post":"ckweswgia000ae8vh3pdaberu","modified":0,"renderable":0},{"_id":"source/_posts/HexoReferencesToLocalImagesCannotBeDisplayed/20181115112941162.png","slug":"20181115112941162.png","post":"ckweswgia000ae8vh3pdaberu","modified":0,"renderable":0},{"_id":"source/_posts/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215400518-1581710292743.png","slug":"20170802215400518-1581710292743.png","post":"ckweswgi80008e8vh26vgf0xf","modified":0,"renderable":0},{"_id":"source/_posts/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215400518.png","slug":"20170802215400518.png","post":"ckweswgi80008e8vh26vgf0xf","modified":0,"renderable":0},{"_id":"source/_posts/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215316131-1581710292501.png","slug":"20170802215316131-1581710292501.png","post":"ckweswgi80008e8vh26vgf0xf","modified":0,"renderable":0},{"_id":"source/_posts/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215316131.png","slug":"20170802215316131.png","post":"ckweswgi80008e8vh26vgf0xf","modified":0,"renderable":0},{"_id":"source/_posts/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215328854-1581710292745.png","slug":"20170802215328854-1581710292745.png","post":"ckweswgi80008e8vh26vgf0xf","modified":0,"renderable":0},{"_id":"source/_posts/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215328854.png","slug":"20170802215328854.png","post":"ckweswgi80008e8vh26vgf0xf","modified":0,"renderable":0},{"_id":"source/_posts/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215338473-1581710292744.png","slug":"20170802215338473-1581710292744.png","post":"ckweswgi80008e8vh26vgf0xf","modified":0,"renderable":0},{"_id":"source/_posts/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215338473.png","slug":"20170802215338473.png","post":"ckweswgi80008e8vh26vgf0xf","modified":0,"renderable":0},{"_id":"source/_posts/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215350265-1581710292556.png","slug":"20170802215350265-1581710292556.png","post":"ckweswgi80008e8vh26vgf0xf","modified":0,"renderable":0},{"_id":"source/_posts/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215350265.png","slug":"20170802215350265.png","post":"ckweswgi80008e8vh26vgf0xf","modified":0,"renderable":0},{"_id":"source/_posts/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215956812-1581710292746.png","slug":"20170802215956812-1581710292746.png","post":"ckweswgi80008e8vh26vgf0xf","modified":0,"renderable":0},{"_id":"source/_posts/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215956812.png","slug":"20170802215956812.png","post":"ckweswgi80008e8vh26vgf0xf","modified":0,"renderable":0},{"_id":"source/_posts/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802220104192-1581710292747.png","slug":"20170802220104192-1581710292747.png","post":"ckweswgi80008e8vh26vgf0xf","modified":0,"renderable":0},{"_id":"source/_posts/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802220104192.png","slug":"20170802220104192.png","post":"ckweswgi80008e8vh26vgf0xf","modified":0,"renderable":0},{"_id":"source/_posts/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802220117307-1581710292747.png","slug":"20170802220117307-1581710292747.png","post":"ckweswgi80008e8vh26vgf0xf","modified":0,"renderable":0},{"_id":"source/_posts/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802220117307.png","slug":"20170802220117307.png","post":"ckweswgi80008e8vh26vgf0xf","modified":0,"renderable":0},{"_id":"source/_posts/hexo/11-29-08.jpg","slug":"11-29-08.jpg","post":"ckweswgic000ee8vh7g1u2ou6","modified":0,"renderable":0},{"_id":"source/_posts/hexo/11-29-09.jpg","slug":"11-29-09.jpg","post":"ckweswgic000ee8vh7g1u2ou6","modified":0,"renderable":0},{"_id":"source/_posts/hexo/11-29-10.jpg","slug":"11-29-10.jpg","post":"ckweswgic000ee8vh7g1u2ou6","modified":0,"renderable":0},{"_id":"source/_posts/hexo/11-29-11.jpg","slug":"11-29-11.jpg","post":"ckweswgic000ee8vh7g1u2ou6","modified":0,"renderable":0},{"_id":"source/_posts/hexo/11-29-12.jpg","slug":"11-29-12.jpg","post":"ckweswgic000ee8vh7g1u2ou6","modified":0,"renderable":0},{"_id":"source/_posts/hexo/11-29-13.jpg","slug":"11-29-13.jpg","post":"ckweswgic000ee8vh7g1u2ou6","modified":0,"renderable":0},{"_id":"source/_posts/hexo/11-29-14.jpg","slug":"11-29-14.jpg","post":"ckweswgic000ee8vh7g1u2ou6","modified":0,"renderable":0},{"_id":"source/_posts/hexo/11-29-15.jpg","slug":"11-29-15.jpg","post":"ckweswgic000ee8vh7g1u2ou6","modified":0,"renderable":0},{"_id":"source/_posts/hexo/11-29-16.jpg","slug":"11-29-16.jpg","post":"ckweswgic000ee8vh7g1u2ou6","modified":0,"renderable":0},{"_id":"source/_posts/hexo/11-29-17.jpg","slug":"11-29-17.jpg","post":"ckweswgic000ee8vh7g1u2ou6","modified":0,"renderable":0},{"_id":"source/_posts/hexo/11-29-18.jpg","slug":"11-29-18.jpg","post":"ckweswgic000ee8vh7g1u2ou6","modified":0,"renderable":0},{"_id":"source/_posts/hexo/11-29-19.jpg","slug":"11-29-19.jpg","post":"ckweswgic000ee8vh7g1u2ou6","modified":0,"renderable":0},{"_id":"source/_posts/hexo/11-29-20.jpg","slug":"11-29-20.jpg","post":"ckweswgic000ee8vh7g1u2ou6","modified":0,"renderable":0},{"_id":"source/_posts/hexo/11-29-21.jpg","slug":"11-29-21.jpg","post":"ckweswgic000ee8vh7g1u2ou6","modified":0,"renderable":0},{"_id":"source/_posts/hexo/11-29-22.jpg","slug":"11-29-22.jpg","post":"ckweswgic000ee8vh7g1u2ou6","modified":0,"renderable":0},{"_id":"source/_posts/hexo/11-29-23.jpg","slug":"11-29-23.jpg","post":"ckweswgic000ee8vh7g1u2ou6","modified":0,"renderable":0},{"_id":"source/_posts/hexo/11-29-24.jpg","slug":"11-29-24.jpg","post":"ckweswgic000ee8vh7g1u2ou6","modified":0,"renderable":0},{"_id":"source/_posts/hexo/11-29-25.jpg","slug":"11-29-25.jpg","post":"ckweswgic000ee8vh7g1u2ou6","modified":0,"renderable":0},{"_id":"source/_posts/hexo/11-29-26.jpg","slug":"11-29-26.jpg","post":"ckweswgic000ee8vh7g1u2ou6","modified":0,"renderable":0},{"_id":"source/_posts/hexo/11-29-27.jpg","slug":"11-29-27.jpg","post":"ckweswgic000ee8vh7g1u2ou6","modified":0,"renderable":0},{"_id":"source/_posts/hexo/11-29-28.jpg","slug":"11-29-28.jpg","post":"ckweswgic000ee8vh7g1u2ou6","modified":0,"renderable":0},{"_id":"source/_posts/hexo/11-29-29.jpg","slug":"11-29-29.jpg","post":"ckweswgic000ee8vh7g1u2ou6","modified":0,"renderable":0},{"_id":"source/_posts/hexo/11-29-30.jpg","slug":"11-29-30.jpg","post":"ckweswgic000ee8vh7g1u2ou6","modified":0,"renderable":0},{"_id":"source/_posts/hexo/11-29-31.jpg","slug":"11-29-31.jpg","post":"ckweswgic000ee8vh7g1u2ou6","modified":0,"renderable":0},{"_id":"source/_posts/hexo/11-29-32.jpg","slug":"11-29-32.jpg","post":"ckweswgic000ee8vh7g1u2ou6","modified":0,"renderable":0},{"_id":"source/_posts/hexo/image-20200215031519029.png","slug":"image-20200215031519029.png","post":"ckweswgic000ee8vh7g1u2ou6","modified":0,"renderable":0}],"PostCategory":[{"post_id":"ckweswghx0000e8vh6tma924a","category_id":"ckweswgi50004e8vhcpt27ycl","_id":"ckweswgie000ge8vh3fxgfa5m"},{"post_id":"ckweswgi20002e8vh7ygp606d","category_id":"ckweswgia000be8vh71pe28t6","_id":"ckweswgih000le8vhegwx18ip"},{"post_id":"ckweswgi70006e8vhgjpjgj5o","category_id":"ckweswgia000be8vh71pe28t6","_id":"ckweswgij000pe8vh9hlk9prc"},{"post_id":"ckweswgi80008e8vh26vgf0xf","category_id":"ckweswgia000be8vh71pe28t6","_id":"ckweswgik000te8vhb8ioabkf"},{"post_id":"ckweswgia000ae8vh3pdaberu","category_id":"ckweswgii000oe8vh10az96h7","_id":"ckweswgil000ye8vh5i2phxds"},{"post_id":"ckweswgic000ee8vh7g1u2ou6","category_id":"ckweswgik000ue8vh2kvddqob","_id":"ckweswgin0011e8vhhzbpeqzn"}],"PostTag":[{"post_id":"ckweswghx0000e8vh6tma924a","tag_id":"ckweswgi60005e8vhf9it5kde","_id":"ckweswgii000ne8vh6gbl5zo0"},{"post_id":"ckweswghx0000e8vh6tma924a","tag_id":"ckweswgib000ce8vhbecj9eps","_id":"ckweswgij000qe8vhg2094xb4"},{"post_id":"ckweswghx0000e8vh6tma924a","tag_id":"ckweswgie000ie8vh3bob294p","_id":"ckweswgij000se8vh93hoa871"},{"post_id":"ckweswgi20002e8vh7ygp606d","tag_id":"ckweswgib000ce8vhbecj9eps","_id":"ckweswgil000we8vhgqipcxub"},{"post_id":"ckweswgi20002e8vh7ygp606d","tag_id":"ckweswgie000ie8vh3bob294p","_id":"ckweswgil000xe8vh988r87tw"},{"post_id":"ckweswgi70006e8vhgjpjgj5o","tag_id":"ckweswgi60005e8vhf9it5kde","_id":"ckweswgin0012e8vh0fs177h9"},{"post_id":"ckweswgi70006e8vhgjpjgj5o","tag_id":"ckweswgib000ce8vhbecj9eps","_id":"ckweswgio0013e8vh2ktldhce"},{"post_id":"ckweswgi80008e8vh26vgf0xf","tag_id":"ckweswgim0010e8vh9pje800t","_id":"ckweswgio0015e8vhgo0df6gx"},{"post_id":"ckweswgia000ae8vh3pdaberu","tag_id":"ckweswgio0014e8vh027401d3","_id":"ckweswgip0017e8vhe30qbez0"},{"post_id":"ckweswgia000ae8vh3pdaberu","tag_id":"ckweswgi60005e8vhf9it5kde","_id":"ckweswgiq0018e8vhbp34819v"},{"post_id":"ckweswgic000ee8vh7g1u2ou6","tag_id":"ckweswgio0014e8vh027401d3","_id":"ckweswgiq0019e8vhdgnvhlro"},{"post_id":"ckweswgic000ee8vh7g1u2ou6","tag_id":"ckweswgib000ce8vhbecj9eps","_id":"ckweswgiq001ae8vhbd3je64f"},{"post_id":"ckweswgic000ee8vh7g1u2ou6","tag_id":"ckweswgi60005e8vhf9it5kde","_id":"ckweswgiq001be8vhdmqub364"}],"Tag":[{"name":"转载","_id":"ckweswgi60005e8vhf9it5kde"},{"name":"Linux","_id":"ckweswgib000ce8vhbecj9eps"},{"name":"搭建教程","_id":"ckweswgie000ie8vh3bob294p"},{"name":"Kali","_id":"ckweswgim0010e8vh9pje800t"},{"name":"Hexo","_id":"ckweswgio0014e8vh027401d3"}]}}