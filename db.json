{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"themes/matery/source/favicon.png","path":"favicon.png","modified":1,"renderable":1},{"_id":"themes/matery/source/css/gitment.css","path":"css/gitment.css","modified":1,"renderable":1},{"_id":"themes/matery/source/css/matery.css","path":"css/matery.css","modified":1,"renderable":1},{"_id":"themes/matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":1,"renderable":1},{"_id":"themes/matery/source/css/my.css","path":"css/my.css","modified":1,"renderable":1},{"_id":"themes/matery/source/js/matery.js","path":"js/matery.js","modified":1,"renderable":1},{"_id":"themes/matery/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/comment_bg.png","path":"medias/comment_bg.png","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/icp.png","path":"medias/icp.png","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/logo - 副本.png","path":"medias/logo - 副本.png","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/timgcore.jpg","path":"medias/timgcore.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/background/canvas-nest.js","path":"libs/background/canvas-nest.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/background/ribbon-dynamic.js","path":"libs/background/ribbon-dynamic.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/background/ribbon-refresh.min.js","path":"libs/background/ribbon-refresh.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/background/ribbon.min.js","path":"libs/background/ribbon.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/codeBlock/codeBlockFuction.js","path":"libs/codeBlock/codeBlockFuction.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/codeBlock/codeCopy.js","path":"libs/codeBlock/codeCopy.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/codeBlock/codeLang.js","path":"libs/codeBlock/codeLang.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/codeBlock/codeShrink.js","path":"libs/codeBlock/codeShrink.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/instantpage/instantpage.js","path":"libs/instantpage/instantpage.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/cover.jpg","path":"medias/cover.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/15.jpg","path":"medias/featureimages/15.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/16.jpg","path":"medias/featureimages/16.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/21.jpg","path":"medias/featureimages/21.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/22.jpg","path":"medias/featureimages/22.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/23.jpg","path":"medias/featureimages/23.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/logo.png","path":"medias/logo.png","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/nekokecore.png","path":"medias/nekokecore.png","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/reward/wechat.png","path":"medias/reward/wechat.png","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/jquery/jquery.min.js","path":"libs/jquery/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/14.jpg","path":"medias/featureimages/14.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/17.jpg","path":"medias/featureimages/17.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/18.jpg","path":"medias/featureimages/18.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/19.jpg","path":"medias/featureimages/19.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/20.jpg","path":"medias/featureimages/20.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/reward/alipay.jpg","path":"medias/reward/alipay.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.eot","path":"libs/awesome/webfonts/fa-regular-400.eot","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.ttf","path":"libs/awesome/webfonts/fa-regular-400.ttf","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.woff","path":"libs/awesome/webfonts/fa-regular-400.woff","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.woff2","path":"libs/awesome/webfonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.eot","path":"libs/lightGallery/fonts/lg.eot","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/css/all.css","path":"libs/awesome/css/all.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.eot","path":"libs/awesome/webfonts/fa-brands-400.eot","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.ttf","path":"libs/awesome/webfonts/fa-brands-400.ttf","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.woff2","path":"libs/awesome/webfonts/fa-brands-400.woff2","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.woff","path":"libs/awesome/webfonts/fa-brands-400.woff","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.woff","path":"libs/awesome/webfonts/fa-solid-900.woff","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.woff2","path":"libs/awesome/webfonts/fa-solid-900.woff2","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.svg","path":"libs/awesome/webfonts/fa-regular-400.svg","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.eot","path":"libs/awesome/webfonts/fa-solid-900.eot","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.ttf","path":"libs/awesome/webfonts/fa-solid-900.ttf","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.svg","path":"libs/awesome/webfonts/fa-brands-400.svg","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.svg","path":"libs/awesome/webfonts/fa-solid-900.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/matery/README.md","hash":"43a6d7959409a703084ecc1a6bb63839cab47cc1","modified":1581616376647},{"_id":"themes/matery/README_CN.md","hash":"357035b1fe45155e4a25b19469ed69fbf29a6d74","modified":1581616376648},{"_id":"themes/matery/.gitignore","hash":"5340c994462c7345373e075529f40e60c1952f00","modified":1581616376597},{"_id":"themes/matery/LICENSE","hash":"b314c7ebb7d599944981908b7f3ed33a30e78f3a","modified":1581616376645},{"_id":"themes/matery/_config.yml","hash":"9889ce548f362cb2e7eb48ab9b25a3a3b88f964f","modified":1582120086476},{"_id":"source/_data/friends.json","hash":"84f9ebc1cabeba142b52895de83582f36b1bce06","modified":1637752305226},{"_id":"source/_posts/ATwo-DimensionalWebMulti-PersonOnlineNetworkChatSystem.md","hash":"113affdcec4310facc100282aae74f61c5c09883","modified":1637763329121},{"_id":"source/_posts/AnOpenSource-LightweightIntranetPenetrationToolSimilarToServo-Ngrok.md","hash":"04e2a4893734ae826bf8e62d000b462bd04c1d34","modified":1637751632102},{"_id":"source/_posts/HexoReferencesToLocalImagesCannotBeDisplayed.md","hash":"878e7e9573c9b12c70df80faee7be17883134c01","modified":1637751632102},{"_id":"source/_posts/CentOSCommandScreen.md","hash":"8f5f81fae46f27c24bc2fb9f609c0ea50175eca6","modified":1637751632102},{"_id":"source/_posts/UseKaliWirelessPenetrationToGetTheWifiPassword.md","hash":"8ab6f6d5f68b0bb47c0ea8ee944536380cf8bae1","modified":1637751632103},{"_id":"source/_posts/hello-world.md","hash":"87bb4ffb4f4153ce72d58e649245066876a0883b","modified":1637751632119},{"_id":"source/_posts/hexo.md","hash":"3114a7599bbe991d510f66a0b9329b316c5f013f","modified":1637751632119},{"_id":"source/friends/index.md","hash":"5e192c153111a18b61483f49a01551e23ce4f1ed","modified":1637751632129},{"_id":"source/categories/index.md","hash":"416f20b92c87f7e51526e831945b3d6e95a92b76","modified":1637751632129},{"_id":"source/about/index.md","hash":"d65f832e50c852d52d2767a81ec6f98d23651f68","modified":1637751632129},{"_id":"source/tags/index.md","hash":"04e3e06b261c08cc84bddc49385ec8dba2105392","modified":1637751632129},{"_id":"source/contact/index.md","hash":"ed3b64b1584cdffe75ca6bedbfabc1eee78b9df1","modified":1637751632129},{"_id":"themes/matery/languages/default.yml","hash":"9baf9370d0d7494e8575934e4bd0fa6d24484052","modified":1581616376650},{"_id":"themes/matery/languages/zh-CN.yml","hash":"13ce732a54ce08b0ca01f14fd09cbe8fc418de21","modified":1581616376650},{"_id":"themes/matery/layout/about.ejs","hash":"228f5075f17ad540cee5481d91dbe2c5555cc73b","modified":1581616376675},{"_id":"themes/matery/layout/archive.ejs","hash":"7c43c5ab8dc7a8f6ee38e200329280f684237852","modified":1581616376676},{"_id":"themes/matery/layout/categories.ejs","hash":"c431e772d0f7700592228bbd9502793bdc28a893","modified":1581616376676},{"_id":"themes/matery/layout/category.ejs","hash":"c993c74db4b31782d6c8f8eccc96065fc300ec19","modified":1581616376677},{"_id":"themes/matery/layout/contact.ejs","hash":"c3396cc5b1cbb102f500554f76946f5b45ee6d54","modified":1581616376677},{"_id":"themes/matery/layout/friends.ejs","hash":"56523c35cd7b3e1279089b3d2b38f0a521d787ef","modified":1581616376678},{"_id":"themes/matery/layout/layout.ejs","hash":"ad6f85189df88c42adeea1b2fc4039b9f7439895","modified":1581616376679},{"_id":"themes/matery/layout/index.ejs","hash":"d68ede26574a5006a24f9d6613738726e4f10bdf","modified":1581616376679},{"_id":"themes/matery/layout/post.ejs","hash":"50de0534a025d830758abc9d542960a66df2b1ba","modified":1581616376680},{"_id":"themes/matery/layout/tag.ejs","hash":"7404bc54d8aedf150a5f4e574a908152ed8f067c","modified":1581616376680},{"_id":"themes/matery/layout/tags.ejs","hash":"851c0ee599e91e7b1d657673859e8b6ff79cf50b","modified":1581616376681},{"_id":"themes/matery/source/favicon.png","hash":"20674c497b75fc889194b47fd18ecea12303d8ec","modified":1581616376685},{"_id":"source/_posts/HexoReferencesToLocalImagesCannotBeDisplayed/20181115112933605.png","hash":"e4195d9311975eac900601ca80ba7b17ff5edf03","modified":1637751632103},{"_id":"source/_posts/HexoReferencesToLocalImagesCannotBeDisplayed/20181115112941162.png","hash":"0336a346831d223c7d81ef0a3d76d04f61372e2c","modified":1637751632103},{"_id":"source/_posts/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802220104192-1581710292747.png","hash":"53a62110f4b3005a5aa7aa1073e9d090e8e1b41d","modified":1637751632115},{"_id":"source/_posts/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802220104192.png","hash":"53a62110f4b3005a5aa7aa1073e9d090e8e1b41d","modified":1637751632115},{"_id":"source/_posts/hello-world/image-20200215031832012.png","hash":"86cbf62f40084426bba39cd00f492cc5d93870d6","modified":1637751632119},{"_id":"source/_posts/hexo/11-29-08.jpg","hash":"4ecf8387144aca7adeadedec8968b16a0a453b3f","modified":1637751632120},{"_id":"source/_posts/hexo/11-29-10.jpg","hash":"aaf58a036d6c4cb8c2f8a9876b1e7b0b9ae801d7","modified":1637751632120},{"_id":"source/_posts/hexo/11-29-11.jpg","hash":"693ea8006b8b727cfb15968b949fab835971a37f","modified":1637751632121},{"_id":"source/_posts/hexo/11-29-12.jpg","hash":"ac647ad720867cfca7df36d6e64bc320fecb9f0c","modified":1637751632121},{"_id":"source/_posts/hexo/11-29-14.jpg","hash":"4f31988fc3528d13e55454332d00849f3ccee3c3","modified":1637751632122},{"_id":"source/_posts/hexo/11-29-13.jpg","hash":"db80a67bb6b000caa658a1e398214e930e3ab7ea","modified":1637751632121},{"_id":"source/_posts/hexo/11-29-15.jpg","hash":"4d90dd1913efe3c46280713b31018c26f305af70","modified":1637751632122},{"_id":"source/_posts/hexo/11-29-16.jpg","hash":"2daf12faece99a6e72435873ea47288e4182771a","modified":1637751632123},{"_id":"source/_posts/hexo/11-29-17.jpg","hash":"e30bd38d96a123a2264ff2e22d08266d8db0a527","modified":1637751632123},{"_id":"source/_posts/hexo/11-29-18.jpg","hash":"027c70cc0303e82c380037048fbed4b0fc152437","modified":1637751632123},{"_id":"source/_posts/hexo/11-29-19.jpg","hash":"43dd474db7cdf8e1f765273f89c93349325b3021","modified":1637751632124},{"_id":"source/_posts/hexo/11-29-20.jpg","hash":"d5dee6034e5a2489c62526b16838daabf5286b86","modified":1637751632124},{"_id":"source/_posts/hexo/11-29-21.jpg","hash":"1e3a3147346583080c48ae3f6ca8a7c421981b9d","modified":1637751632124},{"_id":"source/_posts/hexo/11-29-22.jpg","hash":"d05eb08ab610a37576c41fd1c911c0ceb63d8631","modified":1637751632124},{"_id":"source/_posts/hexo/11-29-23.jpg","hash":"fd0d690a9b81e88507beb54106adad9fda085d9d","modified":1637751632125},{"_id":"source/_posts/hexo/11-29-24.jpg","hash":"53fabfb54b4038ea18c557304606868897fc1527","modified":1637751632125},{"_id":"source/_posts/hexo/11-29-25.jpg","hash":"ad1d80aad8c98e1d4d7042f1ac9c8dbb9b47809f","modified":1637751632126},{"_id":"source/_posts/hexo/11-29-26.jpg","hash":"67e8b9b3ec75ee00cfadda3c4130d718e2a6e5d8","modified":1637751632126},{"_id":"source/_posts/hexo/11-29-28.jpg","hash":"99b7ba8e4723657545d343e73edc6ddf10331a35","modified":1637751632127},{"_id":"source/_posts/hexo/11-29-29.jpg","hash":"03646dd8e13fe1f8a36ccac39dba37d0b4c329b7","modified":1637751632127},{"_id":"source/_posts/hexo/11-29-30.jpg","hash":"e69702393291a05c1ae1dd995adf440b8cf97769","modified":1637751632128},{"_id":"source/_posts/hexo/11-29-31.jpg","hash":"9c1f30d499029af9d4915688f61fef45dbba99e4","modified":1637751632128},{"_id":"source/_posts/hexo/11-29-32.jpg","hash":"211be5c97bffca888732975ab8e5a66ff6355f37","modified":1637751632128},{"_id":"source/_posts/hexo/image-20200215031519029.png","hash":"1c14fd3097182725ae4934f67243f076b19bc547","modified":1637751632128},{"_id":"themes/matery/layout/_partial/back-top.ejs","hash":"be527741c39c9dc4a13ad712b49fe8db0147fe1e","modified":1581616376651},{"_id":"themes/matery/layout/_partial/baidu-analytics.ejs","hash":"4b01030b7136192bdbd704e29a0fe12f92767551","modified":1581616376652},{"_id":"themes/matery/layout/_partial/baidu-push.ejs","hash":"2841870e0c625787de348221e5ddb7bbe99ec5a2","modified":1581616376652},{"_id":"themes/matery/layout/_partial/bg-cover.ejs","hash":"d5a7b9bb96e04c0a3485dd873748f19c50a6a04f","modified":1581616376654},{"_id":"themes/matery/layout/_partial/bg-cover-content.ejs","hash":"00121f03a7944a99b437191d31cd90fd62fcaec9","modified":1582117605526},{"_id":"themes/matery/layout/_partial/disqus.ejs","hash":"42dda8e67f7f09d148347887e52f18aea546df26","modified":1581616376654},{"_id":"themes/matery/layout/_partial/footer.ejs","hash":"c9d4a691f0c15136c85795473b784337236e0fc9","modified":1581616376655},{"_id":"themes/matery/layout/_partial/gitalk.ejs","hash":"117cade32db096798e4f270305cc129bac565332","modified":1581616376655},{"_id":"themes/matery/layout/_partial/github-link.ejs","hash":"fd4034bca2eb3987dcf113e6477260bee97eb1e7","modified":1581616376656},{"_id":"themes/matery/layout/_partial/gitment.ejs","hash":"d2d8c54432fce2468ee699a3bcba35bf8fcdf859","modified":1581616376656},{"_id":"themes/matery/layout/_partial/google-analytics.ejs","hash":"890c8f04c1f4905dfceb3ea9fd6efdd040d79c01","modified":1581616376657},{"_id":"themes/matery/layout/_partial/head.ejs","hash":"743a6d42eaa0e3f4fe9d10da3cbd9a92cee4f1db","modified":1581616376657},{"_id":"themes/matery/layout/_partial/header.ejs","hash":"9570641c5c823621bea4ee8bca377c204a72a089","modified":1582114619096},{"_id":"themes/matery/layout/_partial/index-cover.ejs","hash":"9fe7c9ea94b79084f3246551af62c01f854b855f","modified":1581616376658},{"_id":"themes/matery/layout/_partial/livere.ejs","hash":"42728561c09589f79b698eb059ab4def53ed3642","modified":1581616376659},{"_id":"themes/matery/layout/_partial/mobile-nav.ejs","hash":"a447919226bd51bdb9270b7b401129e1919ea9c1","modified":1582118535005},{"_id":"themes/matery/layout/_partial/paging.ejs","hash":"d8773abab5d0b672b70a9df20a8f9f7f6b0a2dae","modified":1581616376660},{"_id":"themes/matery/layout/_partial/navigation.ejs","hash":"7b0cd7bcde29cd6b2fc5d2d9345e1793b27359b7","modified":1581616376660},{"_id":"themes/matery/layout/_partial/post-cover.ejs","hash":"994d837755405aff3c7d54f62755ac1c79f75859","modified":1581616376661},{"_id":"themes/matery/layout/_partial/post-detail-toc.ejs","hash":"2779c6e8b25b216fc400423e561de5f0664b1c79","modified":1581616376661},{"_id":"themes/matery/layout/_partial/post-detail.ejs","hash":"f912575e60150230830324287181313f9c839ef4","modified":1581616376662},{"_id":"themes/matery/layout/_partial/post-statis.ejs","hash":"de0d5763ddd64463f43135678b64c044884b8406","modified":1581616376662},{"_id":"themes/matery/layout/_partial/prev-next.ejs","hash":"c91fa19c61e3625e8c7c7332466d819c0d544cb4","modified":1581616376663},{"_id":"themes/matery/layout/_partial/reprint-statement.ejs","hash":"cd556472b2d25270be359282854af1a166ca7092","modified":1581616376664},{"_id":"themes/matery/layout/_partial/reward.ejs","hash":"64041be4dea2ec9467164a14232b9af664c99315","modified":1581616376665},{"_id":"themes/matery/layout/_partial/search.ejs","hash":"125fc994c559d3234de91ed036851983666299b9","modified":1581616376666},{"_id":"themes/matery/layout/_partial/share.ejs","hash":"14fee5f7aaa0d00c21605a1619a0d992b47f85d3","modified":1581616376666},{"_id":"themes/matery/layout/_partial/valine.ejs","hash":"8ce89390323bfc936e403b3e9bd8117b241e8e42","modified":1581616376667},{"_id":"themes/matery/layout/_partial/social-link.ejs","hash":"f640583d45179abc1ef57951e7f61fb9e10f44c9","modified":1581616376667},{"_id":"themes/matery/layout/_widget/category-cloud.ejs","hash":"fbef418bc9e758486a155e4723804e722306ed1f","modified":1581616376668},{"_id":"themes/matery/layout/_widget/category-radar.ejs","hash":"7fcf36e06d428a983282bdce7b1aaa10c647dab2","modified":1581616376668},{"_id":"themes/matery/layout/_widget/dream.ejs","hash":"70122ee04acf56ad569d893e92e78b222d02342c","modified":1581616376669},{"_id":"themes/matery/layout/_widget/music.ejs","hash":"78f0e953f97820155a7383973a8a14af6e4e92dc","modified":1582118201192},{"_id":"themes/matery/layout/_widget/my-gallery.ejs","hash":"c4491329d6c7da2bc9dd5566e4d278633c4f5676","modified":1581616376670},{"_id":"themes/matery/layout/_widget/my-projects.ejs","hash":"48dfd9089c28de5025957d4d34006b4e960eacf1","modified":1581616376671},{"_id":"themes/matery/layout/_widget/my-skills.ejs","hash":"9edbeb1ec6212762d597ae7a05b5a219f72c8f98","modified":1581616376672},{"_id":"themes/matery/layout/_widget/post-calendar.ejs","hash":"853d950056f3437c04122064dab82758d2cb6d5c","modified":1581616376672},{"_id":"themes/matery/layout/_widget/post-charts.ejs","hash":"0824972bbf24533c6d8c35e973dc08271750f957","modified":1581616376673},{"_id":"themes/matery/layout/_widget/recommend.ejs","hash":"3907a5bbdf18a756af969e10591115009a88798b","modified":1581616376673},{"_id":"themes/matery/layout/_widget/tag-cloud.ejs","hash":"d32898104477acef56c33d00a68b48db15dcf2e6","modified":1581616376674},{"_id":"themes/matery/layout/_widget/tag-wordcloud.ejs","hash":"2c5ffabb205870d03fa074e8a340456dbe7dc84a","modified":1581616376674},{"_id":"themes/matery/layout/_widget/video.ejs","hash":"e7df5b08de55deb12662f6bc224497a013bb6745","modified":1581616376675},{"_id":"themes/matery/source/css/gitment.css","hash":"d5ef623065d1fbc897119f7b70ccf7563e329917","modified":1581616376682},{"_id":"themes/matery/source/css/matery.css","hash":"3a4d87ba735da57bcb7299ba9310bf3bbf4ba39d","modified":1582119302972},{"_id":"themes/matery/source/css/my-gitalk.css","hash":"4e3e855767ac5a48b13af1d6a42df13d8975e03f","modified":1581616376684},{"_id":"themes/matery/source/css/my.css","hash":"b3c32b573a4a9ef3dfeffbd544a9c3f451e67a54","modified":1581616376685},{"_id":"themes/matery/source/js/matery.js","hash":"290a8761a90f9c23904caa0ac40be2a92a4008cb","modified":1581616376686},{"_id":"themes/matery/source/js/search.js","hash":"77ecae23dd3edd8ad962c5b12954652bb2f7a1b6","modified":1581616376686},{"_id":"themes/matery/source/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1581616376994},{"_id":"themes/matery/source/medias/icp.png","hash":"5d1a1f3051c8a4ad70afa0a5488dfa7f0bb27bd5","modified":1581616377064},{"_id":"themes/matery/source/medias/logo - 副本.png","hash":"4050259723bd418648ec40028a8020364e57a6a3","modified":1581616377065},{"_id":"themes/matery/source/medias/timgcore.jpg","hash":"a0080d3032be57a2500222f79959a48bf70f0bbb","modified":1581704018698},{"_id":"source/_posts/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215316131-1581710292501.png","hash":"9f931abebe88b928e5adaa8797764551419388f0","modified":1637751632104},{"_id":"source/_posts/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215316131.png","hash":"99b4bbc47e78385af06c6b58dfa5591a3f26f02e","modified":1637751632104},{"_id":"source/_posts/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215328854.png","hash":"450e19867c7c1302520cfcc5091a2388bac68ac1","modified":1637751632105},{"_id":"source/_posts/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215338473-1581710292744.png","hash":"7861f4e7002109e90d25dbf69a6e4118c0e6df2c","modified":1637751632106},{"_id":"source/_posts/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215328854-1581710292745.png","hash":"450e19867c7c1302520cfcc5091a2388bac68ac1","modified":1637751632105},{"_id":"source/_posts/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215338473.png","hash":"97c0dc75c43d480b1ec39297a1a3b80a7002c5ac","modified":1637751632107},{"_id":"source/_posts/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215350265-1581710292556.png","hash":"58b4d01e5f0d8da94860b6fecfbbe75bf5f7df1f","modified":1637751632107},{"_id":"source/_posts/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215350265.png","hash":"58b4d01e5f0d8da94860b6fecfbbe75bf5f7df1f","modified":1637751632108},{"_id":"source/_posts/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215956812-1581710292746.png","hash":"2231e509a086de5aa0c4493dabeafd9cd386182c","modified":1637751632114},{"_id":"source/_posts/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215956812.png","hash":"2231e509a086de5aa0c4493dabeafd9cd386182c","modified":1637751632115},{"_id":"source/_posts/hexo/11-29-09.jpg","hash":"4e4442c9ba5afbeff0ace48d2415a1769eb5789b","modified":1637751632120},{"_id":"source/_posts/hexo/11-29-27.jpg","hash":"d0b117c8340f95fd45383a453ccfd2c4cba7666d","modified":1637751632127},{"_id":"themes/matery/source/libs/animate/animate.min.css","hash":"5dfcbcee866e9dc564916416281885f3e320871e","modified":1581616376688},{"_id":"themes/matery/source/libs/aos/aos.css","hash":"ded9739f803d114c9168d3351fded72b3b478b4c","modified":1581616376689},{"_id":"themes/matery/source/libs/aos/aos.js","hash":"5a8e6d07ffa55642418ab3fd4b263aa08284b77a","modified":1581616376689},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.css","hash":"7f4f8913f2d46ade2def5134e2cc8684a4b87939","modified":1581616376690},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.js","hash":"70c0c4a9bf698747b7c058c21287ad617355e5dd","modified":1581616376691},{"_id":"themes/matery/source/libs/background/canvas-nest.js","hash":"d2569ef80127ed2f4af7ef4d9f82b037794eec69","modified":1581616376824},{"_id":"themes/matery/source/libs/background/ribbon-dynamic.js","hash":"8f53dbd5f9a40c377664bf8ca0d5d5ed75b91757","modified":1581616376825},{"_id":"themes/matery/source/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1581616376827},{"_id":"themes/matery/source/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1581616376827},{"_id":"themes/matery/source/libs/codeBlock/codeBlockFuction.js","hash":"a8133367d48199e7505c2d831ca848b4202b9ba6","modified":1581616376829},{"_id":"themes/matery/source/libs/codeBlock/codeCopy.js","hash":"6ab7871d36cab438bbd4d781bc1fe7618b46b6e7","modified":1581616376829},{"_id":"themes/matery/source/libs/codeBlock/codeLang.js","hash":"066d2c89ad429e44f6467b9267da782ccaad57de","modified":1581616376830},{"_id":"themes/matery/source/libs/codeBlock/codeShrink.js","hash":"3edbe498f7bb9e7daa77f9db30e1b5eeab40e067","modified":1581616376831},{"_id":"themes/matery/source/libs/cryptojs/crypto-js.min.js","hash":"33810b2b757fc4327bc1d3b83bb5e0d3dc1fec5b","modified":1581616376832},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.css","hash":"5d52d3b34fceb9d7e11f1beaf7ed380b4249dec4","modified":1581616376834},{"_id":"themes/matery/source/libs/gitalk/gitalk.css","hash":"9c0bacfbd4519d3859e3bbb06128ba241804d8b1","modified":1581616376885},{"_id":"themes/matery/source/libs/gitment/gitment-default.css","hash":"a0625d8b432af8bdc820f8768d36cde439e7257c","modified":1581616376888},{"_id":"themes/matery/source/libs/instantpage/instantpage.js","hash":"043eba3c85c2e2009a9fabf3c4fc55537852fd86","modified":1581616376890},{"_id":"themes/matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"26849509f196a2d21bbfd15696e5d5153163b8f1","modified":1581616376891},{"_id":"themes/matery/source/libs/jqcloud/jqcloud.css","hash":"4e6538c8312aeeab845d361c37a8c1a0931241f0","modified":1581616376891},{"_id":"themes/matery/source/libs/masonry/masonry.pkgd.min.js","hash":"f81cd7bfcf7aa2d043bd3e6077df42656fc44b82","modified":1581616376903},{"_id":"themes/matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1581616376908},{"_id":"themes/matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1581616376908},{"_id":"themes/matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1581616376909},{"_id":"themes/matery/source/libs/tocbot/tocbot.css","hash":"f646f2bb75bcd1eb65b2788ac7bf15d4fd243ce9","modified":1581616376917},{"_id":"themes/matery/source/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1581616376917},{"_id":"themes/matery/source/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1581616376995},{"_id":"themes/matery/source/medias/featureimages/13.jpg","hash":"66706dfde7d910182c2f1dbadd0e9e917630b8dd","modified":1581616377035},{"_id":"themes/matery/source/medias/featureimages/15.jpg","hash":"5cf9fc64d5d74ab6ba69bb8bff580fdc22ba32d0","modified":1581616377037},{"_id":"themes/matery/source/medias/featureimages/16.jpg","hash":"9cac6b80b0cc8959fc8aabfbd1adcab79ebebfc9","modified":1581616377038},{"_id":"themes/matery/source/medias/featureimages/2.jpg","hash":"16f1d89cdba4dce935ac0f12599e0fcfda543a93","modified":1581616377042},{"_id":"themes/matery/source/medias/featureimages/21.jpg","hash":"d70b088850c3565e5b5bb9eb8fe4abe688c964cf","modified":1581616377044},{"_id":"themes/matery/source/medias/featureimages/22.jpg","hash":"bf5b59d193e5ca089a7fff034c222bfa2c4dc41f","modified":1581616377045},{"_id":"themes/matery/source/medias/featureimages/5.jpg","hash":"c3c1f36a1b1886037db604f151f335cd4599e970","modified":1581616377050},{"_id":"themes/matery/source/medias/featureimages/23.jpg","hash":"ed5ac9f616d3b99af5188a10b1761884c37e93e5","modified":1581616377046},{"_id":"themes/matery/source/medias/featureimages/7.jpg","hash":"a0246a4a560438938489cdd154e35f172b3f31b0","modified":1581616377061},{"_id":"themes/matery/source/medias/featureimages/8.jpg","hash":"5a46ca4ab4c4ab2101a2af77a31a8878bccc483c","modified":1581616377062},{"_id":"themes/matery/source/medias/logo.png","hash":"36a5ddb5dbf71ac0724708ee15f657e3c4898d67","modified":1581703329525},{"_id":"themes/matery/source/medias/nekokecore.png","hash":"36a5ddb5dbf71ac0724708ee15f657e3c4898d67","modified":1581703329525},{"_id":"themes/matery/source/medias/reward/wechat.png","hash":"aeda7c428a9a7a939b4253547a0a9c79d8e2595c","modified":1581617562827},{"_id":"source/_posts/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215413958-1581710292740.png","hash":"05decb4a5eee366455b54f7cfbd73f2efc3a3797","modified":1637751632113},{"_id":"source/_posts/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215413958.png","hash":"05decb4a5eee366455b54f7cfbd73f2efc3a3797","modified":1637751632114},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.js","hash":"82276be41d2001e820020a219b90ad5b026302d1","modified":1581616376835},{"_id":"themes/matery/source/libs/gitment/gitment.js","hash":"5a13983930b019450e4fe01a407c64b3dd316be4","modified":1581616376889},{"_id":"themes/matery/source/libs/jquery/jquery.min.js","hash":"a8927ac2830b2fdd4a729eb0eb7f80923539ceb9","modified":1581616376893},{"_id":"themes/matery/source/libs/valine/Valine.min.js","hash":"d6c03e8c3e547b5f48878081d10559b80f626948","modified":1581616376919},{"_id":"themes/matery/source/medias/banner/0.jpg","hash":"1f2ec55fe7825475fde2601573bb622f0bf2acba","modified":1581616376924},{"_id":"themes/matery/source/medias/banner/2.jpg","hash":"8d3c8391ff161eec70f66d69e5545a9468cc52ef","modified":1581616376927},{"_id":"themes/matery/source/medias/featureimages/0.jpg","hash":"2066cdda98ad0035071cd4aa7bd696eb078c0b6d","modified":1581616376997},{"_id":"themes/matery/source/medias/featureimages/1.jpg","hash":"d16e28bd23ea3a63643826dde5eea6b7a9bdda5d","modified":1581616376999},{"_id":"themes/matery/source/medias/featureimages/10.jpg","hash":"838e704942de076c60894d14e5f280e2724b6f68","modified":1581616377000},{"_id":"themes/matery/source/medias/featureimages/11.jpg","hash":"9ed45f95b83626e3d91d6c405eb8bfe6fcb9736a","modified":1581616377001},{"_id":"themes/matery/source/medias/featureimages/12.jpg","hash":"047be4239dd7e0be83243ee6b49a392a61f16b9a","modified":1581616377003},{"_id":"themes/matery/source/medias/featureimages/14.jpg","hash":"8aeb816faca2d5eaea4cce9e881d6ff87b8c7cf1","modified":1581616377036},{"_id":"themes/matery/source/medias/featureimages/17.jpg","hash":"f168ca5b046d10a878a7b0bcfab540e2c4428887","modified":1581616377039},{"_id":"themes/matery/source/medias/featureimages/18.jpg","hash":"ae23fdfaa59bc57b7ed49e90c5d59e4b68e1eea5","modified":1581616377040},{"_id":"themes/matery/source/medias/featureimages/19.jpg","hash":"57bc7c804b78b5cceb4eb1f9e51b734b75151b71","modified":1581616377041},{"_id":"themes/matery/source/medias/featureimages/20.jpg","hash":"8271c4a327632b566ea62f546c083d08a0528e72","modified":1581616377043},{"_id":"themes/matery/source/medias/featureimages/3.jpg","hash":"5e879652e032f02961a331b598a50b60ebe80a39","modified":1581616377047},{"_id":"themes/matery/source/medias/featureimages/4.jpg","hash":"4eea5bdb5724ef1ed65790e481eda0d2fb176bf0","modified":1581616377049},{"_id":"themes/matery/source/medias/featureimages/6.jpg","hash":"c63ff64bdd5f6c82da8804c7248fc519d23eaf0b","modified":1581616377060},{"_id":"themes/matery/source/medias/featureimages/9.jpg","hash":"815c84778b721e3606c2bd7c099c7de7c53251ba","modified":1581616377064},{"_id":"themes/matery/source/medias/reward/alipay.jpg","hash":"399d5e0fb4a8e9285645638eb97bb94b7b6cd796","modified":1581617511506},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1581616376796},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1581616376806},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1581616376807},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1581616376807},{"_id":"themes/matery/source/libs/gitalk/gitalk.min.js","hash":"7a3534269fd922d722a76c3affefc68e21246898","modified":1581616376887},{"_id":"themes/matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1581616376894},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1581616376895},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.svg","hash":"3480f00d284c812d623ed16a9e0ead3fb964c72e","modified":1581616376895},{"_id":"themes/matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1581616376898},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1581616376896},{"_id":"themes/matery/source/libs/lightGallery/img/video-play.png","hash":"fbfdbe06aebf7d0c00da175a4810cf888d128f11","modified":1581616376898},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1581616376897},{"_id":"themes/matery/source/libs/lightGallery/img/vimeo-play.png","hash":"1142b47de219dddfba2e712cd3189dec0c8b7bee","modified":1581616376899},{"_id":"themes/matery/source/libs/lightGallery/img/youtube-play.png","hash":"39150b45ec5fc03155b7ebeaa44f1829281788e2","modified":1581616376900},{"_id":"themes/matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"f8cd48e1fff82ecd54a7ce3e69de8dba7c92d113","modified":1581616376902},{"_id":"themes/matery/source/libs/materialize/materialize.min.css","hash":"80ae4aa0dba3634dd9bf59586d541d2dd8d8191c","modified":1581616376905},{"_id":"themes/matery/source/libs/materialize/materialize.min.js","hash":"c843f0dc497314574c608ca28cc742bb041786d5","modified":1581616376907},{"_id":"themes/matery/source/libs/share/css/share.min.css","hash":"7126de5cec8371e580b7b1f22512da0985cc39e5","modified":1581616376910},{"_id":"themes/matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1581616376911},{"_id":"themes/matery/source/libs/share/fonts/iconfont.svg","hash":"337b4f156f6d8f4beb32c32a3db46fef361cff74","modified":1581616376912},{"_id":"themes/matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1581616376912},{"_id":"themes/matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1581616376913},{"_id":"themes/matery/source/libs/share/js/jquery.share.min.js","hash":"de34668d902ec082d17ddb6dd7ad24255fb547c5","modified":1581616376915},{"_id":"themes/matery/source/libs/share/js/social-share.min.js","hash":"ba635a17a9d9d132369f9fe4b1fbcaf001ea6ac9","modified":1581616376916},{"_id":"themes/matery/source/libs/valine/av-min.js","hash":"9cb4babc20eb8fb5a86c4b0cc894fdb0f3cd9534","modified":1581616376921},{"_id":"themes/matery/source/medias/banner/1.jpg","hash":"c3d5ab183b39a7140941b8375e29498f9d24f343","modified":1581616376926},{"_id":"themes/matery/source/medias/banner/3.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1581616376929},{"_id":"themes/matery/source/medias/banner/5.jpg","hash":"4a08deec1dd5b4f1490e8fc23adfb75a0f88b0c4","modified":1581616376992},{"_id":"themes/matery/source/medias/banner/6.jpg","hash":"62e9586a8cec91a160f147c424a3d1d1aea360f9","modified":1581616376993},{"_id":"source/_posts/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215400518-1581710292743.png","hash":"8816f582b49588285a8c701cc911932bd8bb8a70","modified":1637751632110},{"_id":"source/_posts/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215400518.png","hash":"49674d7bfbc1117f9d01dc1bbaf6ab742abf4820","modified":1637751632112},{"_id":"source/_posts/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802220117307-1581710292747.png","hash":"96e12f1d5336b11494586ba12c1281ddb9305479","modified":1637751632117},{"_id":"source/_posts/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802220117307.png","hash":"759ae9ec549d79bde19995961de10cdbcf4a99d0","modified":1637751632119},{"_id":"themes/matery/source/libs/awesome/css/all.css","hash":"6390d0a6e6211ebbd68b49759b4dec8b2a9f04c9","modified":1581616376693},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1581616376746},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1581616376794},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1581616376796},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1581616376795},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1581616376823},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1581616376824},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.svg","hash":"3fbb04fe98ec0dd06dcfbf9da2d56efc200d7454","modified":1581616376799},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1581616376810},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1581616376822},{"_id":"themes/matery/source/medias/banner/4.jpg","hash":"56850c3139cbd72a0eff0c35d8fac32c9c66dd6a","modified":1581616376990},{"_id":"themes/matery/source/libs/echarts/echarts.min.js","hash":"8789b5e4daf0029a6c88f238f10e54d01c4fce82","modified":1581616376884},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.svg","hash":"05a5476e6911a95180006599da5f68e474efd708","modified":1581616376790},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.svg","hash":"1612cf2120a89a8c716a3bc8e07b22ce108bbec2","modified":1581616376818},{"_id":"public/search.xml","hash":"27a13b666faeae89292b2b6be9556d56cdaf51ea","modified":1637764674029},{"_id":"public/content.json","hash":"efe7f0a80d7d3b60b52e695b101301da68bf7257","modified":1637764674029},{"_id":"public/contact/index.html","hash":"9c8de735795c802cd508707d48691b8c58d29881","modified":1637764674029},{"_id":"public/categories/index.html","hash":"0091c61d84bc6bf46ba42670b2baf26ae2256396","modified":1637764674029},{"_id":"public/friends/index.html","hash":"050d4cf9953238a25f7b5af9a2c27e2e436dc6b6","modified":1637764674029},{"_id":"public/about/index.html","hash":"ece0b5a916d6159fb528dcf7d9fc10a51be50e42","modified":1637764674029},{"_id":"public/tags/index.html","hash":"a2e474216b9f7763d89eb8d9ca0e98cbf56bf0af","modified":1637764674029},{"_id":"public/2021/11/24/hello-world/index.html","hash":"ff4b4c927d410900ff8cafc2b042fd92c562882a","modified":1637764674029},{"_id":"public/2021/11/24/hexo/index.html","hash":"31cb7e76aaf9a977b1db2d21d69e61d2597c8df4","modified":1637764674029},{"_id":"public/2020/02/15/CentOSCommandScreen/index.html","hash":"f68cf733eed017596c5def85aafc667d90657cd2","modified":1637764674029},{"_id":"public/2020/02/15/AnOpenSource-LightweightIntranetPenetrationToolSimilarToServo-Ngrok/index.html","hash":"ab46f5b49e41e3dfbe6b0140fc1490088f11f0c4","modified":1637764674029},{"_id":"public/2020/02/15/ATwo-DimensionalWebMulti-PersonOnlineNetworkChatSystem/index.html","hash":"175f7e081168dae200996b90ce74fb4b5de52581","modified":1637764674029},{"_id":"public/2020/02/15/HexoReferencesToLocalImagesCannotBeDisplayed/index.html","hash":"d9253be1c48f014a130fa32dc76bd872cc9858d8","modified":1637764674029},{"_id":"public/2020/02/15/UseKaliWirelessPenetrationToGetTheWifiPassword/index.html","hash":"d18b911a132552f4391455ed736801fb40afbfeb","modified":1637764674029},{"_id":"public/categories/学习/index.html","hash":"6173605a7da302c1c6026354861cd7e7035b2ee8","modified":1637764674029},{"_id":"public/categories/工具/index.html","hash":"11cca72bf8a825a234230142bd24c973f52428b0","modified":1637764674029},{"_id":"public/categories/Bugs/index.html","hash":"d2bd6b14c7d1ac671c578d6cf18608d078b811ed","modified":1637764674029},{"_id":"public/categories/Linux/index.html","hash":"4077a82bfc7b544635f2361f042c1c41c4d31e9f","modified":1637764674029},{"_id":"public/tags/Linux/index.html","hash":"7a3d2a0b50e3c669fed34771c35db09bd45e65ea","modified":1637764674029},{"_id":"public/tags/搭建教程/index.html","hash":"178dfdf3aade62028983c06f8e9f166f6deca675","modified":1637764674029},{"_id":"public/tags/转载/index.html","hash":"4f15f61b2c4acb05623a8ffc2c7f8253fd5c8941","modified":1637764674029},{"_id":"public/tags/Hexo/index.html","hash":"8d143e09e4ebb0d8311d356bd820b06badf50075","modified":1637764674029},{"_id":"public/tags/Kali/index.html","hash":"eb2bdad3cccc5f4f0a00691291293686c8d8747e","modified":1637764674029},{"_id":"public/archives/index.html","hash":"243cdab9998c95d127186480a790fdd2bacfc457","modified":1637764674029},{"_id":"public/archives/2020/index.html","hash":"d0afda8180b9b16c80079d385776fcc2d490d571","modified":1637764674029},{"_id":"public/archives/2020/02/index.html","hash":"d9774affd4cec47dc36a983435d5b348884b5415","modified":1637764674029},{"_id":"public/index.html","hash":"85a39040194edc958e1442e0dd4df54548464d94","modified":1637764674029},{"_id":"public/archives/2021/index.html","hash":"0cb5d07063a10acc61bf7be1f0adef797a738444","modified":1637764674029},{"_id":"public/archives/2021/11/index.html","hash":"4b4dfaa384a8fd517c270781cada842263f6e54f","modified":1637764674029},{"_id":"public/favicon.png","hash":"20674c497b75fc889194b47fd18ecea12303d8ec","modified":1637764674029},{"_id":"public/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1637764674029},{"_id":"public/medias/icp.png","hash":"5d1a1f3051c8a4ad70afa0a5488dfa7f0bb27bd5","modified":1637764674029},{"_id":"public/medias/logo - 副本.png","hash":"4050259723bd418648ec40028a8020364e57a6a3","modified":1637764674029},{"_id":"public/medias/timgcore.jpg","hash":"a0080d3032be57a2500222f79959a48bf70f0bbb","modified":1637764674029},{"_id":"public/medias/featureimages/13.jpg","hash":"66706dfde7d910182c2f1dbadd0e9e917630b8dd","modified":1637764674029},{"_id":"public/medias/featureimages/15.jpg","hash":"5cf9fc64d5d74ab6ba69bb8bff580fdc22ba32d0","modified":1637764674029},{"_id":"public/medias/featureimages/16.jpg","hash":"9cac6b80b0cc8959fc8aabfbd1adcab79ebebfc9","modified":1637764674029},{"_id":"public/medias/featureimages/21.jpg","hash":"d70b088850c3565e5b5bb9eb8fe4abe688c964cf","modified":1637764674029},{"_id":"public/medias/featureimages/2.jpg","hash":"16f1d89cdba4dce935ac0f12599e0fcfda543a93","modified":1637764674029},{"_id":"public/medias/featureimages/22.jpg","hash":"bf5b59d193e5ca089a7fff034c222bfa2c4dc41f","modified":1637764674029},{"_id":"public/medias/featureimages/23.jpg","hash":"ed5ac9f616d3b99af5188a10b1761884c37e93e5","modified":1637764674029},{"_id":"public/medias/featureimages/7.jpg","hash":"a0246a4a560438938489cdd154e35f172b3f31b0","modified":1637764674029},{"_id":"public/medias/featureimages/8.jpg","hash":"5a46ca4ab4c4ab2101a2af77a31a8878bccc483c","modified":1637764674029},{"_id":"public/medias/reward/wechat.png","hash":"aeda7c428a9a7a939b4253547a0a9c79d8e2595c","modified":1637764674029},{"_id":"public/medias/featureimages/5.jpg","hash":"c3c1f36a1b1886037db604f151f335cd4599e970","modified":1637764674029},{"_id":"public/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1637764674029},{"_id":"public/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1637764674029},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1637764674029},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1637764674029},{"_id":"public/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1637764674029},{"_id":"public/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1637764674029},{"_id":"public/libs/lightGallery/fonts/lg.svg","hash":"3480f00d284c812d623ed16a9e0ead3fb964c72e","modified":1637764674029},{"_id":"public/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1637764674029},{"_id":"public/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1637764674029},{"_id":"public/libs/lightGallery/img/video-play.png","hash":"fbfdbe06aebf7d0c00da175a4810cf888d128f11","modified":1637764674029},{"_id":"public/libs/lightGallery/img/vimeo-play.png","hash":"1142b47de219dddfba2e712cd3189dec0c8b7bee","modified":1637764674029},{"_id":"public/libs/lightGallery/img/youtube-play.png","hash":"39150b45ec5fc03155b7ebeaa44f1829281788e2","modified":1637764674029},{"_id":"public/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1637764674029},{"_id":"public/libs/share/fonts/iconfont.svg","hash":"337b4f156f6d8f4beb32c32a3db46fef361cff74","modified":1637764674029},{"_id":"public/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1637764674029},{"_id":"public/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1637764674029},{"_id":"public/2021/11/24/hello-world/image-20200215031832012.png","hash":"86cbf62f40084426bba39cd00f492cc5d93870d6","modified":1637764674029},{"_id":"public/2020/02/15/HexoReferencesToLocalImagesCannotBeDisplayed/20181115112933605.png","hash":"e4195d9311975eac900601ca80ba7b17ff5edf03","modified":1637764674029},{"_id":"public/2020/02/15/HexoReferencesToLocalImagesCannotBeDisplayed/20181115112941162.png","hash":"0336a346831d223c7d81ef0a3d76d04f61372e2c","modified":1637764674029},{"_id":"public/2020/02/15/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802220104192-1581710292747.png","hash":"53a62110f4b3005a5aa7aa1073e9d090e8e1b41d","modified":1637764674029},{"_id":"public/2020/02/15/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802220104192.png","hash":"53a62110f4b3005a5aa7aa1073e9d090e8e1b41d","modified":1637764674029},{"_id":"public/2021/11/24/hexo/11-29-08.jpg","hash":"4ecf8387144aca7adeadedec8968b16a0a453b3f","modified":1637764674029},{"_id":"public/2021/11/24/hexo/11-29-10.jpg","hash":"aaf58a036d6c4cb8c2f8a9876b1e7b0b9ae801d7","modified":1637764674029},{"_id":"public/2021/11/24/hexo/11-29-11.jpg","hash":"693ea8006b8b727cfb15968b949fab835971a37f","modified":1637764674029},{"_id":"public/medias/banner/0.jpg","hash":"1f2ec55fe7825475fde2601573bb622f0bf2acba","modified":1637764674029},{"_id":"public/medias/banner/2.jpg","hash":"8d3c8391ff161eec70f66d69e5545a9468cc52ef","modified":1637764674029},{"_id":"public/medias/featureimages/1.jpg","hash":"d16e28bd23ea3a63643826dde5eea6b7a9bdda5d","modified":1637764674029},{"_id":"public/medias/featureimages/0.jpg","hash":"2066cdda98ad0035071cd4aa7bd696eb078c0b6d","modified":1637764674029},{"_id":"public/medias/featureimages/11.jpg","hash":"9ed45f95b83626e3d91d6c405eb8bfe6fcb9736a","modified":1637764674029},{"_id":"public/medias/featureimages/10.jpg","hash":"838e704942de076c60894d14e5f280e2724b6f68","modified":1637764674029},{"_id":"public/medias/featureimages/12.jpg","hash":"047be4239dd7e0be83243ee6b49a392a61f16b9a","modified":1637764674029},{"_id":"public/medias/featureimages/17.jpg","hash":"f168ca5b046d10a878a7b0bcfab540e2c4428887","modified":1637764674029},{"_id":"public/medias/featureimages/14.jpg","hash":"8aeb816faca2d5eaea4cce9e881d6ff87b8c7cf1","modified":1637764674029},{"_id":"public/medias/featureimages/19.jpg","hash":"57bc7c804b78b5cceb4eb1f9e51b734b75151b71","modified":1637764674029},{"_id":"public/medias/featureimages/18.jpg","hash":"ae23fdfaa59bc57b7ed49e90c5d59e4b68e1eea5","modified":1637764674029},{"_id":"public/medias/featureimages/20.jpg","hash":"8271c4a327632b566ea62f546c083d08a0528e72","modified":1637764674029},{"_id":"public/medias/featureimages/6.jpg","hash":"c63ff64bdd5f6c82da8804c7248fc519d23eaf0b","modified":1637764674029},{"_id":"public/medias/featureimages/3.jpg","hash":"5e879652e032f02961a331b598a50b60ebe80a39","modified":1637764674029},{"_id":"public/medias/featureimages/4.jpg","hash":"4eea5bdb5724ef1ed65790e481eda0d2fb176bf0","modified":1637764674029},{"_id":"public/medias/featureimages/9.jpg","hash":"815c84778b721e3606c2bd7c099c7de7c53251ba","modified":1637764674029},{"_id":"public/medias/reward/alipay.jpg","hash":"399d5e0fb4a8e9285645638eb97bb94b7b6cd796","modified":1637764674029},{"_id":"public/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1637764674029},{"_id":"public/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1637764674029},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1637764674029},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1637764674029},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1637764674029},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1637764674029},{"_id":"public/2020/02/15/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215316131-1581710292501.png","hash":"9f931abebe88b928e5adaa8797764551419388f0","modified":1637764674029},{"_id":"public/2020/02/15/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215328854-1581710292745.png","hash":"450e19867c7c1302520cfcc5091a2388bac68ac1","modified":1637764674029},{"_id":"public/2020/02/15/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215328854.png","hash":"450e19867c7c1302520cfcc5091a2388bac68ac1","modified":1637764674029},{"_id":"public/2020/02/15/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215316131.png","hash":"99b4bbc47e78385af06c6b58dfa5591a3f26f02e","modified":1637764674029},{"_id":"public/2020/02/15/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215338473-1581710292744.png","hash":"7861f4e7002109e90d25dbf69a6e4118c0e6df2c","modified":1637764674029},{"_id":"public/2020/02/15/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215338473.png","hash":"97c0dc75c43d480b1ec39297a1a3b80a7002c5ac","modified":1637764674029},{"_id":"public/2020/02/15/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215350265-1581710292556.png","hash":"58b4d01e5f0d8da94860b6fecfbbe75bf5f7df1f","modified":1637764674029},{"_id":"public/2020/02/15/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215350265.png","hash":"58b4d01e5f0d8da94860b6fecfbbe75bf5f7df1f","modified":1637764674029},{"_id":"public/2020/02/15/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215956812-1581710292746.png","hash":"2231e509a086de5aa0c4493dabeafd9cd386182c","modified":1637764674029},{"_id":"public/2020/02/15/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215956812.png","hash":"2231e509a086de5aa0c4493dabeafd9cd386182c","modified":1637764674029},{"_id":"public/2021/11/24/hexo/11-29-15.jpg","hash":"4d90dd1913efe3c46280713b31018c26f305af70","modified":1637764674029},{"_id":"public/2021/11/24/hexo/11-29-13.jpg","hash":"db80a67bb6b000caa658a1e398214e930e3ab7ea","modified":1637764674029},{"_id":"public/2021/11/24/hexo/11-29-14.jpg","hash":"4f31988fc3528d13e55454332d00849f3ccee3c3","modified":1637764674029},{"_id":"public/2021/11/24/hexo/11-29-12.jpg","hash":"ac647ad720867cfca7df36d6e64bc320fecb9f0c","modified":1637764674029},{"_id":"public/2021/11/24/hexo/11-29-16.jpg","hash":"2daf12faece99a6e72435873ea47288e4182771a","modified":1637764674029},{"_id":"public/2021/11/24/hexo/11-29-18.jpg","hash":"027c70cc0303e82c380037048fbed4b0fc152437","modified":1637764674029},{"_id":"public/2021/11/24/hexo/11-29-19.jpg","hash":"43dd474db7cdf8e1f765273f89c93349325b3021","modified":1637764674029},{"_id":"public/2021/11/24/hexo/11-29-17.jpg","hash":"e30bd38d96a123a2264ff2e22d08266d8db0a527","modified":1637764674029},{"_id":"public/2021/11/24/hexo/11-29-20.jpg","hash":"d5dee6034e5a2489c62526b16838daabf5286b86","modified":1637764674029},{"_id":"public/2021/11/24/hexo/11-29-21.jpg","hash":"1e3a3147346583080c48ae3f6ca8a7c421981b9d","modified":1637764674029},{"_id":"public/2021/11/24/hexo/11-29-22.jpg","hash":"d05eb08ab610a37576c41fd1c911c0ceb63d8631","modified":1637764674029},{"_id":"public/2021/11/24/hexo/11-29-23.jpg","hash":"fd0d690a9b81e88507beb54106adad9fda085d9d","modified":1637764674029},{"_id":"public/2021/11/24/hexo/11-29-24.jpg","hash":"53fabfb54b4038ea18c557304606868897fc1527","modified":1637764674029},{"_id":"public/2021/11/24/hexo/11-29-25.jpg","hash":"ad1d80aad8c98e1d4d7042f1ac9c8dbb9b47809f","modified":1637764674029},{"_id":"public/2021/11/24/hexo/11-29-26.jpg","hash":"67e8b9b3ec75ee00cfadda3c4130d718e2a6e5d8","modified":1637764674029},{"_id":"public/2021/11/24/hexo/11-29-28.jpg","hash":"99b7ba8e4723657545d343e73edc6ddf10331a35","modified":1637764674029},{"_id":"public/2021/11/24/hexo/11-29-29.jpg","hash":"03646dd8e13fe1f8a36ccac39dba37d0b4c329b7","modified":1637764674029},{"_id":"public/2021/11/24/hexo/11-29-30.jpg","hash":"e69702393291a05c1ae1dd995adf440b8cf97769","modified":1637764674029},{"_id":"public/2021/11/24/hexo/11-29-31.jpg","hash":"9c1f30d499029af9d4915688f61fef45dbba99e4","modified":1637764674029},{"_id":"public/2021/11/24/hexo/11-29-32.jpg","hash":"211be5c97bffca888732975ab8e5a66ff6355f37","modified":1637764674029},{"_id":"public/2021/11/24/hexo/image-20200215031519029.png","hash":"1c14fd3097182725ae4934f67243f076b19bc547","modified":1637764674029},{"_id":"public/css/prism-tomorrow.css","hash":"3b99487dfc9b4e51e9105a93743b92a761840e34","modified":1637764674029},{"_id":"public/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1637764674029},{"_id":"public/js/matery.js","hash":"07ed4f743a497d7850b3fdda2a5d9beccc5a8fb5","modified":1637764674029},{"_id":"public/css/my.css","hash":"10577fbc30f241b126d1b51b1f56136ecba86b19","modified":1637764674029},{"_id":"public/css/my-gitalk.css","hash":"eeda46a83d0db1cc239a9cd27d544faf663f9883","modified":1637764674029},{"_id":"public/js/search.js","hash":"499e11786efbb04815b54a1de317cc8606a37555","modified":1637764674029},{"_id":"public/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1637764674029},{"_id":"public/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1637764674029},{"_id":"public/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1637764674029},{"_id":"public/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1637764674029},{"_id":"public/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1637764674029},{"_id":"public/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1637764674029},{"_id":"public/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1637764674029},{"_id":"public/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1637764674029},{"_id":"public/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1637764674029},{"_id":"public/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1637764674029},{"_id":"public/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1637764674029},{"_id":"public/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1637764674029},{"_id":"public/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1637764674029},{"_id":"public/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1637764674029},{"_id":"public/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1637764674029},{"_id":"public/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1637764674029},{"_id":"public/libs/tocbot/tocbot.css","hash":"15601837bf8557c2fd111e4450ed4c8495fd11a0","modified":1637764674029},{"_id":"public/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1637764674029},{"_id":"public/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1637764674029},{"_id":"public/css/matery.css","hash":"76338724e94ef35041e606f1bc528b5ac88ce991","modified":1637764674029},{"_id":"public/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1637764674029},{"_id":"public/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1637764674029},{"_id":"public/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1637764674029},{"_id":"public/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1637764674029},{"_id":"public/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1637764674029},{"_id":"public/libs/gitalk/gitalk.css","hash":"940ded3ea12c2fe1ab0820d2831ec405f3f1fe9f","modified":1637764674029},{"_id":"public/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1637764674029},{"_id":"public/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1637764674029},{"_id":"public/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1637764674029},{"_id":"public/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1637764674029},{"_id":"public/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1637764674029},{"_id":"public/libs/valine/Valine.min.js","hash":"6cbdbf91e1f046dd41267a5ff0691a1fccba99df","modified":1637764674029},{"_id":"public/libs/jquery/jquery.min.js","hash":"2115753ca5fb7032aec498db7bb5dca624dbe6be","modified":1637764674029},{"_id":"public/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1637764674029},{"_id":"public/libs/gitalk/gitalk.min.js","hash":"8fefe38f28804f90116bdcb74a0875c9de9f3b7d","modified":1637764674029},{"_id":"public/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1637764674029},{"_id":"public/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1637764674029},{"_id":"public/libs/materialize/materialize.min.css","hash":"580459a012f556fba86438953062013a94b201af","modified":1637764674029},{"_id":"public/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1637764674029},{"_id":"public/libs/awesome/css/all.css","hash":"ecc41e32ad2696877a1656749841f3b5543bbe3d","modified":1637764674029},{"_id":"public/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1637764674029},{"_id":"public/2021/11/24/hexo/11-29-09.jpg","hash":"4e4442c9ba5afbeff0ace48d2415a1769eb5789b","modified":1637764674029},{"_id":"public/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1637764674029},{"_id":"public/medias/logo.png","hash":"36a5ddb5dbf71ac0724708ee15f657e3c4898d67","modified":1637764674029},{"_id":"public/medias/nekokecore.png","hash":"36a5ddb5dbf71ac0724708ee15f657e3c4898d67","modified":1637764674029},{"_id":"public/medias/banner/1.jpg","hash":"c3d5ab183b39a7140941b8375e29498f9d24f343","modified":1637764674029},{"_id":"public/medias/banner/3.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1637764674029},{"_id":"public/medias/banner/6.jpg","hash":"62e9586a8cec91a160f147c424a3d1d1aea360f9","modified":1637764674029},{"_id":"public/medias/banner/5.jpg","hash":"4a08deec1dd5b4f1490e8fc23adfb75a0f88b0c4","modified":1637764674029},{"_id":"public/libs/awesome/webfonts/fa-regular-400.svg","hash":"3fbb04fe98ec0dd06dcfbf9da2d56efc200d7454","modified":1637764674029},{"_id":"public/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1637764674029},{"_id":"public/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1637764674029},{"_id":"public/2021/11/24/hexo/11-29-27.jpg","hash":"d0b117c8340f95fd45383a453ccfd2c4cba7666d","modified":1637764674029},{"_id":"public/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1637764674029},{"_id":"public/2020/02/15/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215413958-1581710292740.png","hash":"05decb4a5eee366455b54f7cfbd73f2efc3a3797","modified":1637764674029},{"_id":"public/2020/02/15/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215413958.png","hash":"05decb4a5eee366455b54f7cfbd73f2efc3a3797","modified":1637764674029},{"_id":"public/medias/banner/4.jpg","hash":"56850c3139cbd72a0eff0c35d8fac32c9c66dd6a","modified":1637764674029},{"_id":"public/2020/02/15/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215400518.png","hash":"49674d7bfbc1117f9d01dc1bbaf6ab742abf4820","modified":1637764674029},{"_id":"public/2020/02/15/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215400518-1581710292743.png","hash":"8816f582b49588285a8c701cc911932bd8bb8a70","modified":1637764674029},{"_id":"public/2020/02/15/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802220117307-1581710292747.png","hash":"96e12f1d5336b11494586ba12c1281ddb9305479","modified":1637764674029},{"_id":"public/2020/02/15/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802220117307.png","hash":"759ae9ec549d79bde19995961de10cdbcf4a99d0","modified":1637764674029},{"_id":"public/libs/awesome/webfonts/fa-brands-400.svg","hash":"05a5476e6911a95180006599da5f68e474efd708","modified":1637764674029},{"_id":"public/libs/awesome/webfonts/fa-solid-900.svg","hash":"1612cf2120a89a8c716a3bc8e07b22ce108bbec2","modified":1637764674029}],"Category":[{"name":"学习","_id":"ckwdmsuvl0004oovh7uu88umf"},{"name":"工具","_id":"ckwdmsuvr000boovh2zkf985y"},{"name":"Bugs","_id":"ckwdmsuvu000goovhhl3ad7s0"},{"name":"Linux","_id":"ckwdmsuvv000moovh7b36558f"}],"Data":[{"_id":"friends","data":[{"avatar":"http://q1.qlogo.cn/g?b=qq&nk=2750360683&s=640","name":"核心","introduction":"来自山东的一位普通高中生,喜欢捣鼓2333，爱好编程（新手）","url":"http://www.emtips.net/","title":"Piu~"},{"avatar":"https://blobscdn.gitbook.com/v0/b/gitbook-28427.appspot.com/o/spaces%2F-Lw6uUvSmToYpKvgzoM5%2Favatar.png?generation=1576386325104024&alt=media","name":"SRO","introduction":"欢迎来到SRO知识库,您在这里可以看到大多数的SRO内部，外部资料","url":"https://sromc.cn/","title":"Piu~"},{"avatar":"http://q1.qlogo.cn/g?b=qq&nk=1692565761&s=640","name":"河南省商务中等职业学校","introduction":"网络搭建竞赛组","url":"https://blinkfox.github.io/","title":"Piu~"}]}],"Page":[{"title":"friends","date":"2020-02-13T18:00:09.000Z","type":"friends","layout":"friends","_content":"","source":"friends/index.md","raw":"---\ntitle: friends\ndate: 2020-02-14 02:00:09\ntype: \"friends\"\nlayout: \"friends\"\n---\n","updated":"2021-11-24T11:00:32.129Z","path":"friends/index.html","comments":1,"_id":"ckwdmsuvi0001oovhgkj211d0","content":"","site":{"data":{"friends":[{"avatar":"http://q1.qlogo.cn/g?b=qq&nk=2750360683&s=640","name":"核心","introduction":"来自山东的一位普通高中生,喜欢捣鼓2333，爱好编程（新手）","url":"http://www.emtips.net/","title":"Piu~"},{"avatar":"https://blobscdn.gitbook.com/v0/b/gitbook-28427.appspot.com/o/spaces%2F-Lw6uUvSmToYpKvgzoM5%2Favatar.png?generation=1576386325104024&alt=media","name":"SRO","introduction":"欢迎来到SRO知识库,您在这里可以看到大多数的SRO内部，外部资料","url":"https://sromc.cn/","title":"Piu~"},{"avatar":"http://q1.qlogo.cn/g?b=qq&nk=1692565761&s=640","name":"河南省商务中等职业学校","introduction":"网络搭建竞赛组","url":"https://blinkfox.github.io/","title":"Piu~"}]}},"excerpt":"","more":""},{"title":"categories","date":"2020-02-13T17:58:47.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2020-02-14 01:58:47\ntype: \"categories\"\nlayout: \"categories\"\n---\n","updated":"2021-11-24T11:00:32.129Z","path":"categories/index.html","comments":1,"_id":"ckwdmsuvk0003oovhcd00abgv","content":"","site":{"data":{"friends":[{"avatar":"http://q1.qlogo.cn/g?b=qq&nk=2750360683&s=640","name":"核心","introduction":"来自山东的一位普通高中生,喜欢捣鼓2333，爱好编程（新手）","url":"http://www.emtips.net/","title":"Piu~"},{"avatar":"https://blobscdn.gitbook.com/v0/b/gitbook-28427.appspot.com/o/spaces%2F-Lw6uUvSmToYpKvgzoM5%2Favatar.png?generation=1576386325104024&alt=media","name":"SRO","introduction":"欢迎来到SRO知识库,您在这里可以看到大多数的SRO内部，外部资料","url":"https://sromc.cn/","title":"Piu~"},{"avatar":"http://q1.qlogo.cn/g?b=qq&nk=1692565761&s=640","name":"河南省商务中等职业学校","introduction":"网络搭建竞赛组","url":"https://blinkfox.github.io/","title":"Piu~"}]}},"excerpt":"","more":""},{"title":"about","date":"2020-02-13T17:59:28.000Z","type":"about","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2020-02-14 01:59:28\ntype: \"about\"\nlayout: \"about\"\n---\n","updated":"2021-11-24T11:00:32.129Z","path":"about/index.html","comments":1,"_id":"ckwdmsuvo0007oovh6fgh5rbn","content":"","site":{"data":{"friends":[{"avatar":"http://q1.qlogo.cn/g?b=qq&nk=2750360683&s=640","name":"核心","introduction":"来自山东的一位普通高中生,喜欢捣鼓2333，爱好编程（新手）","url":"http://www.emtips.net/","title":"Piu~"},{"avatar":"https://blobscdn.gitbook.com/v0/b/gitbook-28427.appspot.com/o/spaces%2F-Lw6uUvSmToYpKvgzoM5%2Favatar.png?generation=1576386325104024&alt=media","name":"SRO","introduction":"欢迎来到SRO知识库,您在这里可以看到大多数的SRO内部，外部资料","url":"https://sromc.cn/","title":"Piu~"},{"avatar":"http://q1.qlogo.cn/g?b=qq&nk=1692565761&s=640","name":"河南省商务中等职业学校","introduction":"网络搭建竞赛组","url":"https://blinkfox.github.io/","title":"Piu~"}]}},"excerpt":"","more":""},{"title":"tags","date":"2020-02-13T17:59:11.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2020-02-14 01:59:11\ntype: \"tags\"\nlayout: \"tags\"\n---\n","updated":"2021-11-24T11:00:32.129Z","path":"tags/index.html","comments":1,"_id":"ckwdmsuvp0009oovhelhh6phe","content":"","site":{"data":{"friends":[{"avatar":"http://q1.qlogo.cn/g?b=qq&nk=2750360683&s=640","name":"核心","introduction":"来自山东的一位普通高中生,喜欢捣鼓2333，爱好编程（新手）","url":"http://www.emtips.net/","title":"Piu~"},{"avatar":"https://blobscdn.gitbook.com/v0/b/gitbook-28427.appspot.com/o/spaces%2F-Lw6uUvSmToYpKvgzoM5%2Favatar.png?generation=1576386325104024&alt=media","name":"SRO","introduction":"欢迎来到SRO知识库,您在这里可以看到大多数的SRO内部，外部资料","url":"https://sromc.cn/","title":"Piu~"},{"avatar":"http://q1.qlogo.cn/g?b=qq&nk=1692565761&s=640","name":"河南省商务中等职业学校","introduction":"网络搭建竞赛组","url":"https://blinkfox.github.io/","title":"Piu~"}]}},"excerpt":"","more":""},{"title":"contact","date":"2020-02-13T17:59:49.000Z","type":"contact","layout":"contact","_content":"","source":"contact/index.md","raw":"---\ntitle: contact\ndate: 2020-02-14 01:59:49\ntype: \"contact\"\nlayout: \"contact\"\n---\n","updated":"2021-11-24T11:00:32.129Z","path":"contact/index.html","comments":1,"_id":"ckwdmsuwn0019oovh55ri8d9g","content":"","site":{"data":{"friends":[{"avatar":"http://q1.qlogo.cn/g?b=qq&nk=2750360683&s=640","name":"核心","introduction":"来自山东的一位普通高中生,喜欢捣鼓2333，爱好编程（新手）","url":"http://www.emtips.net/","title":"Piu~"},{"avatar":"https://blobscdn.gitbook.com/v0/b/gitbook-28427.appspot.com/o/spaces%2F-Lw6uUvSmToYpKvgzoM5%2Favatar.png?generation=1576386325104024&alt=media","name":"SRO","introduction":"欢迎来到SRO知识库,您在这里可以看到大多数的SRO内部，外部资料","url":"https://sromc.cn/","title":"Piu~"},{"avatar":"http://q1.qlogo.cn/g?b=qq&nk=1692565761&s=640","name":"河南省商务中等职业学校","introduction":"网络搭建竞赛组","url":"https://blinkfox.github.io/","title":"Piu~"}]}},"excerpt":"","more":""}],"Post":[{"title":"一款二次元的Web多人在线网络聊天系统：Fiora安装及使用","typora-copy-images-to":"ATwo-DimensionalWebMulti-PersonOnlineNetworkChatSystem","date":"2020-02-14T20:05:21.000Z","_content":"\n# Install\n## Environmental Preparation\nTo run Fiora, you need Node.js(recommend v14 LTS version), MongoDB and redis\n\n- Install Node.js\n  - Official website https://nodejs.org/en/download/\n  - It is recommended to use nvm to install Node.js\n    - Install nvm https://github.com/nvm-sh/nvm#install--update-script\n    - Install Node.js via nvm https://github.com/nvm-sh/nvm#usage\n  - Install MongoDB\n    - Official website https://docs.mongodb.com/manual/installation/#install-mongodb\n  - Install redis\n    - Official website https://docs.mongodb.com/manual/installation/#install-mongodb\n\nRecommended to running on Linux or MacOS systems\n\n# How to run\n1. Clone the project `git clone https://github.com/yinxin630/fiora.git -b master`\n2. Ensure you have install `yarn` before, if not please run `npm install -g yarn`\n3. Install project dependencies `yarn install`\n4. Build client `yarn build:web`\n5. Config JwtSecret `echo \"JwtSecret=<string>\" > .env2`. Change `<string>` to a secret text\n6. Start the server `yarn start`\n7. Open `http://[ip]:[port]`(such as `http://127.0.0.1:9200`) in browser\n\n## Run in the background\nUsing `yarn start` to run the server will stop running after disconnecting the ssh connection, it is recommended to use pm2 to run\n\n```shell\n# install pm2\nnpm install -g pm2\n\n# use pm2 to run fiora\npm2 start yarn --name fiora -- start\n\n# view pm2 apps status\npm2 ls\n\n# view pm2 fiora logging\npm2 logs fiora\n```\n\n## Run With Develop Mode\n1. Start the server `yarn dev:server`\n2. Start the client `yarn dev:web`\n3. Open `http://localhost:8080` in browser\n\n## Running on the docker\nFirst install docker https://docs.docker.com/install/\n\n## Run directly from the DockerHub image\n```shell\n# Pull mongo\ndocker pull mongo\n\n# Pull redis\ndocker pull redis\n\n# Pull fiora\ndocker pull suisuijiang/fiora\n\n# Create a virtual network\ndocker network create fiora-network\n\n# Run mongodB\ndocker run --name fioradb -p 27017:27017 --network fiora-network mongo\n\n# Run redis\ndocker run --name fioraredis -p 6379:6379 --network fiora-network redis\n\n# Run fiora\ndocker run --name fiora -p 9200:9200 --network fiora-network -e Database=mongodb://fioradb:27017/fiora -e RedisHost=fioraredis suisuijiang/fiora\n```\n\n## Local build image and run\n1. Clone the project to the local `git clone https://github.com/yinxin630/fiora.git -b master`\n2. Build the image` docker-compose build --no-cache --force-rm`\n3. Run it `docker-compose up`","source":"_posts/ATwo-DimensionalWebMulti-PersonOnlineNetworkChatSystem.md","raw":"---\ntitle: 一款二次元的Web多人在线网络聊天系统：Fiora安装及使用\ntypora-copy-images-to: ATwo-DimensionalWebMulti-PersonOnlineNetworkChatSystem\ndate: 2020-02-15 04:05:21\ntags:\n- Linux\n- 搭建教程\ncategories:\n- 学习\n---\n\n# Install\n## Environmental Preparation\nTo run Fiora, you need Node.js(recommend v14 LTS version), MongoDB and redis\n\n- Install Node.js\n  - Official website https://nodejs.org/en/download/\n  - It is recommended to use nvm to install Node.js\n    - Install nvm https://github.com/nvm-sh/nvm#install--update-script\n    - Install Node.js via nvm https://github.com/nvm-sh/nvm#usage\n  - Install MongoDB\n    - Official website https://docs.mongodb.com/manual/installation/#install-mongodb\n  - Install redis\n    - Official website https://docs.mongodb.com/manual/installation/#install-mongodb\n\nRecommended to running on Linux or MacOS systems\n\n# How to run\n1. Clone the project `git clone https://github.com/yinxin630/fiora.git -b master`\n2. Ensure you have install `yarn` before, if not please run `npm install -g yarn`\n3. Install project dependencies `yarn install`\n4. Build client `yarn build:web`\n5. Config JwtSecret `echo \"JwtSecret=<string>\" > .env2`. Change `<string>` to a secret text\n6. Start the server `yarn start`\n7. Open `http://[ip]:[port]`(such as `http://127.0.0.1:9200`) in browser\n\n## Run in the background\nUsing `yarn start` to run the server will stop running after disconnecting the ssh connection, it is recommended to use pm2 to run\n\n```shell\n# install pm2\nnpm install -g pm2\n\n# use pm2 to run fiora\npm2 start yarn --name fiora -- start\n\n# view pm2 apps status\npm2 ls\n\n# view pm2 fiora logging\npm2 logs fiora\n```\n\n## Run With Develop Mode\n1. Start the server `yarn dev:server`\n2. Start the client `yarn dev:web`\n3. Open `http://localhost:8080` in browser\n\n## Running on the docker\nFirst install docker https://docs.docker.com/install/\n\n## Run directly from the DockerHub image\n```shell\n# Pull mongo\ndocker pull mongo\n\n# Pull redis\ndocker pull redis\n\n# Pull fiora\ndocker pull suisuijiang/fiora\n\n# Create a virtual network\ndocker network create fiora-network\n\n# Run mongodB\ndocker run --name fioradb -p 27017:27017 --network fiora-network mongo\n\n# Run redis\ndocker run --name fioraredis -p 6379:6379 --network fiora-network redis\n\n# Run fiora\ndocker run --name fiora -p 9200:9200 --network fiora-network -e Database=mongodb://fioradb:27017/fiora -e RedisHost=fioraredis suisuijiang/fiora\n```\n\n## Local build image and run\n1. Clone the project to the local `git clone https://github.com/yinxin630/fiora.git -b master`\n2. Build the image` docker-compose build --no-cache --force-rm`\n3. Run it `docker-compose up`","slug":"ATwo-DimensionalWebMulti-PersonOnlineNetworkChatSystem","published":1,"updated":"2021-11-24T14:15:29.121Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwdmsuvb0000oovhfklvht8h","content":"<h1 id=\"Install\"><a href=\"#Install\" class=\"headerlink\" title=\"Install\"></a>Install</h1><h2 id=\"Environmental-Preparation\"><a href=\"#Environmental-Preparation\" class=\"headerlink\" title=\"Environmental Preparation\"></a>Environmental Preparation</h2><p>To run Fiora, you need Node.js(recommend v14 LTS version), MongoDB and redis</p>\n<ul>\n<li>Install Node.js<ul>\n<li>Official website <a href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"noopener\">https://nodejs.org/en/download/</a></li>\n<li>It is recommended to use nvm to install Node.js<ul>\n<li>Install nvm <a href=\"https://github.com/nvm-sh/nvm#install--update-script\" target=\"_blank\" rel=\"noopener\">https://github.com/nvm-sh/nvm#install--update-script</a></li>\n<li>Install Node.js via nvm <a href=\"https://github.com/nvm-sh/nvm#usage\" target=\"_blank\" rel=\"noopener\">https://github.com/nvm-sh/nvm#usage</a></li>\n</ul>\n</li>\n<li>Install MongoDB<ul>\n<li>Official website <a href=\"https://docs.mongodb.com/manual/installation/#install-mongodb\" target=\"_blank\" rel=\"noopener\">https://docs.mongodb.com/manual/installation/#install-mongodb</a></li>\n</ul>\n</li>\n<li>Install redis<ul>\n<li>Official website <a href=\"https://docs.mongodb.com/manual/installation/#install-mongodb\" target=\"_blank\" rel=\"noopener\">https://docs.mongodb.com/manual/installation/#install-mongodb</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>Recommended to running on Linux or MacOS systems</p>\n<h1 id=\"How-to-run\"><a href=\"#How-to-run\" class=\"headerlink\" title=\"How to run\"></a>How to run</h1><ol>\n<li>Clone the project <code>git clone https://github.com/yinxin630/fiora.git -b master</code></li>\n<li>Ensure you have install <code>yarn</code> before, if not please run <code>npm install -g yarn</code></li>\n<li>Install project dependencies <code>yarn install</code></li>\n<li>Build client <code>yarn build:web</code></li>\n<li>Config JwtSecret <code>echo &quot;JwtSecret=&lt;string&gt;&quot; &gt; .env2</code>. Change <code>&lt;string&gt;</code> to a secret text</li>\n<li>Start the server <code>yarn start</code></li>\n<li>Open <code>http://[ip]:[port]</code>(such as <code>http://127.0.0.1:9200</code>) in browser</li>\n</ol>\n<h2 id=\"Run-in-the-background\"><a href=\"#Run-in-the-background\" class=\"headerlink\" title=\"Run in the background\"></a>Run in the background</h2><p>Using <code>yarn start</code> to run the server will stop running after disconnecting the ssh connection, it is recommended to use pm2 to run</p>\n<pre class=\" language-shell\"><code class=\"language-shell\"># install pm2\nnpm install -g pm2\n\n# use pm2 to run fiora\npm2 start yarn --name fiora -- start\n\n# view pm2 apps status\npm2 ls\n\n# view pm2 fiora logging\npm2 logs fiora</code></pre>\n<h2 id=\"Run-With-Develop-Mode\"><a href=\"#Run-With-Develop-Mode\" class=\"headerlink\" title=\"Run With Develop Mode\"></a>Run With Develop Mode</h2><ol>\n<li>Start the server <code>yarn dev:server</code></li>\n<li>Start the client <code>yarn dev:web</code></li>\n<li>Open <code>http://localhost:8080</code> in browser</li>\n</ol>\n<h2 id=\"Running-on-the-docker\"><a href=\"#Running-on-the-docker\" class=\"headerlink\" title=\"Running on the docker\"></a>Running on the docker</h2><p>First install docker <a href=\"https://docs.docker.com/install/\" target=\"_blank\" rel=\"noopener\">https://docs.docker.com/install/</a></p>\n<h2 id=\"Run-directly-from-the-DockerHub-image\"><a href=\"#Run-directly-from-the-DockerHub-image\" class=\"headerlink\" title=\"Run directly from the DockerHub image\"></a>Run directly from the DockerHub image</h2><pre class=\" language-shell\"><code class=\"language-shell\"># Pull mongo\ndocker pull mongo\n\n# Pull redis\ndocker pull redis\n\n# Pull fiora\ndocker pull suisuijiang/fiora\n\n# Create a virtual network\ndocker network create fiora-network\n\n# Run mongodB\ndocker run --name fioradb -p 27017:27017 --network fiora-network mongo\n\n# Run redis\ndocker run --name fioraredis -p 6379:6379 --network fiora-network redis\n\n# Run fiora\ndocker run --name fiora -p 9200:9200 --network fiora-network -e Database=mongodb://fioradb:27017/fiora -e RedisHost=fioraredis suisuijiang/fiora</code></pre>\n<h2 id=\"Local-build-image-and-run\"><a href=\"#Local-build-image-and-run\" class=\"headerlink\" title=\"Local build image and run\"></a>Local build image and run</h2><ol>\n<li>Clone the project to the local <code>git clone https://github.com/yinxin630/fiora.git -b master</code></li>\n<li>Build the image<code>docker-compose build --no-cache --force-rm</code></li>\n<li>Run it <code>docker-compose up</code></li>\n</ol>\n","site":{"data":{"friends":[{"avatar":"http://q1.qlogo.cn/g?b=qq&nk=2750360683&s=640","name":"核心","introduction":"来自山东的一位普通高中生,喜欢捣鼓2333，爱好编程（新手）","url":"http://www.emtips.net/","title":"Piu~"},{"avatar":"https://blobscdn.gitbook.com/v0/b/gitbook-28427.appspot.com/o/spaces%2F-Lw6uUvSmToYpKvgzoM5%2Favatar.png?generation=1576386325104024&alt=media","name":"SRO","introduction":"欢迎来到SRO知识库,您在这里可以看到大多数的SRO内部，外部资料","url":"https://sromc.cn/","title":"Piu~"},{"avatar":"http://q1.qlogo.cn/g?b=qq&nk=1692565761&s=640","name":"河南省商务中等职业学校","introduction":"网络搭建竞赛组","url":"https://blinkfox.github.io/","title":"Piu~"}]}},"excerpt":"","more":"<h1 id=\"Install\"><a href=\"#Install\" class=\"headerlink\" title=\"Install\"></a>Install</h1><h2 id=\"Environmental-Preparation\"><a href=\"#Environmental-Preparation\" class=\"headerlink\" title=\"Environmental Preparation\"></a>Environmental Preparation</h2><p>To run Fiora, you need Node.js(recommend v14 LTS version), MongoDB and redis</p>\n<ul>\n<li>Install Node.js<ul>\n<li>Official website <a href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"noopener\">https://nodejs.org/en/download/</a></li>\n<li>It is recommended to use nvm to install Node.js<ul>\n<li>Install nvm <a href=\"https://github.com/nvm-sh/nvm#install--update-script\" target=\"_blank\" rel=\"noopener\">https://github.com/nvm-sh/nvm#install--update-script</a></li>\n<li>Install Node.js via nvm <a href=\"https://github.com/nvm-sh/nvm#usage\" target=\"_blank\" rel=\"noopener\">https://github.com/nvm-sh/nvm#usage</a></li>\n</ul>\n</li>\n<li>Install MongoDB<ul>\n<li>Official website <a href=\"https://docs.mongodb.com/manual/installation/#install-mongodb\" target=\"_blank\" rel=\"noopener\">https://docs.mongodb.com/manual/installation/#install-mongodb</a></li>\n</ul>\n</li>\n<li>Install redis<ul>\n<li>Official website <a href=\"https://docs.mongodb.com/manual/installation/#install-mongodb\" target=\"_blank\" rel=\"noopener\">https://docs.mongodb.com/manual/installation/#install-mongodb</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>Recommended to running on Linux or MacOS systems</p>\n<h1 id=\"How-to-run\"><a href=\"#How-to-run\" class=\"headerlink\" title=\"How to run\"></a>How to run</h1><ol>\n<li>Clone the project <code>git clone https://github.com/yinxin630/fiora.git -b master</code></li>\n<li>Ensure you have install <code>yarn</code> before, if not please run <code>npm install -g yarn</code></li>\n<li>Install project dependencies <code>yarn install</code></li>\n<li>Build client <code>yarn build:web</code></li>\n<li>Config JwtSecret <code>echo &quot;JwtSecret=&lt;string&gt;&quot; &gt; .env2</code>. Change <code>&lt;string&gt;</code> to a secret text</li>\n<li>Start the server <code>yarn start</code></li>\n<li>Open <code>http://[ip]:[port]</code>(such as <code>http://127.0.0.1:9200</code>) in browser</li>\n</ol>\n<h2 id=\"Run-in-the-background\"><a href=\"#Run-in-the-background\" class=\"headerlink\" title=\"Run in the background\"></a>Run in the background</h2><p>Using <code>yarn start</code> to run the server will stop running after disconnecting the ssh connection, it is recommended to use pm2 to run</p>\n<pre><code class=\"shell\"># install pm2\nnpm install -g pm2\n\n# use pm2 to run fiora\npm2 start yarn --name fiora -- start\n\n# view pm2 apps status\npm2 ls\n\n# view pm2 fiora logging\npm2 logs fiora</code></pre>\n<h2 id=\"Run-With-Develop-Mode\"><a href=\"#Run-With-Develop-Mode\" class=\"headerlink\" title=\"Run With Develop Mode\"></a>Run With Develop Mode</h2><ol>\n<li>Start the server <code>yarn dev:server</code></li>\n<li>Start the client <code>yarn dev:web</code></li>\n<li>Open <code>http://localhost:8080</code> in browser</li>\n</ol>\n<h2 id=\"Running-on-the-docker\"><a href=\"#Running-on-the-docker\" class=\"headerlink\" title=\"Running on the docker\"></a>Running on the docker</h2><p>First install docker <a href=\"https://docs.docker.com/install/\" target=\"_blank\" rel=\"noopener\">https://docs.docker.com/install/</a></p>\n<h2 id=\"Run-directly-from-the-DockerHub-image\"><a href=\"#Run-directly-from-the-DockerHub-image\" class=\"headerlink\" title=\"Run directly from the DockerHub image\"></a>Run directly from the DockerHub image</h2><pre><code class=\"shell\"># Pull mongo\ndocker pull mongo\n\n# Pull redis\ndocker pull redis\n\n# Pull fiora\ndocker pull suisuijiang/fiora\n\n# Create a virtual network\ndocker network create fiora-network\n\n# Run mongodB\ndocker run --name fioradb -p 27017:27017 --network fiora-network mongo\n\n# Run redis\ndocker run --name fioraredis -p 6379:6379 --network fiora-network redis\n\n# Run fiora\ndocker run --name fiora -p 9200:9200 --network fiora-network -e Database=mongodb://fioradb:27017/fiora -e RedisHost=fioraredis suisuijiang/fiora</code></pre>\n<h2 id=\"Local-build-image-and-run\"><a href=\"#Local-build-image-and-run\" class=\"headerlink\" title=\"Local build image and run\"></a>Local build image and run</h2><ol>\n<li>Clone the project to the local <code>git clone https://github.com/yinxin630/fiora.git -b master</code></li>\n<li>Build the image<code>docker-compose build --no-cache --force-rm</code></li>\n<li>Run it <code>docker-compose up</code></li>\n</ol>\n"},{"title":"一个开源、轻量且类似于Servo/Ngrok的内网穿透工具","typora-copy-images-to":"AnOpenSource,LightweightIntranetPenetrationToolSimilarToServo/Ngrok","date":"2020-02-14T20:11:03.000Z","_content":"\n**说明：**`sish`是一个`SSH`服务器，仅用于远程端口转发，可以快速将本地端口暴露在外网，作者声称其为`Servo`/`Ngrok`替代方案，仅使用`SSH`的`HTTP(S)`、`WS(S)`、`TCP`隧道连接到他们的`localhost`服务器，该工具和[Servo](https://www.moerats.com/archives/990/)差不多一样，不同就是`Servo`官方提供了免费的`SSH`客户端，而`sish`作者提供的客户端貌似因为滥用关闭了，所以就需要我们自己搭建了，这里就水下`Docker`和手动安装。\n\n## Docker安装\n\n**Github地址：**https://github.com/antoniomika/sish\n\n**1、安装Docker**\n\n```\n#CentOS 6\nrpm -iUvh http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm\nyum update -y\nyum -y install docker-io\nservice docker start\nchkconfig docker on\n\n#CentOS 7、Debian、Ubuntu\ncurl -sSL https://get.docker.com/ | sh\nsystemctl start docker\nsystemctl enable docker\n```\n\n**2、拉取镜像**\n这里由于直接使用`ip`的话，只能用于转发`TCP`，`HTTP(S)`等就需要配置下域名了，所以以下全部默认使用域名。\n\n先解析一个主/泛域名到服务器`ip`，比如解析`moerats.com`、`*.moerats.com`到服务器`ip`。\n\n然后再参考下面的参数详解，再自行修改部分参数后，使用命令：\n\n```\n#配置http域名\ndocker run -d --name sish \\\n  --restart=always \\\n  -v ~/sish/keys:/keys \\\n  -v ~/sish/pubkeys:/pubkeys \\\n  --net=host antoniomika/sish \\\n  -sish.addr=:3333 \\\n  -sish.http=:80 \\\n  -sish.keysdir=/pubkeys \\\n  -sish.pkloc=/keys/ssh_key \\\n  -sish.forcerandomsubdomain=false \\\n  -sish.domain moerats.com \\\n  -sish.bindrandom=false \\\n  -sish.redirectrootlocation https://www.baidu.com \n\n#配置https域名，这里需要提供泛域名证书\ndocker run -d --name sish \\\n  --restart=always \\\n  -v ~/sish/ssl:/ssl \\\n  -v ~/sish/keys:/keys \\\n  -v ~/sish/pubkeys:/pubkeys \\\n  --net=host antoniomika/sish \\\n  -sish.addr=:3333 \\\n  -sish.https=:443 \\\n  -sish.http=:80 \\\n  -sish.httpsenabled=true \\\n  -sish.httpspems=/ssl \\\n  -sish.keysdir=/pubkeys \\\n  -sish.pkloc=/keys/ssh_key \\\n  -sish.forcerandomsubdomain=false \\\n  -sish.domain moerats.com \\\n  -sish.bindrandom=false \\\n  -sish.redirectrootlocation https://www.baidu.com\n```\n\n部分参数如下：\n\n```\n-sish.addr=:3333  #ssh监听地址\n-sish.forcerandomsubdomain=false  #是否强制随机子域，这个建议关掉\n-sish.bindrandom=false  #是否随机绑定端口，这个建议关掉\n-sish.domain moerats.com  #使用的域名\n-sish.redirectrootlocation https://www.baidu.com  #主域名(-sish.domain参数)强制跳转到该地址\n-sish.httpspems=/ssl  #泛域名SSL证书路径，存放路径~/sish/ssl，证书命名格式fullchain.pem和privkey.pem\n```\n\n其他参数默认即可，也可以自行添加或修改其它参数。\n\n全部参数如下：\n\n```\nUsage of sish:\n  -sish.addr string\n        The address to listen for SSH connections (default \"localhost:2222\")\n  -sish.auth\n        Whether or not to require auth on the SSH service\n  -sish.bannedcountries string\n        A comma separated list of banned countries\n  -sish.bannedips string\n        A comma separated list of banned ips\n  -sish.bannedsubdomains string\n        A comma separated list of banned subdomains (default \"localhost\")\n  -sish.bindrandom\n        Bind ports randomly (OS chooses) (default true)\n  -sish.bindrange string\n        Ports that are allowed to be bound (default \"0,1024-65535\")\n  -sish.cleanupunbound\n        Whether or not to cleanup unbound (forwarded) SSH connections (default true)\n  -sish.debug\n        Whether or not to print debug information\n  -sish.domain string\n        The domain for HTTP(S) multiplexing (default \"ssi.sh\")\n  -sish.forcerandomsubdomain\n        Whether or not to force a random subdomain (default true)\n  -sish.http string\n        The address to listen for HTTP connections (default \"localhost:80\")\n  -sish.httpport int\n        The port for HTTP connections. This is only for output messages (default 80)\n  -sish.https string\n        The address to listen for HTTPS connections (default \"localhost:443\")\n  -sish.httpsenabled\n        Whether or not to listen for HTTPS connections\n  -sish.httpspems string\n        The location of pem files for HTTPS (fullchain.pem and privkey.pem) (default \"ssl/\")\n  -sish.httpsport int\n        The port for HTTPS connections. This is only for output messages (default 443)\n  -sish.keysdir string\n        Directory for public keys for pubkey auth (default \"pubkeys/\")\n  -sish.password string\n        Password to use for password auth (default \"S3Cr3tP4$$W0rD\")\n  -sish.pkloc string\n        SSH server private key (default \"keys/ssh_key\")\n  -sish.pkpass string\n        Passphrase to use for the server private key (default \"S3Cr3tP4$$phrAsE\")\n  -sish.proxyprotoenabled\n        Whether or not to enable the use of the proxy protocol\n  -sish.proxyprotoversion string\n        What version of the proxy protocol to use. Can either be 1, 2, or userdefined. If userdefined, the user needs to add a command to SSH called proxy:version (ie proxy:1) (default \"1\")\n  -sish.redirectroot\n        Whether or not to redirect the root domain (default true)\n  -sish.redirectrootlocation string\n        Where to redirect the root domain to (default \"https://github.com/antoniomika/sish\")\n  -sish.subdomainlen int\n        The length of the random subdomain to generate (default 3)\n  -sish.usegeodb\n        Whether or not to use the maxmind geodb\n  -sish.verifyorigin\n        Whether or not to verify origin on websocket connection (default true)\n  -sish.verifyssl\n        Whether or not to verify SSL on proxy connection (default true)\n  -sish.whitelistedcountries string\n        A comma separated list of whitelisted countries\n  -sish.whitelistedips string\n        A comma separated list of whitelisted ips\n```\n\n看不懂的，可以使用下谷歌翻译。\n\n最后`CentOS`系统建议关闭防火墙使用，或者打开部分端口也行，关闭命令：\n\n```\n#CentOS 6系统\nservice iptables stop\nchkconfig iptables off\n\n#CentOS 7系统\nsystemctl stop firewalld\nsystemctl disable firewalld\n```\n\n像阿里云等服务器，还需要去安全组那里开放下端口。\n\n## 手动安装\n\n`Docker`虽然方便很多，但也有人会喜欢手动安装，这里作者没直接给出二进制文件，所以就需要我们手动来构建二进制文件了。\n\n**1、安装Go**\n这里由于需要新版的`Go`环境，所以这里就使用`Go`二进制包安装环境，下载地址→[传送门](https://golang.org/dl/)。\n\n然后根据自己的服务器架构下载对应的最新安装包，一般可以直接使用命令：\n\n```\n#32位系统下载\nwget -O go.tar.gz https://dl.google.com/go/go1.13.3.linux-386.tar.gz\n#64位系统下载\nwget -O go.tar.gz https://dl.google.com/go/go1.13.3.linux-amd64.tar.gz\n\n#解压压缩包\ntar -zxvf go.tar.gz -C /usr/local\n#设置环境变量，将以下一起复制进ssh客户端运行\nmkdir $HOME/go\necho 'export GOROOT=/usr/local/go\nexport GOPATH=$HOME/go\nexport PATH=$PATH:$GOROOT/bin:$GOPATH/bin' >> /etc/profile\nsource /etc/profile\n#查看go版本，有输出即为安装成功\ngo version\n```\n\n**2、安装sish**\n\n```\n#下载源码到主目录\ngit clone https://github.com/antoniomika/sish\ncd sish\n#编译二进制文件\ngo install\n```\n\n这里提示`-bash: git: command not found`的，可以先使用命令：\n\n```\n#CentOS\nyum -y install git\n\n#Debian、Ubuntu\napt install git -y\n```\n\n**3、运行sish**\n运行参数这里就不贴了，直接参考上面`Docker`安装最下面的全部参数就行了。\n\n先解析一个主/泛域名到服务器`ip`，比如解析`moerats.com`、`*.moerats.com`到服务器`ip`。\n\n这里就贴个大概需要使用的参数，其它的根据需求自行修改，使用命令：\n\n```\n#配置http域名\nsish -sish.addr=:3333 -sish.http=:80 -sish.domain moerats.com -sish.forcerandomsubdomain=false -sish.bindrandom=false -sish.redirectrootlocation https://www.moerats.com -sish.keysdir=/sish/pubkeys -sish.pkloc=/sish/keys/ssh_key \n\n#配置https域名\nsish -sish.addr=:3333 -sish.https=:443 -sish.http=:80 -sish.domain moerats.com -sish.forcerandomsubdomain=false -sish.bindrandom=false -sish.httpsenabled=true -sish.redirectrootlocation https://www.moerats.com -sish.keysdir=/sish/pubkeys -sish.pkloc=/sish/keys/ssh_key -sish.httpspems=/sish/ssl\n```\n\n部分参数详解：\n\n```\n-sish.addr=:3333  #ssh监听地址，这里为3333\n-sish.forcerandomsubdomain=false  #是否强制随机子域，这个建议关掉\n-sish.bindrandom=false  #是否随机绑定端口，这个建议关掉\n-sish.domain moerats.com  #使用的域名\n-sish.redirectrootlocation https://www.baidu.com  #主域名(-sish.domain参数)强制跳转到该地址\n-sish.httpspems=/sish/ssl  #泛域名SSL证书存放路径，证书命名格式fullchain.pem和privkey.pem\n-sish.keysdir=/sish/pubkeys  #pubkey auth的公共密钥存放文件夹\n-sish.pkloc=/sish/keys/ssh_key  #SSH服务器私钥\n```\n\n这里`/sish/ssl`、`/sish/pubkeys`、`/sish/keys`目录需要自己提前创建下，使用命令：\n\n```\nmkdir -p /sish/ssl /sish/pubkeys /sish/keys\n```\n\n**4、开机自启**\n如果你使用手动命令没问题了，先使用`Ctrl+C`断开命令。\n\n再新建`systemd`配置文件，适用`CentOS 7`、`Debian 8+`、`Ubuntu 16+`。\n\n```\n#修改成你手动运行命令的全部参数\ncommand=\"-sish.addr=:3333 -sish.http=:80 -sish.domain moerats.com -sish.forcerandomsubdomain=false -sish.bindrandom=false -sish.redirectrootlocation https://www.moerats.com -sish.keysdir=/sish/pubkeys -sish.pkloc=/sish/keys\"\n#将以下代码一起复制到SSH运行\ncat > /etc/systemd/system/sish.service <<EOF\n[Unit]\nDescription=sish\nAfter=network.target\n\n[Service]\nType=simple\nExecStart=$(command -v sish) ${command}\nRestart=on-failure\n\n[Install]\nWantedBy=multi-user.target\nEOF\n```\n\n启动并设置开机自启：\n\n```\nsystemctl start sish\nsystemctl enable sish\n```\n\n最后`CentOS`系统建议关闭防火墙使用，或者打开部分端口也行，关闭命令：\n\n```\n#CentOS 6系统\nservice iptables stop\nchkconfig iptables off\n\n#CentOS 7系统\nsystemctl stop firewalld\nsystemctl disable firewalld\n```\n\n像阿里云等服务器，还需要去安全组那里开放下端口。\n\n## 使用\n\n使用要求：可以使用`SSH`，并且能连接到互联网，`Linux`、`Windows`等系统都行。\n\n以下所使用的的`moerats.com`为上面配置好的客户端域名地址，自行修改成自己的即可。\n\n**1、转发HTTP(S)**\n将本地`3000`端口穿透到公网中，使用命令：\n\n```\n#要转发其它端口的自行替换\nssh -p 3333 -R 80:localhost:3000 moerats.com\n```\n\n第一次如果有提示，选择`yes`即可，之后会为你随机生成一个`moerats.com`的二级域名，然后就可以使用浏览器间接访问本地的`localhost:3000`了。\n\n如果要指定二级域名，可以使用命令：\n\n```\n#这里默认为no1.moerats.com，自行替换即可\nssh -p 3333 -R no1:80:localhost:3000 moerats.com\n```\n\n此时你就可以在外网使用`no1.moerats.com`访问你本地的`localhost:3000`了。\n\n**2、转发TCP**\n将本地`6789`端口穿透到公网的`9876`端口中，使用命令：\n\n```\n#可以自行设置公网端口，这里默认6789，如果你要转发SSH端口，那就改成你的SSH端口\nssh -p 3333 -R 9876:localhost:6789 moerats.com\n```\n\n这里只说了下简单用法，客户端我们还可以设置国家/地区、`IP`白名单等，使用参考→[传送门](https://github.com/antoniomika/sish#whitelisting-ips)。\n\n最后没有泛域名证书的，可以查看该教程自己申请→[传送门](https://www.moerats.com/archives/900/)，或者等博主发码子→[传送门](https://www.moerats.com/archives/996/)。\n\n------\n\n> 版权声明：本文为原创文章，版权归 [Rat's Blog](https://www.moerats.com/) 所有，转载请注明出处！\n>\n> 本文链接：https://www.moerats.com/archives/1002/","source":"_posts/AnOpenSource-LightweightIntranetPenetrationToolSimilarToServo-Ngrok.md","raw":"---\ntitle: '一个开源、轻量且类似于Servo/Ngrok的内网穿透工具'\ntypora-copy-images-to: 'AnOpenSource,LightweightIntranetPenetrationToolSimilarToServo/Ngrok'\ndate: 2020-02-15 04:11:03\ntags:\n- 转载\n- Linux\n- 搭建教程\ncategories:\n- 工具\n---\n\n**说明：**`sish`是一个`SSH`服务器，仅用于远程端口转发，可以快速将本地端口暴露在外网，作者声称其为`Servo`/`Ngrok`替代方案，仅使用`SSH`的`HTTP(S)`、`WS(S)`、`TCP`隧道连接到他们的`localhost`服务器，该工具和[Servo](https://www.moerats.com/archives/990/)差不多一样，不同就是`Servo`官方提供了免费的`SSH`客户端，而`sish`作者提供的客户端貌似因为滥用关闭了，所以就需要我们自己搭建了，这里就水下`Docker`和手动安装。\n\n## Docker安装\n\n**Github地址：**https://github.com/antoniomika/sish\n\n**1、安装Docker**\n\n```\n#CentOS 6\nrpm -iUvh http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm\nyum update -y\nyum -y install docker-io\nservice docker start\nchkconfig docker on\n\n#CentOS 7、Debian、Ubuntu\ncurl -sSL https://get.docker.com/ | sh\nsystemctl start docker\nsystemctl enable docker\n```\n\n**2、拉取镜像**\n这里由于直接使用`ip`的话，只能用于转发`TCP`，`HTTP(S)`等就需要配置下域名了，所以以下全部默认使用域名。\n\n先解析一个主/泛域名到服务器`ip`，比如解析`moerats.com`、`*.moerats.com`到服务器`ip`。\n\n然后再参考下面的参数详解，再自行修改部分参数后，使用命令：\n\n```\n#配置http域名\ndocker run -d --name sish \\\n  --restart=always \\\n  -v ~/sish/keys:/keys \\\n  -v ~/sish/pubkeys:/pubkeys \\\n  --net=host antoniomika/sish \\\n  -sish.addr=:3333 \\\n  -sish.http=:80 \\\n  -sish.keysdir=/pubkeys \\\n  -sish.pkloc=/keys/ssh_key \\\n  -sish.forcerandomsubdomain=false \\\n  -sish.domain moerats.com \\\n  -sish.bindrandom=false \\\n  -sish.redirectrootlocation https://www.baidu.com \n\n#配置https域名，这里需要提供泛域名证书\ndocker run -d --name sish \\\n  --restart=always \\\n  -v ~/sish/ssl:/ssl \\\n  -v ~/sish/keys:/keys \\\n  -v ~/sish/pubkeys:/pubkeys \\\n  --net=host antoniomika/sish \\\n  -sish.addr=:3333 \\\n  -sish.https=:443 \\\n  -sish.http=:80 \\\n  -sish.httpsenabled=true \\\n  -sish.httpspems=/ssl \\\n  -sish.keysdir=/pubkeys \\\n  -sish.pkloc=/keys/ssh_key \\\n  -sish.forcerandomsubdomain=false \\\n  -sish.domain moerats.com \\\n  -sish.bindrandom=false \\\n  -sish.redirectrootlocation https://www.baidu.com\n```\n\n部分参数如下：\n\n```\n-sish.addr=:3333  #ssh监听地址\n-sish.forcerandomsubdomain=false  #是否强制随机子域，这个建议关掉\n-sish.bindrandom=false  #是否随机绑定端口，这个建议关掉\n-sish.domain moerats.com  #使用的域名\n-sish.redirectrootlocation https://www.baidu.com  #主域名(-sish.domain参数)强制跳转到该地址\n-sish.httpspems=/ssl  #泛域名SSL证书路径，存放路径~/sish/ssl，证书命名格式fullchain.pem和privkey.pem\n```\n\n其他参数默认即可，也可以自行添加或修改其它参数。\n\n全部参数如下：\n\n```\nUsage of sish:\n  -sish.addr string\n        The address to listen for SSH connections (default \"localhost:2222\")\n  -sish.auth\n        Whether or not to require auth on the SSH service\n  -sish.bannedcountries string\n        A comma separated list of banned countries\n  -sish.bannedips string\n        A comma separated list of banned ips\n  -sish.bannedsubdomains string\n        A comma separated list of banned subdomains (default \"localhost\")\n  -sish.bindrandom\n        Bind ports randomly (OS chooses) (default true)\n  -sish.bindrange string\n        Ports that are allowed to be bound (default \"0,1024-65535\")\n  -sish.cleanupunbound\n        Whether or not to cleanup unbound (forwarded) SSH connections (default true)\n  -sish.debug\n        Whether or not to print debug information\n  -sish.domain string\n        The domain for HTTP(S) multiplexing (default \"ssi.sh\")\n  -sish.forcerandomsubdomain\n        Whether or not to force a random subdomain (default true)\n  -sish.http string\n        The address to listen for HTTP connections (default \"localhost:80\")\n  -sish.httpport int\n        The port for HTTP connections. This is only for output messages (default 80)\n  -sish.https string\n        The address to listen for HTTPS connections (default \"localhost:443\")\n  -sish.httpsenabled\n        Whether or not to listen for HTTPS connections\n  -sish.httpspems string\n        The location of pem files for HTTPS (fullchain.pem and privkey.pem) (default \"ssl/\")\n  -sish.httpsport int\n        The port for HTTPS connections. This is only for output messages (default 443)\n  -sish.keysdir string\n        Directory for public keys for pubkey auth (default \"pubkeys/\")\n  -sish.password string\n        Password to use for password auth (default \"S3Cr3tP4$$W0rD\")\n  -sish.pkloc string\n        SSH server private key (default \"keys/ssh_key\")\n  -sish.pkpass string\n        Passphrase to use for the server private key (default \"S3Cr3tP4$$phrAsE\")\n  -sish.proxyprotoenabled\n        Whether or not to enable the use of the proxy protocol\n  -sish.proxyprotoversion string\n        What version of the proxy protocol to use. Can either be 1, 2, or userdefined. If userdefined, the user needs to add a command to SSH called proxy:version (ie proxy:1) (default \"1\")\n  -sish.redirectroot\n        Whether or not to redirect the root domain (default true)\n  -sish.redirectrootlocation string\n        Where to redirect the root domain to (default \"https://github.com/antoniomika/sish\")\n  -sish.subdomainlen int\n        The length of the random subdomain to generate (default 3)\n  -sish.usegeodb\n        Whether or not to use the maxmind geodb\n  -sish.verifyorigin\n        Whether or not to verify origin on websocket connection (default true)\n  -sish.verifyssl\n        Whether or not to verify SSL on proxy connection (default true)\n  -sish.whitelistedcountries string\n        A comma separated list of whitelisted countries\n  -sish.whitelistedips string\n        A comma separated list of whitelisted ips\n```\n\n看不懂的，可以使用下谷歌翻译。\n\n最后`CentOS`系统建议关闭防火墙使用，或者打开部分端口也行，关闭命令：\n\n```\n#CentOS 6系统\nservice iptables stop\nchkconfig iptables off\n\n#CentOS 7系统\nsystemctl stop firewalld\nsystemctl disable firewalld\n```\n\n像阿里云等服务器，还需要去安全组那里开放下端口。\n\n## 手动安装\n\n`Docker`虽然方便很多，但也有人会喜欢手动安装，这里作者没直接给出二进制文件，所以就需要我们手动来构建二进制文件了。\n\n**1、安装Go**\n这里由于需要新版的`Go`环境，所以这里就使用`Go`二进制包安装环境，下载地址→[传送门](https://golang.org/dl/)。\n\n然后根据自己的服务器架构下载对应的最新安装包，一般可以直接使用命令：\n\n```\n#32位系统下载\nwget -O go.tar.gz https://dl.google.com/go/go1.13.3.linux-386.tar.gz\n#64位系统下载\nwget -O go.tar.gz https://dl.google.com/go/go1.13.3.linux-amd64.tar.gz\n\n#解压压缩包\ntar -zxvf go.tar.gz -C /usr/local\n#设置环境变量，将以下一起复制进ssh客户端运行\nmkdir $HOME/go\necho 'export GOROOT=/usr/local/go\nexport GOPATH=$HOME/go\nexport PATH=$PATH:$GOROOT/bin:$GOPATH/bin' >> /etc/profile\nsource /etc/profile\n#查看go版本，有输出即为安装成功\ngo version\n```\n\n**2、安装sish**\n\n```\n#下载源码到主目录\ngit clone https://github.com/antoniomika/sish\ncd sish\n#编译二进制文件\ngo install\n```\n\n这里提示`-bash: git: command not found`的，可以先使用命令：\n\n```\n#CentOS\nyum -y install git\n\n#Debian、Ubuntu\napt install git -y\n```\n\n**3、运行sish**\n运行参数这里就不贴了，直接参考上面`Docker`安装最下面的全部参数就行了。\n\n先解析一个主/泛域名到服务器`ip`，比如解析`moerats.com`、`*.moerats.com`到服务器`ip`。\n\n这里就贴个大概需要使用的参数，其它的根据需求自行修改，使用命令：\n\n```\n#配置http域名\nsish -sish.addr=:3333 -sish.http=:80 -sish.domain moerats.com -sish.forcerandomsubdomain=false -sish.bindrandom=false -sish.redirectrootlocation https://www.moerats.com -sish.keysdir=/sish/pubkeys -sish.pkloc=/sish/keys/ssh_key \n\n#配置https域名\nsish -sish.addr=:3333 -sish.https=:443 -sish.http=:80 -sish.domain moerats.com -sish.forcerandomsubdomain=false -sish.bindrandom=false -sish.httpsenabled=true -sish.redirectrootlocation https://www.moerats.com -sish.keysdir=/sish/pubkeys -sish.pkloc=/sish/keys/ssh_key -sish.httpspems=/sish/ssl\n```\n\n部分参数详解：\n\n```\n-sish.addr=:3333  #ssh监听地址，这里为3333\n-sish.forcerandomsubdomain=false  #是否强制随机子域，这个建议关掉\n-sish.bindrandom=false  #是否随机绑定端口，这个建议关掉\n-sish.domain moerats.com  #使用的域名\n-sish.redirectrootlocation https://www.baidu.com  #主域名(-sish.domain参数)强制跳转到该地址\n-sish.httpspems=/sish/ssl  #泛域名SSL证书存放路径，证书命名格式fullchain.pem和privkey.pem\n-sish.keysdir=/sish/pubkeys  #pubkey auth的公共密钥存放文件夹\n-sish.pkloc=/sish/keys/ssh_key  #SSH服务器私钥\n```\n\n这里`/sish/ssl`、`/sish/pubkeys`、`/sish/keys`目录需要自己提前创建下，使用命令：\n\n```\nmkdir -p /sish/ssl /sish/pubkeys /sish/keys\n```\n\n**4、开机自启**\n如果你使用手动命令没问题了，先使用`Ctrl+C`断开命令。\n\n再新建`systemd`配置文件，适用`CentOS 7`、`Debian 8+`、`Ubuntu 16+`。\n\n```\n#修改成你手动运行命令的全部参数\ncommand=\"-sish.addr=:3333 -sish.http=:80 -sish.domain moerats.com -sish.forcerandomsubdomain=false -sish.bindrandom=false -sish.redirectrootlocation https://www.moerats.com -sish.keysdir=/sish/pubkeys -sish.pkloc=/sish/keys\"\n#将以下代码一起复制到SSH运行\ncat > /etc/systemd/system/sish.service <<EOF\n[Unit]\nDescription=sish\nAfter=network.target\n\n[Service]\nType=simple\nExecStart=$(command -v sish) ${command}\nRestart=on-failure\n\n[Install]\nWantedBy=multi-user.target\nEOF\n```\n\n启动并设置开机自启：\n\n```\nsystemctl start sish\nsystemctl enable sish\n```\n\n最后`CentOS`系统建议关闭防火墙使用，或者打开部分端口也行，关闭命令：\n\n```\n#CentOS 6系统\nservice iptables stop\nchkconfig iptables off\n\n#CentOS 7系统\nsystemctl stop firewalld\nsystemctl disable firewalld\n```\n\n像阿里云等服务器，还需要去安全组那里开放下端口。\n\n## 使用\n\n使用要求：可以使用`SSH`，并且能连接到互联网，`Linux`、`Windows`等系统都行。\n\n以下所使用的的`moerats.com`为上面配置好的客户端域名地址，自行修改成自己的即可。\n\n**1、转发HTTP(S)**\n将本地`3000`端口穿透到公网中，使用命令：\n\n```\n#要转发其它端口的自行替换\nssh -p 3333 -R 80:localhost:3000 moerats.com\n```\n\n第一次如果有提示，选择`yes`即可，之后会为你随机生成一个`moerats.com`的二级域名，然后就可以使用浏览器间接访问本地的`localhost:3000`了。\n\n如果要指定二级域名，可以使用命令：\n\n```\n#这里默认为no1.moerats.com，自行替换即可\nssh -p 3333 -R no1:80:localhost:3000 moerats.com\n```\n\n此时你就可以在外网使用`no1.moerats.com`访问你本地的`localhost:3000`了。\n\n**2、转发TCP**\n将本地`6789`端口穿透到公网的`9876`端口中，使用命令：\n\n```\n#可以自行设置公网端口，这里默认6789，如果你要转发SSH端口，那就改成你的SSH端口\nssh -p 3333 -R 9876:localhost:6789 moerats.com\n```\n\n这里只说了下简单用法，客户端我们还可以设置国家/地区、`IP`白名单等，使用参考→[传送门](https://github.com/antoniomika/sish#whitelisting-ips)。\n\n最后没有泛域名证书的，可以查看该教程自己申请→[传送门](https://www.moerats.com/archives/900/)，或者等博主发码子→[传送门](https://www.moerats.com/archives/996/)。\n\n------\n\n> 版权声明：本文为原创文章，版权归 [Rat's Blog](https://www.moerats.com/) 所有，转载请注明出处！\n>\n> 本文链接：https://www.moerats.com/archives/1002/","slug":"AnOpenSource-LightweightIntranetPenetrationToolSimilarToServo-Ngrok","published":1,"updated":"2021-11-24T11:00:32.102Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwdmsuvj0002oovhadjw5pco","content":"<p><strong>说明：</strong><code>sish</code>是一个<code>SSH</code>服务器，仅用于远程端口转发，可以快速将本地端口暴露在外网，作者声称其为<code>Servo</code>/<code>Ngrok</code>替代方案，仅使用<code>SSH</code>的<code>HTTP(S)</code>、<code>WS(S)</code>、<code>TCP</code>隧道连接到他们的<code>localhost</code>服务器，该工具和<a href=\"https://www.moerats.com/archives/990/\" target=\"_blank\" rel=\"noopener\">Servo</a>差不多一样，不同就是<code>Servo</code>官方提供了免费的<code>SSH</code>客户端，而<code>sish</code>作者提供的客户端貌似因为滥用关闭了，所以就需要我们自己搭建了，这里就水下<code>Docker</code>和手动安装。</p>\n<h2 id=\"Docker安装\"><a href=\"#Docker安装\" class=\"headerlink\" title=\"Docker安装\"></a>Docker安装</h2><p><strong>Github地址：</strong><a href=\"https://github.com/antoniomika/sish\" target=\"_blank\" rel=\"noopener\">https://github.com/antoniomika/sish</a></p>\n<p><strong>1、安装Docker</strong></p>\n<pre><code>#CentOS 6\nrpm -iUvh http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm\nyum update -y\nyum -y install docker-io\nservice docker start\nchkconfig docker on\n\n#CentOS 7、Debian、Ubuntu\ncurl -sSL https://get.docker.com/ | sh\nsystemctl start docker\nsystemctl enable docker</code></pre><p><strong>2、拉取镜像</strong><br>这里由于直接使用<code>ip</code>的话，只能用于转发<code>TCP</code>，<code>HTTP(S)</code>等就需要配置下域名了，所以以下全部默认使用域名。</p>\n<p>先解析一个主/泛域名到服务器<code>ip</code>，比如解析<code>moerats.com</code>、<code>*.moerats.com</code>到服务器<code>ip</code>。</p>\n<p>然后再参考下面的参数详解，再自行修改部分参数后，使用命令：</p>\n<pre><code>#配置http域名\ndocker run -d --name sish \\\n  --restart=always \\\n  -v ~/sish/keys:/keys \\\n  -v ~/sish/pubkeys:/pubkeys \\\n  --net=host antoniomika/sish \\\n  -sish.addr=:3333 \\\n  -sish.http=:80 \\\n  -sish.keysdir=/pubkeys \\\n  -sish.pkloc=/keys/ssh_key \\\n  -sish.forcerandomsubdomain=false \\\n  -sish.domain moerats.com \\\n  -sish.bindrandom=false \\\n  -sish.redirectrootlocation https://www.baidu.com \n\n#配置https域名，这里需要提供泛域名证书\ndocker run -d --name sish \\\n  --restart=always \\\n  -v ~/sish/ssl:/ssl \\\n  -v ~/sish/keys:/keys \\\n  -v ~/sish/pubkeys:/pubkeys \\\n  --net=host antoniomika/sish \\\n  -sish.addr=:3333 \\\n  -sish.https=:443 \\\n  -sish.http=:80 \\\n  -sish.httpsenabled=true \\\n  -sish.httpspems=/ssl \\\n  -sish.keysdir=/pubkeys \\\n  -sish.pkloc=/keys/ssh_key \\\n  -sish.forcerandomsubdomain=false \\\n  -sish.domain moerats.com \\\n  -sish.bindrandom=false \\\n  -sish.redirectrootlocation https://www.baidu.com</code></pre><p>部分参数如下：</p>\n<pre><code>-sish.addr=:3333  #ssh监听地址\n-sish.forcerandomsubdomain=false  #是否强制随机子域，这个建议关掉\n-sish.bindrandom=false  #是否随机绑定端口，这个建议关掉\n-sish.domain moerats.com  #使用的域名\n-sish.redirectrootlocation https://www.baidu.com  #主域名(-sish.domain参数)强制跳转到该地址\n-sish.httpspems=/ssl  #泛域名SSL证书路径，存放路径~/sish/ssl，证书命名格式fullchain.pem和privkey.pem</code></pre><p>其他参数默认即可，也可以自行添加或修改其它参数。</p>\n<p>全部参数如下：</p>\n<pre><code>Usage of sish:\n  -sish.addr string\n        The address to listen for SSH connections (default &quot;localhost:2222&quot;)\n  -sish.auth\n        Whether or not to require auth on the SSH service\n  -sish.bannedcountries string\n        A comma separated list of banned countries\n  -sish.bannedips string\n        A comma separated list of banned ips\n  -sish.bannedsubdomains string\n        A comma separated list of banned subdomains (default &quot;localhost&quot;)\n  -sish.bindrandom\n        Bind ports randomly (OS chooses) (default true)\n  -sish.bindrange string\n        Ports that are allowed to be bound (default &quot;0,1024-65535&quot;)\n  -sish.cleanupunbound\n        Whether or not to cleanup unbound (forwarded) SSH connections (default true)\n  -sish.debug\n        Whether or not to print debug information\n  -sish.domain string\n        The domain for HTTP(S) multiplexing (default &quot;ssi.sh&quot;)\n  -sish.forcerandomsubdomain\n        Whether or not to force a random subdomain (default true)\n  -sish.http string\n        The address to listen for HTTP connections (default &quot;localhost:80&quot;)\n  -sish.httpport int\n        The port for HTTP connections. This is only for output messages (default 80)\n  -sish.https string\n        The address to listen for HTTPS connections (default &quot;localhost:443&quot;)\n  -sish.httpsenabled\n        Whether or not to listen for HTTPS connections\n  -sish.httpspems string\n        The location of pem files for HTTPS (fullchain.pem and privkey.pem) (default &quot;ssl/&quot;)\n  -sish.httpsport int\n        The port for HTTPS connections. This is only for output messages (default 443)\n  -sish.keysdir string\n        Directory for public keys for pubkey auth (default &quot;pubkeys/&quot;)\n  -sish.password string\n        Password to use for password auth (default &quot;S3Cr3tP4$$W0rD&quot;)\n  -sish.pkloc string\n        SSH server private key (default &quot;keys/ssh_key&quot;)\n  -sish.pkpass string\n        Passphrase to use for the server private key (default &quot;S3Cr3tP4$$phrAsE&quot;)\n  -sish.proxyprotoenabled\n        Whether or not to enable the use of the proxy protocol\n  -sish.proxyprotoversion string\n        What version of the proxy protocol to use. Can either be 1, 2, or userdefined. If userdefined, the user needs to add a command to SSH called proxy:version (ie proxy:1) (default &quot;1&quot;)\n  -sish.redirectroot\n        Whether or not to redirect the root domain (default true)\n  -sish.redirectrootlocation string\n        Where to redirect the root domain to (default &quot;https://github.com/antoniomika/sish&quot;)\n  -sish.subdomainlen int\n        The length of the random subdomain to generate (default 3)\n  -sish.usegeodb\n        Whether or not to use the maxmind geodb\n  -sish.verifyorigin\n        Whether or not to verify origin on websocket connection (default true)\n  -sish.verifyssl\n        Whether or not to verify SSL on proxy connection (default true)\n  -sish.whitelistedcountries string\n        A comma separated list of whitelisted countries\n  -sish.whitelistedips string\n        A comma separated list of whitelisted ips</code></pre><p>看不懂的，可以使用下谷歌翻译。</p>\n<p>最后<code>CentOS</code>系统建议关闭防火墙使用，或者打开部分端口也行，关闭命令：</p>\n<pre><code>#CentOS 6系统\nservice iptables stop\nchkconfig iptables off\n\n#CentOS 7系统\nsystemctl stop firewalld\nsystemctl disable firewalld</code></pre><p>像阿里云等服务器，还需要去安全组那里开放下端口。</p>\n<h2 id=\"手动安装\"><a href=\"#手动安装\" class=\"headerlink\" title=\"手动安装\"></a>手动安装</h2><p><code>Docker</code>虽然方便很多，但也有人会喜欢手动安装，这里作者没直接给出二进制文件，所以就需要我们手动来构建二进制文件了。</p>\n<p><strong>1、安装Go</strong><br>这里由于需要新版的<code>Go</code>环境，所以这里就使用<code>Go</code>二进制包安装环境，下载地址→<a href=\"https://golang.org/dl/\" target=\"_blank\" rel=\"noopener\">传送门</a>。</p>\n<p>然后根据自己的服务器架构下载对应的最新安装包，一般可以直接使用命令：</p>\n<pre><code>#32位系统下载\nwget -O go.tar.gz https://dl.google.com/go/go1.13.3.linux-386.tar.gz\n#64位系统下载\nwget -O go.tar.gz https://dl.google.com/go/go1.13.3.linux-amd64.tar.gz\n\n#解压压缩包\ntar -zxvf go.tar.gz -C /usr/local\n#设置环境变量，将以下一起复制进ssh客户端运行\nmkdir $HOME/go\necho &#39;export GOROOT=/usr/local/go\nexport GOPATH=$HOME/go\nexport PATH=$PATH:$GOROOT/bin:$GOPATH/bin&#39; &gt;&gt; /etc/profile\nsource /etc/profile\n#查看go版本，有输出即为安装成功\ngo version</code></pre><p><strong>2、安装sish</strong></p>\n<pre><code>#下载源码到主目录\ngit clone https://github.com/antoniomika/sish\ncd sish\n#编译二进制文件\ngo install</code></pre><p>这里提示<code>-bash: git: command not found</code>的，可以先使用命令：</p>\n<pre><code>#CentOS\nyum -y install git\n\n#Debian、Ubuntu\napt install git -y</code></pre><p><strong>3、运行sish</strong><br>运行参数这里就不贴了，直接参考上面<code>Docker</code>安装最下面的全部参数就行了。</p>\n<p>先解析一个主/泛域名到服务器<code>ip</code>，比如解析<code>moerats.com</code>、<code>*.moerats.com</code>到服务器<code>ip</code>。</p>\n<p>这里就贴个大概需要使用的参数，其它的根据需求自行修改，使用命令：</p>\n<pre><code>#配置http域名\nsish -sish.addr=:3333 -sish.http=:80 -sish.domain moerats.com -sish.forcerandomsubdomain=false -sish.bindrandom=false -sish.redirectrootlocation https://www.moerats.com -sish.keysdir=/sish/pubkeys -sish.pkloc=/sish/keys/ssh_key \n\n#配置https域名\nsish -sish.addr=:3333 -sish.https=:443 -sish.http=:80 -sish.domain moerats.com -sish.forcerandomsubdomain=false -sish.bindrandom=false -sish.httpsenabled=true -sish.redirectrootlocation https://www.moerats.com -sish.keysdir=/sish/pubkeys -sish.pkloc=/sish/keys/ssh_key -sish.httpspems=/sish/ssl</code></pre><p>部分参数详解：</p>\n<pre><code>-sish.addr=:3333  #ssh监听地址，这里为3333\n-sish.forcerandomsubdomain=false  #是否强制随机子域，这个建议关掉\n-sish.bindrandom=false  #是否随机绑定端口，这个建议关掉\n-sish.domain moerats.com  #使用的域名\n-sish.redirectrootlocation https://www.baidu.com  #主域名(-sish.domain参数)强制跳转到该地址\n-sish.httpspems=/sish/ssl  #泛域名SSL证书存放路径，证书命名格式fullchain.pem和privkey.pem\n-sish.keysdir=/sish/pubkeys  #pubkey auth的公共密钥存放文件夹\n-sish.pkloc=/sish/keys/ssh_key  #SSH服务器私钥</code></pre><p>这里<code>/sish/ssl</code>、<code>/sish/pubkeys</code>、<code>/sish/keys</code>目录需要自己提前创建下，使用命令：</p>\n<pre><code>mkdir -p /sish/ssl /sish/pubkeys /sish/keys</code></pre><p><strong>4、开机自启</strong><br>如果你使用手动命令没问题了，先使用<code>Ctrl+C</code>断开命令。</p>\n<p>再新建<code>systemd</code>配置文件，适用<code>CentOS 7</code>、<code>Debian 8+</code>、<code>Ubuntu 16+</code>。</p>\n<pre><code>#修改成你手动运行命令的全部参数\ncommand=&quot;-sish.addr=:3333 -sish.http=:80 -sish.domain moerats.com -sish.forcerandomsubdomain=false -sish.bindrandom=false -sish.redirectrootlocation https://www.moerats.com -sish.keysdir=/sish/pubkeys -sish.pkloc=/sish/keys&quot;\n#将以下代码一起复制到SSH运行\ncat &gt; /etc/systemd/system/sish.service &lt;&lt;EOF\n[Unit]\nDescription=sish\nAfter=network.target\n\n[Service]\nType=simple\nExecStart=$(command -v sish) ${command}\nRestart=on-failure\n\n[Install]\nWantedBy=multi-user.target\nEOF</code></pre><p>启动并设置开机自启：</p>\n<pre><code>systemctl start sish\nsystemctl enable sish</code></pre><p>最后<code>CentOS</code>系统建议关闭防火墙使用，或者打开部分端口也行，关闭命令：</p>\n<pre><code>#CentOS 6系统\nservice iptables stop\nchkconfig iptables off\n\n#CentOS 7系统\nsystemctl stop firewalld\nsystemctl disable firewalld</code></pre><p>像阿里云等服务器，还需要去安全组那里开放下端口。</p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>使用要求：可以使用<code>SSH</code>，并且能连接到互联网，<code>Linux</code>、<code>Windows</code>等系统都行。</p>\n<p>以下所使用的的<code>moerats.com</code>为上面配置好的客户端域名地址，自行修改成自己的即可。</p>\n<p><strong>1、转发HTTP(S)</strong><br>将本地<code>3000</code>端口穿透到公网中，使用命令：</p>\n<pre><code>#要转发其它端口的自行替换\nssh -p 3333 -R 80:localhost:3000 moerats.com</code></pre><p>第一次如果有提示，选择<code>yes</code>即可，之后会为你随机生成一个<code>moerats.com</code>的二级域名，然后就可以使用浏览器间接访问本地的<code>localhost:3000</code>了。</p>\n<p>如果要指定二级域名，可以使用命令：</p>\n<pre><code>#这里默认为no1.moerats.com，自行替换即可\nssh -p 3333 -R no1:80:localhost:3000 moerats.com</code></pre><p>此时你就可以在外网使用<code>no1.moerats.com</code>访问你本地的<code>localhost:3000</code>了。</p>\n<p><strong>2、转发TCP</strong><br>将本地<code>6789</code>端口穿透到公网的<code>9876</code>端口中，使用命令：</p>\n<pre><code>#可以自行设置公网端口，这里默认6789，如果你要转发SSH端口，那就改成你的SSH端口\nssh -p 3333 -R 9876:localhost:6789 moerats.com</code></pre><p>这里只说了下简单用法，客户端我们还可以设置国家/地区、<code>IP</code>白名单等，使用参考→<a href=\"https://github.com/antoniomika/sish#whitelisting-ips\" target=\"_blank\" rel=\"noopener\">传送门</a>。</p>\n<p>最后没有泛域名证书的，可以查看该教程自己申请→<a href=\"https://www.moerats.com/archives/900/\" target=\"_blank\" rel=\"noopener\">传送门</a>，或者等博主发码子→<a href=\"https://www.moerats.com/archives/996/\" target=\"_blank\" rel=\"noopener\">传送门</a>。</p>\n<hr>\n<blockquote>\n<p>版权声明：本文为原创文章，版权归 <a href=\"https://www.moerats.com/\" target=\"_blank\" rel=\"noopener\">Rat’s Blog</a> 所有，转载请注明出处！</p>\n<p>本文链接：<a href=\"https://www.moerats.com/archives/1002/\" target=\"_blank\" rel=\"noopener\">https://www.moerats.com/archives/1002/</a></p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"http://q1.qlogo.cn/g?b=qq&nk=2750360683&s=640","name":"核心","introduction":"来自山东的一位普通高中生,喜欢捣鼓2333，爱好编程（新手）","url":"http://www.emtips.net/","title":"Piu~"},{"avatar":"https://blobscdn.gitbook.com/v0/b/gitbook-28427.appspot.com/o/spaces%2F-Lw6uUvSmToYpKvgzoM5%2Favatar.png?generation=1576386325104024&alt=media","name":"SRO","introduction":"欢迎来到SRO知识库,您在这里可以看到大多数的SRO内部，外部资料","url":"https://sromc.cn/","title":"Piu~"},{"avatar":"http://q1.qlogo.cn/g?b=qq&nk=1692565761&s=640","name":"河南省商务中等职业学校","introduction":"网络搭建竞赛组","url":"https://blinkfox.github.io/","title":"Piu~"}]}},"excerpt":"","more":"<p><strong>说明：</strong><code>sish</code>是一个<code>SSH</code>服务器，仅用于远程端口转发，可以快速将本地端口暴露在外网，作者声称其为<code>Servo</code>/<code>Ngrok</code>替代方案，仅使用<code>SSH</code>的<code>HTTP(S)</code>、<code>WS(S)</code>、<code>TCP</code>隧道连接到他们的<code>localhost</code>服务器，该工具和<a href=\"https://www.moerats.com/archives/990/\" target=\"_blank\" rel=\"noopener\">Servo</a>差不多一样，不同就是<code>Servo</code>官方提供了免费的<code>SSH</code>客户端，而<code>sish</code>作者提供的客户端貌似因为滥用关闭了，所以就需要我们自己搭建了，这里就水下<code>Docker</code>和手动安装。</p>\n<h2 id=\"Docker安装\"><a href=\"#Docker安装\" class=\"headerlink\" title=\"Docker安装\"></a>Docker安装</h2><p><strong>Github地址：</strong><a href=\"https://github.com/antoniomika/sish\" target=\"_blank\" rel=\"noopener\">https://github.com/antoniomika/sish</a></p>\n<p><strong>1、安装Docker</strong></p>\n<pre><code>#CentOS 6\nrpm -iUvh http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm\nyum update -y\nyum -y install docker-io\nservice docker start\nchkconfig docker on\n\n#CentOS 7、Debian、Ubuntu\ncurl -sSL https://get.docker.com/ | sh\nsystemctl start docker\nsystemctl enable docker</code></pre><p><strong>2、拉取镜像</strong><br>这里由于直接使用<code>ip</code>的话，只能用于转发<code>TCP</code>，<code>HTTP(S)</code>等就需要配置下域名了，所以以下全部默认使用域名。</p>\n<p>先解析一个主/泛域名到服务器<code>ip</code>，比如解析<code>moerats.com</code>、<code>*.moerats.com</code>到服务器<code>ip</code>。</p>\n<p>然后再参考下面的参数详解，再自行修改部分参数后，使用命令：</p>\n<pre><code>#配置http域名\ndocker run -d --name sish \\\n  --restart=always \\\n  -v ~/sish/keys:/keys \\\n  -v ~/sish/pubkeys:/pubkeys \\\n  --net=host antoniomika/sish \\\n  -sish.addr=:3333 \\\n  -sish.http=:80 \\\n  -sish.keysdir=/pubkeys \\\n  -sish.pkloc=/keys/ssh_key \\\n  -sish.forcerandomsubdomain=false \\\n  -sish.domain moerats.com \\\n  -sish.bindrandom=false \\\n  -sish.redirectrootlocation https://www.baidu.com \n\n#配置https域名，这里需要提供泛域名证书\ndocker run -d --name sish \\\n  --restart=always \\\n  -v ~/sish/ssl:/ssl \\\n  -v ~/sish/keys:/keys \\\n  -v ~/sish/pubkeys:/pubkeys \\\n  --net=host antoniomika/sish \\\n  -sish.addr=:3333 \\\n  -sish.https=:443 \\\n  -sish.http=:80 \\\n  -sish.httpsenabled=true \\\n  -sish.httpspems=/ssl \\\n  -sish.keysdir=/pubkeys \\\n  -sish.pkloc=/keys/ssh_key \\\n  -sish.forcerandomsubdomain=false \\\n  -sish.domain moerats.com \\\n  -sish.bindrandom=false \\\n  -sish.redirectrootlocation https://www.baidu.com</code></pre><p>部分参数如下：</p>\n<pre><code>-sish.addr=:3333  #ssh监听地址\n-sish.forcerandomsubdomain=false  #是否强制随机子域，这个建议关掉\n-sish.bindrandom=false  #是否随机绑定端口，这个建议关掉\n-sish.domain moerats.com  #使用的域名\n-sish.redirectrootlocation https://www.baidu.com  #主域名(-sish.domain参数)强制跳转到该地址\n-sish.httpspems=/ssl  #泛域名SSL证书路径，存放路径~/sish/ssl，证书命名格式fullchain.pem和privkey.pem</code></pre><p>其他参数默认即可，也可以自行添加或修改其它参数。</p>\n<p>全部参数如下：</p>\n<pre><code>Usage of sish:\n  -sish.addr string\n        The address to listen for SSH connections (default &quot;localhost:2222&quot;)\n  -sish.auth\n        Whether or not to require auth on the SSH service\n  -sish.bannedcountries string\n        A comma separated list of banned countries\n  -sish.bannedips string\n        A comma separated list of banned ips\n  -sish.bannedsubdomains string\n        A comma separated list of banned subdomains (default &quot;localhost&quot;)\n  -sish.bindrandom\n        Bind ports randomly (OS chooses) (default true)\n  -sish.bindrange string\n        Ports that are allowed to be bound (default &quot;0,1024-65535&quot;)\n  -sish.cleanupunbound\n        Whether or not to cleanup unbound (forwarded) SSH connections (default true)\n  -sish.debug\n        Whether or not to print debug information\n  -sish.domain string\n        The domain for HTTP(S) multiplexing (default &quot;ssi.sh&quot;)\n  -sish.forcerandomsubdomain\n        Whether or not to force a random subdomain (default true)\n  -sish.http string\n        The address to listen for HTTP connections (default &quot;localhost:80&quot;)\n  -sish.httpport int\n        The port for HTTP connections. This is only for output messages (default 80)\n  -sish.https string\n        The address to listen for HTTPS connections (default &quot;localhost:443&quot;)\n  -sish.httpsenabled\n        Whether or not to listen for HTTPS connections\n  -sish.httpspems string\n        The location of pem files for HTTPS (fullchain.pem and privkey.pem) (default &quot;ssl/&quot;)\n  -sish.httpsport int\n        The port for HTTPS connections. This is only for output messages (default 443)\n  -sish.keysdir string\n        Directory for public keys for pubkey auth (default &quot;pubkeys/&quot;)\n  -sish.password string\n        Password to use for password auth (default &quot;S3Cr3tP4$$W0rD&quot;)\n  -sish.pkloc string\n        SSH server private key (default &quot;keys/ssh_key&quot;)\n  -sish.pkpass string\n        Passphrase to use for the server private key (default &quot;S3Cr3tP4$$phrAsE&quot;)\n  -sish.proxyprotoenabled\n        Whether or not to enable the use of the proxy protocol\n  -sish.proxyprotoversion string\n        What version of the proxy protocol to use. Can either be 1, 2, or userdefined. If userdefined, the user needs to add a command to SSH called proxy:version (ie proxy:1) (default &quot;1&quot;)\n  -sish.redirectroot\n        Whether or not to redirect the root domain (default true)\n  -sish.redirectrootlocation string\n        Where to redirect the root domain to (default &quot;https://github.com/antoniomika/sish&quot;)\n  -sish.subdomainlen int\n        The length of the random subdomain to generate (default 3)\n  -sish.usegeodb\n        Whether or not to use the maxmind geodb\n  -sish.verifyorigin\n        Whether or not to verify origin on websocket connection (default true)\n  -sish.verifyssl\n        Whether or not to verify SSL on proxy connection (default true)\n  -sish.whitelistedcountries string\n        A comma separated list of whitelisted countries\n  -sish.whitelistedips string\n        A comma separated list of whitelisted ips</code></pre><p>看不懂的，可以使用下谷歌翻译。</p>\n<p>最后<code>CentOS</code>系统建议关闭防火墙使用，或者打开部分端口也行，关闭命令：</p>\n<pre><code>#CentOS 6系统\nservice iptables stop\nchkconfig iptables off\n\n#CentOS 7系统\nsystemctl stop firewalld\nsystemctl disable firewalld</code></pre><p>像阿里云等服务器，还需要去安全组那里开放下端口。</p>\n<h2 id=\"手动安装\"><a href=\"#手动安装\" class=\"headerlink\" title=\"手动安装\"></a>手动安装</h2><p><code>Docker</code>虽然方便很多，但也有人会喜欢手动安装，这里作者没直接给出二进制文件，所以就需要我们手动来构建二进制文件了。</p>\n<p><strong>1、安装Go</strong><br>这里由于需要新版的<code>Go</code>环境，所以这里就使用<code>Go</code>二进制包安装环境，下载地址→<a href=\"https://golang.org/dl/\" target=\"_blank\" rel=\"noopener\">传送门</a>。</p>\n<p>然后根据自己的服务器架构下载对应的最新安装包，一般可以直接使用命令：</p>\n<pre><code>#32位系统下载\nwget -O go.tar.gz https://dl.google.com/go/go1.13.3.linux-386.tar.gz\n#64位系统下载\nwget -O go.tar.gz https://dl.google.com/go/go1.13.3.linux-amd64.tar.gz\n\n#解压压缩包\ntar -zxvf go.tar.gz -C /usr/local\n#设置环境变量，将以下一起复制进ssh客户端运行\nmkdir $HOME/go\necho &#39;export GOROOT=/usr/local/go\nexport GOPATH=$HOME/go\nexport PATH=$PATH:$GOROOT/bin:$GOPATH/bin&#39; &gt;&gt; /etc/profile\nsource /etc/profile\n#查看go版本，有输出即为安装成功\ngo version</code></pre><p><strong>2、安装sish</strong></p>\n<pre><code>#下载源码到主目录\ngit clone https://github.com/antoniomika/sish\ncd sish\n#编译二进制文件\ngo install</code></pre><p>这里提示<code>-bash: git: command not found</code>的，可以先使用命令：</p>\n<pre><code>#CentOS\nyum -y install git\n\n#Debian、Ubuntu\napt install git -y</code></pre><p><strong>3、运行sish</strong><br>运行参数这里就不贴了，直接参考上面<code>Docker</code>安装最下面的全部参数就行了。</p>\n<p>先解析一个主/泛域名到服务器<code>ip</code>，比如解析<code>moerats.com</code>、<code>*.moerats.com</code>到服务器<code>ip</code>。</p>\n<p>这里就贴个大概需要使用的参数，其它的根据需求自行修改，使用命令：</p>\n<pre><code>#配置http域名\nsish -sish.addr=:3333 -sish.http=:80 -sish.domain moerats.com -sish.forcerandomsubdomain=false -sish.bindrandom=false -sish.redirectrootlocation https://www.moerats.com -sish.keysdir=/sish/pubkeys -sish.pkloc=/sish/keys/ssh_key \n\n#配置https域名\nsish -sish.addr=:3333 -sish.https=:443 -sish.http=:80 -sish.domain moerats.com -sish.forcerandomsubdomain=false -sish.bindrandom=false -sish.httpsenabled=true -sish.redirectrootlocation https://www.moerats.com -sish.keysdir=/sish/pubkeys -sish.pkloc=/sish/keys/ssh_key -sish.httpspems=/sish/ssl</code></pre><p>部分参数详解：</p>\n<pre><code>-sish.addr=:3333  #ssh监听地址，这里为3333\n-sish.forcerandomsubdomain=false  #是否强制随机子域，这个建议关掉\n-sish.bindrandom=false  #是否随机绑定端口，这个建议关掉\n-sish.domain moerats.com  #使用的域名\n-sish.redirectrootlocation https://www.baidu.com  #主域名(-sish.domain参数)强制跳转到该地址\n-sish.httpspems=/sish/ssl  #泛域名SSL证书存放路径，证书命名格式fullchain.pem和privkey.pem\n-sish.keysdir=/sish/pubkeys  #pubkey auth的公共密钥存放文件夹\n-sish.pkloc=/sish/keys/ssh_key  #SSH服务器私钥</code></pre><p>这里<code>/sish/ssl</code>、<code>/sish/pubkeys</code>、<code>/sish/keys</code>目录需要自己提前创建下，使用命令：</p>\n<pre><code>mkdir -p /sish/ssl /sish/pubkeys /sish/keys</code></pre><p><strong>4、开机自启</strong><br>如果你使用手动命令没问题了，先使用<code>Ctrl+C</code>断开命令。</p>\n<p>再新建<code>systemd</code>配置文件，适用<code>CentOS 7</code>、<code>Debian 8+</code>、<code>Ubuntu 16+</code>。</p>\n<pre><code>#修改成你手动运行命令的全部参数\ncommand=&quot;-sish.addr=:3333 -sish.http=:80 -sish.domain moerats.com -sish.forcerandomsubdomain=false -sish.bindrandom=false -sish.redirectrootlocation https://www.moerats.com -sish.keysdir=/sish/pubkeys -sish.pkloc=/sish/keys&quot;\n#将以下代码一起复制到SSH运行\ncat &gt; /etc/systemd/system/sish.service &lt;&lt;EOF\n[Unit]\nDescription=sish\nAfter=network.target\n\n[Service]\nType=simple\nExecStart=$(command -v sish) ${command}\nRestart=on-failure\n\n[Install]\nWantedBy=multi-user.target\nEOF</code></pre><p>启动并设置开机自启：</p>\n<pre><code>systemctl start sish\nsystemctl enable sish</code></pre><p>最后<code>CentOS</code>系统建议关闭防火墙使用，或者打开部分端口也行，关闭命令：</p>\n<pre><code>#CentOS 6系统\nservice iptables stop\nchkconfig iptables off\n\n#CentOS 7系统\nsystemctl stop firewalld\nsystemctl disable firewalld</code></pre><p>像阿里云等服务器，还需要去安全组那里开放下端口。</p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>使用要求：可以使用<code>SSH</code>，并且能连接到互联网，<code>Linux</code>、<code>Windows</code>等系统都行。</p>\n<p>以下所使用的的<code>moerats.com</code>为上面配置好的客户端域名地址，自行修改成自己的即可。</p>\n<p><strong>1、转发HTTP(S)</strong><br>将本地<code>3000</code>端口穿透到公网中，使用命令：</p>\n<pre><code>#要转发其它端口的自行替换\nssh -p 3333 -R 80:localhost:3000 moerats.com</code></pre><p>第一次如果有提示，选择<code>yes</code>即可，之后会为你随机生成一个<code>moerats.com</code>的二级域名，然后就可以使用浏览器间接访问本地的<code>localhost:3000</code>了。</p>\n<p>如果要指定二级域名，可以使用命令：</p>\n<pre><code>#这里默认为no1.moerats.com，自行替换即可\nssh -p 3333 -R no1:80:localhost:3000 moerats.com</code></pre><p>此时你就可以在外网使用<code>no1.moerats.com</code>访问你本地的<code>localhost:3000</code>了。</p>\n<p><strong>2、转发TCP</strong><br>将本地<code>6789</code>端口穿透到公网的<code>9876</code>端口中，使用命令：</p>\n<pre><code>#可以自行设置公网端口，这里默认6789，如果你要转发SSH端口，那就改成你的SSH端口\nssh -p 3333 -R 9876:localhost:6789 moerats.com</code></pre><p>这里只说了下简单用法，客户端我们还可以设置国家/地区、<code>IP</code>白名单等，使用参考→<a href=\"https://github.com/antoniomika/sish#whitelisting-ips\" target=\"_blank\" rel=\"noopener\">传送门</a>。</p>\n<p>最后没有泛域名证书的，可以查看该教程自己申请→<a href=\"https://www.moerats.com/archives/900/\" target=\"_blank\" rel=\"noopener\">传送门</a>，或者等博主发码子→<a href=\"https://www.moerats.com/archives/996/\" target=\"_blank\" rel=\"noopener\">传送门</a>。</p>\n<hr>\n<blockquote>\n<p>版权声明：本文为原创文章，版权归 <a href=\"https://www.moerats.com/\" target=\"_blank\" rel=\"noopener\">Rat’s Blog</a> 所有，转载请注明出处！</p>\n<p>本文链接：<a href=\"https://www.moerats.com/archives/1002/\" target=\"_blank\" rel=\"noopener\">https://www.moerats.com/archives/1002/</a></p>\n</blockquote>\n"},{"title":"hexo引用本地图片无法显示","typora-copy-images-to":"hexo引用本地图片无法显示","date":"2020-02-14T19:39:30.000Z","typora-root-url":"HexoReferencesToLocalImagesCannotBeDisplayed","_content":"\n最近重新开始用起hexo，但是发现在文章中引用本地图片时总是显示不出来。\n\n\n\n花费了许久时间才解决这个问题。\n\n因此将一些解决经验整理出来，希望能帮助到大家。\n\n# 一、插件安装与配置\n\n## 首先我们需要安装一个图片路径转换的插件，这个插件名字是hexo-asset-image\n\n```\nnpm install https://github.com/CodeFalling/hexo-asset-image --save\n```\n\n\n但是这个插件的内容需要修改【不然可能会出Bug】\n\n## 打开/node_modules/hexo-asset-image/index.js，将内容更换为下面的代码\n\n```\n'use strict';\nvar cheerio = require('cheerio');\n\n// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string\nfunction getPosition(str, m, i) {\nreturn str.split(m, i).join(m).length;\n}\n\nvar version = String(hexo.version).split('.');\nhexo.extend.filter.register('after_post_render', function(data){\nvar config = hexo.config;\nif(config.post_asset_folder){\n    var link = data.permalink;\nif(version.length > 0 && Number(version[0]) == 3)\n    var beginPos = getPosition(link, '/', 1) + 1;\nelse\n    var beginPos = getPosition(link, '/', 3) + 1;\n// In hexo 3.1.1, the permalink of \"about\" page is like \".../about/index.html\".\nvar endPos = link.lastIndexOf('/') + 1;\nlink = link.substring(beginPos, endPos);\n\nvar toprocess = ['excerpt', 'more', 'content'];\nfor(var i = 0; i < toprocess.length; i++){\n    var key = toprocess[i];\n\n    var $ = cheerio.load(data[key], {\n    ignoreWhitespace: false,\n    xmlMode: false,\n    lowerCaseTags: false,\n    decodeEntities: false\n    });\n\n    $('img').each(function(){\n    if ($(this).attr('src')){\n        // For windows style path, we replace '\\' to '/'.\n        var src = $(this).attr('src').replace('\\\\', '/');\n        if(!/http[s]*.*|\\/\\/.*/.test(src) &&\n            !/^\\s*\\//.test(src)) {\n            // For \"about\" page, the first part of \"src\" can't be removed.\n            // In addition, to support multi-level local directory.\n            var linkArray = link.split('/').filter(function(elem){\n            return elem != '';\n            });\n            var srcArray = src.split('/').filter(function(elem){\n            return elem != '' && elem != '.';\n            });\n            if(srcArray.length > 1)\n            srcArray.shift();\n            src = srcArray.join('/');\n            $(this).attr('src', config.root + link + src);\n            console.info&&console.info(\"update link as:-->\"+config.root + link + src);\n        }\n    }else{\n        console.info&&console.info(\"no src attr, skipped...\");\n        console.info&&console.info($(this));\n    }\n    });\n    data[key] = $.html();\n}\n}\n});\n```\n\n# 二、问题推测\n\n## （一）本地图片没有有效上传至github仓库中，导致引用无效\n\n解决方案：安装插件（回看前文）\n\n## （二）本地图片没有存放在同名文件夹中\n\n解决方案：将需要引用的本地图片存放在与文章名相同的文件夹中\n\n## （三）图片路径出错\n\n这也是我出现的问题。\n\n打开F12，发现下图问题。\n\n![](20181115112933605.png)\n\n因为我在github中关于Hexo的仓库名为850552586.github.io，并不是Ericam.com，所以导致了访问无效。\n\n【这个问题可能是因为我更换电脑后重新配置Hexo忽略的地方】\n\n解决方案：打开_config.yml修改下述内容\n\n![](20181115112941162.png)\n\n## （四）相对路径引用的标签插件\n\n通过常规的 markdown 语法和相对路径来引用图片和其它资源可能会导致它们在存档页或者主页上显示不正确。在Hexo 2时代，社区创建了很多插件来解决这个问题。但是，随着Hexo 3 的发布，许多新的标签插件被加入到了核心代码中。这使得你可以更简单地在文章中引用你的资源。\n\n也就是说在存档页和主页不能使用和文章内容中的常规语法来引用图片。\n\n比如说：当你打开文章资源文件夹功能后，你把一个 example.jpg 图片放在了你的资源文件夹中，如果通过使用相对路径的常规 markdown 语法 ![](/example.jpg) ，它将 不会 出现在首页上。（但是它会在文章中按你期待的方式工作）\n\n正确的引用图片方式是使用下列的标签插件而不是 markdown ：\n\n```\n{% asset_img example.jpg This is an example image %}\n```\n\n浏览地址：Ericam个人博客\n配置教程：安装配置Gridea\n\n原创不易，请勿转载。如有问题，可以评论区留言。点赞！\n\n###### ————————————————\n\n版权声明：本文为CSDN博主「Ericam_」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。\n原文链接：https://blog.csdn.net/xjm850552586/article/details/84101345","source":"_posts/HexoReferencesToLocalImagesCannotBeDisplayed.md","raw":"---\ntitle: hexo引用本地图片无法显示\ntypora-copy-images-to: hexo引用本地图片无法显示\ndate: 2020-02-15 03:39:30\ncategories:\n- Bugs\ntags:\n- Hexo\n- 转载\ntypora-root-url: HexoReferencesToLocalImagesCannotBeDisplayed\n---\n\n最近重新开始用起hexo，但是发现在文章中引用本地图片时总是显示不出来。\n\n\n\n花费了许久时间才解决这个问题。\n\n因此将一些解决经验整理出来，希望能帮助到大家。\n\n# 一、插件安装与配置\n\n## 首先我们需要安装一个图片路径转换的插件，这个插件名字是hexo-asset-image\n\n```\nnpm install https://github.com/CodeFalling/hexo-asset-image --save\n```\n\n\n但是这个插件的内容需要修改【不然可能会出Bug】\n\n## 打开/node_modules/hexo-asset-image/index.js，将内容更换为下面的代码\n\n```\n'use strict';\nvar cheerio = require('cheerio');\n\n// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string\nfunction getPosition(str, m, i) {\nreturn str.split(m, i).join(m).length;\n}\n\nvar version = String(hexo.version).split('.');\nhexo.extend.filter.register('after_post_render', function(data){\nvar config = hexo.config;\nif(config.post_asset_folder){\n    var link = data.permalink;\nif(version.length > 0 && Number(version[0]) == 3)\n    var beginPos = getPosition(link, '/', 1) + 1;\nelse\n    var beginPos = getPosition(link, '/', 3) + 1;\n// In hexo 3.1.1, the permalink of \"about\" page is like \".../about/index.html\".\nvar endPos = link.lastIndexOf('/') + 1;\nlink = link.substring(beginPos, endPos);\n\nvar toprocess = ['excerpt', 'more', 'content'];\nfor(var i = 0; i < toprocess.length; i++){\n    var key = toprocess[i];\n\n    var $ = cheerio.load(data[key], {\n    ignoreWhitespace: false,\n    xmlMode: false,\n    lowerCaseTags: false,\n    decodeEntities: false\n    });\n\n    $('img').each(function(){\n    if ($(this).attr('src')){\n        // For windows style path, we replace '\\' to '/'.\n        var src = $(this).attr('src').replace('\\\\', '/');\n        if(!/http[s]*.*|\\/\\/.*/.test(src) &&\n            !/^\\s*\\//.test(src)) {\n            // For \"about\" page, the first part of \"src\" can't be removed.\n            // In addition, to support multi-level local directory.\n            var linkArray = link.split('/').filter(function(elem){\n            return elem != '';\n            });\n            var srcArray = src.split('/').filter(function(elem){\n            return elem != '' && elem != '.';\n            });\n            if(srcArray.length > 1)\n            srcArray.shift();\n            src = srcArray.join('/');\n            $(this).attr('src', config.root + link + src);\n            console.info&&console.info(\"update link as:-->\"+config.root + link + src);\n        }\n    }else{\n        console.info&&console.info(\"no src attr, skipped...\");\n        console.info&&console.info($(this));\n    }\n    });\n    data[key] = $.html();\n}\n}\n});\n```\n\n# 二、问题推测\n\n## （一）本地图片没有有效上传至github仓库中，导致引用无效\n\n解决方案：安装插件（回看前文）\n\n## （二）本地图片没有存放在同名文件夹中\n\n解决方案：将需要引用的本地图片存放在与文章名相同的文件夹中\n\n## （三）图片路径出错\n\n这也是我出现的问题。\n\n打开F12，发现下图问题。\n\n![](20181115112933605.png)\n\n因为我在github中关于Hexo的仓库名为850552586.github.io，并不是Ericam.com，所以导致了访问无效。\n\n【这个问题可能是因为我更换电脑后重新配置Hexo忽略的地方】\n\n解决方案：打开_config.yml修改下述内容\n\n![](20181115112941162.png)\n\n## （四）相对路径引用的标签插件\n\n通过常规的 markdown 语法和相对路径来引用图片和其它资源可能会导致它们在存档页或者主页上显示不正确。在Hexo 2时代，社区创建了很多插件来解决这个问题。但是，随着Hexo 3 的发布，许多新的标签插件被加入到了核心代码中。这使得你可以更简单地在文章中引用你的资源。\n\n也就是说在存档页和主页不能使用和文章内容中的常规语法来引用图片。\n\n比如说：当你打开文章资源文件夹功能后，你把一个 example.jpg 图片放在了你的资源文件夹中，如果通过使用相对路径的常规 markdown 语法 ![](/example.jpg) ，它将 不会 出现在首页上。（但是它会在文章中按你期待的方式工作）\n\n正确的引用图片方式是使用下列的标签插件而不是 markdown ：\n\n```\n{% asset_img example.jpg This is an example image %}\n```\n\n浏览地址：Ericam个人博客\n配置教程：安装配置Gridea\n\n原创不易，请勿转载。如有问题，可以评论区留言。点赞！\n\n###### ————————————————\n\n版权声明：本文为CSDN博主「Ericam_」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。\n原文链接：https://blog.csdn.net/xjm850552586/article/details/84101345","slug":"HexoReferencesToLocalImagesCannotBeDisplayed","published":1,"updated":"2021-11-24T11:00:32.102Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwdmsuvn0006oovh0wo16ts1","content":"<p>最近重新开始用起hexo，但是发现在文章中引用本地图片时总是显示不出来。</p>\n<p>花费了许久时间才解决这个问题。</p>\n<p>因此将一些解决经验整理出来，希望能帮助到大家。</p>\n<h1 id=\"一、插件安装与配置\"><a href=\"#一、插件安装与配置\" class=\"headerlink\" title=\"一、插件安装与配置\"></a>一、插件安装与配置</h1><h2 id=\"首先我们需要安装一个图片路径转换的插件，这个插件名字是hexo-asset-image\"><a href=\"#首先我们需要安装一个图片路径转换的插件，这个插件名字是hexo-asset-image\" class=\"headerlink\" title=\"首先我们需要安装一个图片路径转换的插件，这个插件名字是hexo-asset-image\"></a>首先我们需要安装一个图片路径转换的插件，这个插件名字是hexo-asset-image</h2><pre><code>npm install https://github.com/CodeFalling/hexo-asset-image --save</code></pre><p>但是这个插件的内容需要修改【不然可能会出Bug】</p>\n<h2 id=\"打开-node-modules-hexo-asset-image-index-js，将内容更换为下面的代码\"><a href=\"#打开-node-modules-hexo-asset-image-index-js，将内容更换为下面的代码\" class=\"headerlink\" title=\"打开/node_modules/hexo-asset-image/index.js，将内容更换为下面的代码\"></a>打开/node_modules/hexo-asset-image/index.js，将内容更换为下面的代码</h2><pre><code>&#39;use strict&#39;;\nvar cheerio = require(&#39;cheerio&#39;);\n\n// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string\nfunction getPosition(str, m, i) {\nreturn str.split(m, i).join(m).length;\n}\n\nvar version = String(hexo.version).split(&#39;.&#39;);\nhexo.extend.filter.register(&#39;after_post_render&#39;, function(data){\nvar config = hexo.config;\nif(config.post_asset_folder){\n    var link = data.permalink;\nif(version.length &gt; 0 &amp;&amp; Number(version[0]) == 3)\n    var beginPos = getPosition(link, &#39;/&#39;, 1) + 1;\nelse\n    var beginPos = getPosition(link, &#39;/&#39;, 3) + 1;\n// In hexo 3.1.1, the permalink of &quot;about&quot; page is like &quot;.../about/index.html&quot;.\nvar endPos = link.lastIndexOf(&#39;/&#39;) + 1;\nlink = link.substring(beginPos, endPos);\n\nvar toprocess = [&#39;excerpt&#39;, &#39;more&#39;, &#39;content&#39;];\nfor(var i = 0; i &lt; toprocess.length; i++){\n    var key = toprocess[i];\n\n    var $ = cheerio.load(data[key], {\n    ignoreWhitespace: false,\n    xmlMode: false,\n    lowerCaseTags: false,\n    decodeEntities: false\n    });\n\n    $(&#39;img&#39;).each(function(){\n    if ($(this).attr(&#39;src&#39;)){\n        // For windows style path, we replace &#39;\\&#39; to &#39;/&#39;.\n        var src = $(this).attr(&#39;src&#39;).replace(&#39;\\\\&#39;, &#39;/&#39;);\n        if(!/http[s]*.*|\\/\\/.*/.test(src) &amp;&amp;\n            !/^\\s*\\//.test(src)) {\n            // For &quot;about&quot; page, the first part of &quot;src&quot; can&#39;t be removed.\n            // In addition, to support multi-level local directory.\n            var linkArray = link.split(&#39;/&#39;).filter(function(elem){\n            return elem != &#39;&#39;;\n            });\n            var srcArray = src.split(&#39;/&#39;).filter(function(elem){\n            return elem != &#39;&#39; &amp;&amp; elem != &#39;.&#39;;\n            });\n            if(srcArray.length &gt; 1)\n            srcArray.shift();\n            src = srcArray.join(&#39;/&#39;);\n            $(this).attr(&#39;src&#39;, config.root + link + src);\n            console.info&amp;&amp;console.info(&quot;update link as:--&gt;&quot;+config.root + link + src);\n        }\n    }else{\n        console.info&amp;&amp;console.info(&quot;no src attr, skipped...&quot;);\n        console.info&amp;&amp;console.info($(this));\n    }\n    });\n    data[key] = $.html();\n}\n}\n});</code></pre><h1 id=\"二、问题推测\"><a href=\"#二、问题推测\" class=\"headerlink\" title=\"二、问题推测\"></a>二、问题推测</h1><h2 id=\"（一）本地图片没有有效上传至github仓库中，导致引用无效\"><a href=\"#（一）本地图片没有有效上传至github仓库中，导致引用无效\" class=\"headerlink\" title=\"（一）本地图片没有有效上传至github仓库中，导致引用无效\"></a>（一）本地图片没有有效上传至github仓库中，导致引用无效</h2><p>解决方案：安装插件（回看前文）</p>\n<h2 id=\"（二）本地图片没有存放在同名文件夹中\"><a href=\"#（二）本地图片没有存放在同名文件夹中\" class=\"headerlink\" title=\"（二）本地图片没有存放在同名文件夹中\"></a>（二）本地图片没有存放在同名文件夹中</h2><p>解决方案：将需要引用的本地图片存放在与文章名相同的文件夹中</p>\n<h2 id=\"（三）图片路径出错\"><a href=\"#（三）图片路径出错\" class=\"headerlink\" title=\"（三）图片路径出错\"></a>（三）图片路径出错</h2><p>这也是我出现的问题。</p>\n<p>打开F12，发现下图问题。</p>\n<p><img src=\"/2020/02/15/HexoReferencesToLocalImagesCannotBeDisplayed/20181115112933605.png\" alt></p>\n<p>因为我在github中关于Hexo的仓库名为850552586.github.io，并不是Ericam.com，所以导致了访问无效。</p>\n<p>【这个问题可能是因为我更换电脑后重新配置Hexo忽略的地方】</p>\n<p>解决方案：打开_config.yml修改下述内容</p>\n<p><img src=\"/2020/02/15/HexoReferencesToLocalImagesCannotBeDisplayed/20181115112941162.png\" alt></p>\n<h2 id=\"（四）相对路径引用的标签插件\"><a href=\"#（四）相对路径引用的标签插件\" class=\"headerlink\" title=\"（四）相对路径引用的标签插件\"></a>（四）相对路径引用的标签插件</h2><p>通过常规的 markdown 语法和相对路径来引用图片和其它资源可能会导致它们在存档页或者主页上显示不正确。在Hexo 2时代，社区创建了很多插件来解决这个问题。但是，随着Hexo 3 的发布，许多新的标签插件被加入到了核心代码中。这使得你可以更简单地在文章中引用你的资源。</p>\n<p>也就是说在存档页和主页不能使用和文章内容中的常规语法来引用图片。</p>\n<p>比如说：当你打开文章资源文件夹功能后，你把一个 example.jpg 图片放在了你的资源文件夹中，如果通过使用相对路径的常规 markdown 语法 <img src=\"/2020/02/15/HexoReferencesToLocalImagesCannotBeDisplayed/example.jpg\" alt> ，它将 不会 出现在首页上。（但是它会在文章中按你期待的方式工作）</p>\n<p>正确的引用图片方式是使用下列的标签插件而不是 markdown ：</p>\n<pre><code>{% asset_img example.jpg This is an example image %}</code></pre><p>浏览地址：Ericam个人博客<br>配置教程：安装配置Gridea</p>\n<p>原创不易，请勿转载。如有问题，可以评论区留言。点赞！</p>\n<h6 id=\"————————————————\"><a href=\"#————————————————\" class=\"headerlink\" title=\"————————————————\"></a>————————————————</h6><p>版权声明：本文为CSDN博主「Ericam_」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href=\"https://blog.csdn.net/xjm850552586/article/details/84101345\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/xjm850552586/article/details/84101345</a></p>\n","site":{"data":{"friends":[{"avatar":"http://q1.qlogo.cn/g?b=qq&nk=2750360683&s=640","name":"核心","introduction":"来自山东的一位普通高中生,喜欢捣鼓2333，爱好编程（新手）","url":"http://www.emtips.net/","title":"Piu~"},{"avatar":"https://blobscdn.gitbook.com/v0/b/gitbook-28427.appspot.com/o/spaces%2F-Lw6uUvSmToYpKvgzoM5%2Favatar.png?generation=1576386325104024&alt=media","name":"SRO","introduction":"欢迎来到SRO知识库,您在这里可以看到大多数的SRO内部，外部资料","url":"https://sromc.cn/","title":"Piu~"},{"avatar":"http://q1.qlogo.cn/g?b=qq&nk=1692565761&s=640","name":"河南省商务中等职业学校","introduction":"网络搭建竞赛组","url":"https://blinkfox.github.io/","title":"Piu~"}]}},"excerpt":"","more":"<p>最近重新开始用起hexo，但是发现在文章中引用本地图片时总是显示不出来。</p>\n<p>花费了许久时间才解决这个问题。</p>\n<p>因此将一些解决经验整理出来，希望能帮助到大家。</p>\n<h1 id=\"一、插件安装与配置\"><a href=\"#一、插件安装与配置\" class=\"headerlink\" title=\"一、插件安装与配置\"></a>一、插件安装与配置</h1><h2 id=\"首先我们需要安装一个图片路径转换的插件，这个插件名字是hexo-asset-image\"><a href=\"#首先我们需要安装一个图片路径转换的插件，这个插件名字是hexo-asset-image\" class=\"headerlink\" title=\"首先我们需要安装一个图片路径转换的插件，这个插件名字是hexo-asset-image\"></a>首先我们需要安装一个图片路径转换的插件，这个插件名字是hexo-asset-image</h2><pre><code>npm install https://github.com/CodeFalling/hexo-asset-image --save</code></pre><p>但是这个插件的内容需要修改【不然可能会出Bug】</p>\n<h2 id=\"打开-node-modules-hexo-asset-image-index-js，将内容更换为下面的代码\"><a href=\"#打开-node-modules-hexo-asset-image-index-js，将内容更换为下面的代码\" class=\"headerlink\" title=\"打开/node_modules/hexo-asset-image/index.js，将内容更换为下面的代码\"></a>打开/node_modules/hexo-asset-image/index.js，将内容更换为下面的代码</h2><pre><code>&#39;use strict&#39;;\nvar cheerio = require(&#39;cheerio&#39;);\n\n// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string\nfunction getPosition(str, m, i) {\nreturn str.split(m, i).join(m).length;\n}\n\nvar version = String(hexo.version).split(&#39;.&#39;);\nhexo.extend.filter.register(&#39;after_post_render&#39;, function(data){\nvar config = hexo.config;\nif(config.post_asset_folder){\n    var link = data.permalink;\nif(version.length &gt; 0 &amp;&amp; Number(version[0]) == 3)\n    var beginPos = getPosition(link, &#39;/&#39;, 1) + 1;\nelse\n    var beginPos = getPosition(link, &#39;/&#39;, 3) + 1;\n// In hexo 3.1.1, the permalink of &quot;about&quot; page is like &quot;.../about/index.html&quot;.\nvar endPos = link.lastIndexOf(&#39;/&#39;) + 1;\nlink = link.substring(beginPos, endPos);\n\nvar toprocess = [&#39;excerpt&#39;, &#39;more&#39;, &#39;content&#39;];\nfor(var i = 0; i &lt; toprocess.length; i++){\n    var key = toprocess[i];\n\n    var $ = cheerio.load(data[key], {\n    ignoreWhitespace: false,\n    xmlMode: false,\n    lowerCaseTags: false,\n    decodeEntities: false\n    });\n\n    $(&#39;img&#39;).each(function(){\n    if ($(this).attr(&#39;src&#39;)){\n        // For windows style path, we replace &#39;\\&#39; to &#39;/&#39;.\n        var src = $(this).attr(&#39;src&#39;).replace(&#39;\\\\&#39;, &#39;/&#39;);\n        if(!/http[s]*.*|\\/\\/.*/.test(src) &amp;&amp;\n            !/^\\s*\\//.test(src)) {\n            // For &quot;about&quot; page, the first part of &quot;src&quot; can&#39;t be removed.\n            // In addition, to support multi-level local directory.\n            var linkArray = link.split(&#39;/&#39;).filter(function(elem){\n            return elem != &#39;&#39;;\n            });\n            var srcArray = src.split(&#39;/&#39;).filter(function(elem){\n            return elem != &#39;&#39; &amp;&amp; elem != &#39;.&#39;;\n            });\n            if(srcArray.length &gt; 1)\n            srcArray.shift();\n            src = srcArray.join(&#39;/&#39;);\n            $(this).attr(&#39;src&#39;, config.root + link + src);\n            console.info&amp;&amp;console.info(&quot;update link as:--&gt;&quot;+config.root + link + src);\n        }\n    }else{\n        console.info&amp;&amp;console.info(&quot;no src attr, skipped...&quot;);\n        console.info&amp;&amp;console.info($(this));\n    }\n    });\n    data[key] = $.html();\n}\n}\n});</code></pre><h1 id=\"二、问题推测\"><a href=\"#二、问题推测\" class=\"headerlink\" title=\"二、问题推测\"></a>二、问题推测</h1><h2 id=\"（一）本地图片没有有效上传至github仓库中，导致引用无效\"><a href=\"#（一）本地图片没有有效上传至github仓库中，导致引用无效\" class=\"headerlink\" title=\"（一）本地图片没有有效上传至github仓库中，导致引用无效\"></a>（一）本地图片没有有效上传至github仓库中，导致引用无效</h2><p>解决方案：安装插件（回看前文）</p>\n<h2 id=\"（二）本地图片没有存放在同名文件夹中\"><a href=\"#（二）本地图片没有存放在同名文件夹中\" class=\"headerlink\" title=\"（二）本地图片没有存放在同名文件夹中\"></a>（二）本地图片没有存放在同名文件夹中</h2><p>解决方案：将需要引用的本地图片存放在与文章名相同的文件夹中</p>\n<h2 id=\"（三）图片路径出错\"><a href=\"#（三）图片路径出错\" class=\"headerlink\" title=\"（三）图片路径出错\"></a>（三）图片路径出错</h2><p>这也是我出现的问题。</p>\n<p>打开F12，发现下图问题。</p>\n<p><img src=\"/2020/02/15/HexoReferencesToLocalImagesCannotBeDisplayed/20181115112933605.png\" alt></p>\n<p>因为我在github中关于Hexo的仓库名为850552586.github.io，并不是Ericam.com，所以导致了访问无效。</p>\n<p>【这个问题可能是因为我更换电脑后重新配置Hexo忽略的地方】</p>\n<p>解决方案：打开_config.yml修改下述内容</p>\n<p><img src=\"/2020/02/15/HexoReferencesToLocalImagesCannotBeDisplayed/20181115112941162.png\" alt></p>\n<h2 id=\"（四）相对路径引用的标签插件\"><a href=\"#（四）相对路径引用的标签插件\" class=\"headerlink\" title=\"（四）相对路径引用的标签插件\"></a>（四）相对路径引用的标签插件</h2><p>通过常规的 markdown 语法和相对路径来引用图片和其它资源可能会导致它们在存档页或者主页上显示不正确。在Hexo 2时代，社区创建了很多插件来解决这个问题。但是，随着Hexo 3 的发布，许多新的标签插件被加入到了核心代码中。这使得你可以更简单地在文章中引用你的资源。</p>\n<p>也就是说在存档页和主页不能使用和文章内容中的常规语法来引用图片。</p>\n<p>比如说：当你打开文章资源文件夹功能后，你把一个 example.jpg 图片放在了你的资源文件夹中，如果通过使用相对路径的常规 markdown 语法 <img src=\"/2020/02/15/HexoReferencesToLocalImagesCannotBeDisplayed/example.jpg\" alt> ，它将 不会 出现在首页上。（但是它会在文章中按你期待的方式工作）</p>\n<p>正确的引用图片方式是使用下列的标签插件而不是 markdown ：</p>\n<pre><code>{% asset_img example.jpg This is an example image %}</code></pre><p>浏览地址：Ericam个人博客<br>配置教程：安装配置Gridea</p>\n<p>原创不易，请勿转载。如有问题，可以评论区留言。点赞！</p>\n<h6 id=\"————————————————\"><a href=\"#————————————————\" class=\"headerlink\" title=\"————————————————\"></a>————————————————</h6><p>版权声明：本文为CSDN博主「Ericam_」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href=\"https://blog.csdn.net/xjm850552586/article/details/84101345\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/xjm850552586/article/details/84101345</a></p>\n"},{"title":"使用Kali无线渗透获取WiFi密码","date":"2020-02-14T18:55:52.000Z","typora-root-url":"UseKaliWirelessPenetrationToGetTheWifiPassword","_content":"\n# 前期准备：\n\n在虚拟机Kali中是无法直接使用物理机本身的网卡的，需要自己买一块网卡插上去让Kali使用，而且对于网卡的类型也是有限制的，买得不好的话就用不了又得退货。本人在这用的无线网卡型号为EP-N8508GS，仅供参考。\n\n# Fighting：\n\n先将无线网卡插入Kali Linux，输入iwconfig命令查看得到，网卡名为wlan0：\n\n![img](20170802215316131-1581710292501.png)\n\n \n\n接着通过以下命令将可能会影响进行无线实验的因素排除掉：\n\n![img](20170802215328854-1581710292745.png)\n\n \n\n接着启动monitor模式：\n\n![img](20170802215338473-1581710292744.png)\n\n \n\n输入iwconfig命令确认一遍，确实已进入monitor模式：\n\n![img](20170802215350265-1581710292556.png)\n\n \n\n接着，输入airodump-ng wlan0mon命令来进行抓包：\n\n![img](20170802215400518-1581710292743.png)\n\n在这里选择对加密类型为WPA的Tenda_490298进行抓包，可看到其BSSID为C8:3A:35:49:02:98，CH即信道为4。\n\n \n\n接着输入airodump-ng wlan0mon --bssid C8:3A:35:49:02:98 -c 4 -w wpa只抓取该WPA的数据包：\n\n![img](20170802215413958-1581710292740.png)\n\n可以看到，有三台设备连接到该路由WiFi，应该是手机，接着提示已经抓到了4步握手信息，然后可以关闭抓取。\n\n上面可能是因为有个室友刚好去连WiFi而不是一直都连着吧，所以直接就可以看到。\n\n若抓不到4步握手，则通过以下命令断开设备与WiFi的连接，使其重新建立连接从而可以抓取四步握手信息：\n\naireplay-ng -0 2 -a 52:A5:89:BA:57:B3 -c 68:3E:34:A1:F7:27 wlan0mon\n\n \n\n通过ls wpa*命令查看抓到的信息保存的文件（多的wpa包是之前做测试保存下来的）：\n\n![img](20170802215956812-1581710292746.png)\n\n这里看最新的那个即wpa-04即可，可以看到总共有4个。\n\n \n\n后面使用Kali Linux中默认存在的字典，目录为/usr/share/wordlists/rockyou.txt.zip，其中需要使用命令来解压：\n\n![img](20170802220104192-1581710292747.png)\n\n这里顺便记录一下Kali中几个常用的字典文件的位置：\n\n/usr/share/john/password.lst\n\n/usr/share/wfuzz/wordlist\n\n/usr/share/ wordlists\n\n \n\n然后使用命令aircrack-ng -w /usr/share/wordlists/rockyou.txt wpa-04.cap进行破解：\n\n![img](20170802220117307-1581710292747.png)\n\n可以看到，破解成功，密码为11223344\n\n没到两秒钟的时间就暴破出WiFi密码，这个弱口令是一个室友当初想方便一点就弄的这个，后面赶紧改了个复杂的。\n\n最后注意的是，WPA和WEP不同（具体的可以百度），如果在字典中没有对应的口令，换句话说，只要WiFi密码设置得够复杂、在口令字典文件中不存在，那么就别指望爆破出密码了。可以看出，也是需要点运气的~\n\n \n\n原文地址：https://blog.csdn.net/ski_12/article/details/76598873","source":"_posts/UseKaliWirelessPenetrationToGetTheWifiPassword.md","raw":"---\ntitle: 使用Kali无线渗透获取WiFi密码\n\ndate: 2020-02-15 02:55:52\ntags:\n- Kali\ncategories:\n- 学习\ntypora-root-url: UseKaliWirelessPenetrationToGetTheWifiPassword\n---\n\n# 前期准备：\n\n在虚拟机Kali中是无法直接使用物理机本身的网卡的，需要自己买一块网卡插上去让Kali使用，而且对于网卡的类型也是有限制的，买得不好的话就用不了又得退货。本人在这用的无线网卡型号为EP-N8508GS，仅供参考。\n\n# Fighting：\n\n先将无线网卡插入Kali Linux，输入iwconfig命令查看得到，网卡名为wlan0：\n\n![img](20170802215316131-1581710292501.png)\n\n \n\n接着通过以下命令将可能会影响进行无线实验的因素排除掉：\n\n![img](20170802215328854-1581710292745.png)\n\n \n\n接着启动monitor模式：\n\n![img](20170802215338473-1581710292744.png)\n\n \n\n输入iwconfig命令确认一遍，确实已进入monitor模式：\n\n![img](20170802215350265-1581710292556.png)\n\n \n\n接着，输入airodump-ng wlan0mon命令来进行抓包：\n\n![img](20170802215400518-1581710292743.png)\n\n在这里选择对加密类型为WPA的Tenda_490298进行抓包，可看到其BSSID为C8:3A:35:49:02:98，CH即信道为4。\n\n \n\n接着输入airodump-ng wlan0mon --bssid C8:3A:35:49:02:98 -c 4 -w wpa只抓取该WPA的数据包：\n\n![img](20170802215413958-1581710292740.png)\n\n可以看到，有三台设备连接到该路由WiFi，应该是手机，接着提示已经抓到了4步握手信息，然后可以关闭抓取。\n\n上面可能是因为有个室友刚好去连WiFi而不是一直都连着吧，所以直接就可以看到。\n\n若抓不到4步握手，则通过以下命令断开设备与WiFi的连接，使其重新建立连接从而可以抓取四步握手信息：\n\naireplay-ng -0 2 -a 52:A5:89:BA:57:B3 -c 68:3E:34:A1:F7:27 wlan0mon\n\n \n\n通过ls wpa*命令查看抓到的信息保存的文件（多的wpa包是之前做测试保存下来的）：\n\n![img](20170802215956812-1581710292746.png)\n\n这里看最新的那个即wpa-04即可，可以看到总共有4个。\n\n \n\n后面使用Kali Linux中默认存在的字典，目录为/usr/share/wordlists/rockyou.txt.zip，其中需要使用命令来解压：\n\n![img](20170802220104192-1581710292747.png)\n\n这里顺便记录一下Kali中几个常用的字典文件的位置：\n\n/usr/share/john/password.lst\n\n/usr/share/wfuzz/wordlist\n\n/usr/share/ wordlists\n\n \n\n然后使用命令aircrack-ng -w /usr/share/wordlists/rockyou.txt wpa-04.cap进行破解：\n\n![img](20170802220117307-1581710292747.png)\n\n可以看到，破解成功，密码为11223344\n\n没到两秒钟的时间就暴破出WiFi密码，这个弱口令是一个室友当初想方便一点就弄的这个，后面赶紧改了个复杂的。\n\n最后注意的是，WPA和WEP不同（具体的可以百度），如果在字典中没有对应的口令，换句话说，只要WiFi密码设置得够复杂、在口令字典文件中不存在，那么就别指望爆破出密码了。可以看出，也是需要点运气的~\n\n \n\n原文地址：https://blog.csdn.net/ski_12/article/details/76598873","slug":"UseKaliWirelessPenetrationToGetTheWifiPassword","published":1,"updated":"2021-11-24T11:00:32.103Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwdmsuvo0008oovh6g952js0","content":"<h1 id=\"前期准备：\"><a href=\"#前期准备：\" class=\"headerlink\" title=\"前期准备：\"></a>前期准备：</h1><p>在虚拟机Kali中是无法直接使用物理机本身的网卡的，需要自己买一块网卡插上去让Kali使用，而且对于网卡的类型也是有限制的，买得不好的话就用不了又得退货。本人在这用的无线网卡型号为EP-N8508GS，仅供参考。</p>\n<h1 id=\"Fighting：\"><a href=\"#Fighting：\" class=\"headerlink\" title=\"Fighting：\"></a>Fighting：</h1><p>先将无线网卡插入Kali Linux，输入iwconfig命令查看得到，网卡名为wlan0：</p>\n<p><img src=\"/2020/02/15/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215316131-1581710292501.png\" alt=\"img\"></p>\n<p>接着通过以下命令将可能会影响进行无线实验的因素排除掉：</p>\n<p><img src=\"/2020/02/15/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215328854-1581710292745.png\" alt=\"img\"></p>\n<p>接着启动monitor模式：</p>\n<p><img src=\"/2020/02/15/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215338473-1581710292744.png\" alt=\"img\"></p>\n<p>输入iwconfig命令确认一遍，确实已进入monitor模式：</p>\n<p><img src=\"/2020/02/15/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215350265-1581710292556.png\" alt=\"img\"></p>\n<p>接着，输入airodump-ng wlan0mon命令来进行抓包：</p>\n<p><img src=\"/2020/02/15/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215400518-1581710292743.png\" alt=\"img\"></p>\n<p>在这里选择对加密类型为WPA的Tenda_490298进行抓包，可看到其BSSID为C8:3A:35:49:02:98，CH即信道为4。</p>\n<p>接着输入airodump-ng wlan0mon –bssid C8:3A:35:49:02:98 -c 4 -w wpa只抓取该WPA的数据包：</p>\n<p><img src=\"/2020/02/15/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215413958-1581710292740.png\" alt=\"img\"></p>\n<p>可以看到，有三台设备连接到该路由WiFi，应该是手机，接着提示已经抓到了4步握手信息，然后可以关闭抓取。</p>\n<p>上面可能是因为有个室友刚好去连WiFi而不是一直都连着吧，所以直接就可以看到。</p>\n<p>若抓不到4步握手，则通过以下命令断开设备与WiFi的连接，使其重新建立连接从而可以抓取四步握手信息：</p>\n<p>aireplay-ng -0 2 -a 52:A5:89:BA:57:B3 -c 68:3E:34:A1:F7:27 wlan0mon</p>\n<p>通过ls wpa*命令查看抓到的信息保存的文件（多的wpa包是之前做测试保存下来的）：</p>\n<p><img src=\"/2020/02/15/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215956812-1581710292746.png\" alt=\"img\"></p>\n<p>这里看最新的那个即wpa-04即可，可以看到总共有4个。</p>\n<p>后面使用Kali Linux中默认存在的字典，目录为/usr/share/wordlists/rockyou.txt.zip，其中需要使用命令来解压：</p>\n<p><img src=\"/2020/02/15/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802220104192-1581710292747.png\" alt=\"img\"></p>\n<p>这里顺便记录一下Kali中几个常用的字典文件的位置：</p>\n<p>/usr/share/john/password.lst</p>\n<p>/usr/share/wfuzz/wordlist</p>\n<p>/usr/share/ wordlists</p>\n<p>然后使用命令aircrack-ng -w /usr/share/wordlists/rockyou.txt wpa-04.cap进行破解：</p>\n<p><img src=\"/2020/02/15/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802220117307-1581710292747.png\" alt=\"img\"></p>\n<p>可以看到，破解成功，密码为11223344</p>\n<p>没到两秒钟的时间就暴破出WiFi密码，这个弱口令是一个室友当初想方便一点就弄的这个，后面赶紧改了个复杂的。</p>\n<p>最后注意的是，WPA和WEP不同（具体的可以百度），如果在字典中没有对应的口令，换句话说，只要WiFi密码设置得够复杂、在口令字典文件中不存在，那么就别指望爆破出密码了。可以看出，也是需要点运气的~</p>\n<p>原文地址：<a href=\"https://blog.csdn.net/ski_12/article/details/76598873\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/ski_12/article/details/76598873</a></p>\n","site":{"data":{"friends":[{"avatar":"http://q1.qlogo.cn/g?b=qq&nk=2750360683&s=640","name":"核心","introduction":"来自山东的一位普通高中生,喜欢捣鼓2333，爱好编程（新手）","url":"http://www.emtips.net/","title":"Piu~"},{"avatar":"https://blobscdn.gitbook.com/v0/b/gitbook-28427.appspot.com/o/spaces%2F-Lw6uUvSmToYpKvgzoM5%2Favatar.png?generation=1576386325104024&alt=media","name":"SRO","introduction":"欢迎来到SRO知识库,您在这里可以看到大多数的SRO内部，外部资料","url":"https://sromc.cn/","title":"Piu~"},{"avatar":"http://q1.qlogo.cn/g?b=qq&nk=1692565761&s=640","name":"河南省商务中等职业学校","introduction":"网络搭建竞赛组","url":"https://blinkfox.github.io/","title":"Piu~"}]}},"excerpt":"","more":"<h1 id=\"前期准备：\"><a href=\"#前期准备：\" class=\"headerlink\" title=\"前期准备：\"></a>前期准备：</h1><p>在虚拟机Kali中是无法直接使用物理机本身的网卡的，需要自己买一块网卡插上去让Kali使用，而且对于网卡的类型也是有限制的，买得不好的话就用不了又得退货。本人在这用的无线网卡型号为EP-N8508GS，仅供参考。</p>\n<h1 id=\"Fighting：\"><a href=\"#Fighting：\" class=\"headerlink\" title=\"Fighting：\"></a>Fighting：</h1><p>先将无线网卡插入Kali Linux，输入iwconfig命令查看得到，网卡名为wlan0：</p>\n<p><img src=\"/2020/02/15/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215316131-1581710292501.png\" alt=\"img\"></p>\n<p>接着通过以下命令将可能会影响进行无线实验的因素排除掉：</p>\n<p><img src=\"/2020/02/15/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215328854-1581710292745.png\" alt=\"img\"></p>\n<p>接着启动monitor模式：</p>\n<p><img src=\"/2020/02/15/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215338473-1581710292744.png\" alt=\"img\"></p>\n<p>输入iwconfig命令确认一遍，确实已进入monitor模式：</p>\n<p><img src=\"/2020/02/15/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215350265-1581710292556.png\" alt=\"img\"></p>\n<p>接着，输入airodump-ng wlan0mon命令来进行抓包：</p>\n<p><img src=\"/2020/02/15/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215400518-1581710292743.png\" alt=\"img\"></p>\n<p>在这里选择对加密类型为WPA的Tenda_490298进行抓包，可看到其BSSID为C8:3A:35:49:02:98，CH即信道为4。</p>\n<p>接着输入airodump-ng wlan0mon –bssid C8:3A:35:49:02:98 -c 4 -w wpa只抓取该WPA的数据包：</p>\n<p><img src=\"/2020/02/15/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215413958-1581710292740.png\" alt=\"img\"></p>\n<p>可以看到，有三台设备连接到该路由WiFi，应该是手机，接着提示已经抓到了4步握手信息，然后可以关闭抓取。</p>\n<p>上面可能是因为有个室友刚好去连WiFi而不是一直都连着吧，所以直接就可以看到。</p>\n<p>若抓不到4步握手，则通过以下命令断开设备与WiFi的连接，使其重新建立连接从而可以抓取四步握手信息：</p>\n<p>aireplay-ng -0 2 -a 52:A5:89:BA:57:B3 -c 68:3E:34:A1:F7:27 wlan0mon</p>\n<p>通过ls wpa*命令查看抓到的信息保存的文件（多的wpa包是之前做测试保存下来的）：</p>\n<p><img src=\"/2020/02/15/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215956812-1581710292746.png\" alt=\"img\"></p>\n<p>这里看最新的那个即wpa-04即可，可以看到总共有4个。</p>\n<p>后面使用Kali Linux中默认存在的字典，目录为/usr/share/wordlists/rockyou.txt.zip，其中需要使用命令来解压：</p>\n<p><img src=\"/2020/02/15/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802220104192-1581710292747.png\" alt=\"img\"></p>\n<p>这里顺便记录一下Kali中几个常用的字典文件的位置：</p>\n<p>/usr/share/john/password.lst</p>\n<p>/usr/share/wfuzz/wordlist</p>\n<p>/usr/share/ wordlists</p>\n<p>然后使用命令aircrack-ng -w /usr/share/wordlists/rockyou.txt wpa-04.cap进行破解：</p>\n<p><img src=\"/2020/02/15/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802220117307-1581710292747.png\" alt=\"img\"></p>\n<p>可以看到，破解成功，密码为11223344</p>\n<p>没到两秒钟的时间就暴破出WiFi密码，这个弱口令是一个室友当初想方便一点就弄的这个，后面赶紧改了个复杂的。</p>\n<p>最后注意的是，WPA和WEP不同（具体的可以百度），如果在字典中没有对应的口令，换句话说，只要WiFi密码设置得够复杂、在口令字典文件中不存在，那么就别指望爆破出密码了。可以看出，也是需要点运气的~</p>\n<p>原文地址：<a href=\"https://blog.csdn.net/ski_12/article/details/76598873\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/ski_12/article/details/76598873</a></p>\n"},{"title":"命令：Screen","typora-copy-images-to":"CentOSCommandScreen","date":"2020-02-14T20:14:48.000Z","_content":"\n## 摘要\n\n> 作为运维人员经常会遇到等到远程主机的链接因为网络原因或者别的其他不可抗拒的原因断掉，此时远程为执行完成的命令也会断掉而导致很多任务需要重新执行。\n\n> 这给大家介绍一个在这种情况下很好用的命令 `screen`，具体好用在那里，下面具体介绍，包括从其安装到配置到使用\n\n## What to do\n\n在正式介绍之前，先给大家介绍下 `screen` 都能做什么事情\n\n- 通过一个SSH session使用多个shell窗口\n- 即使网络断开链接也能保持shell窗口处理激活状态\n- 可以在任何地方断开或者重连同一个shell session\n- 不用为了跑一个耗时的任务而长时间保持几个shell session处于激活状态\n\n------\n\n## 安装\n\nCentos下命令安装一般都采用两种方式，YUM和RPM包的方式。这里分别介绍\n\n### YUM安装\n\n\n\n```undefined\nyum install -y screen\n```\n\n### RPM安装\n\n对于下载 RPM 包，建议去 [http://rpm.pbone.net/](https://link.jianshu.com?t=http://rpm.pbone.net/) 下载\n\n\n\n```cpp\nwget ftp://bo.mirror.garr.it/1/slc/centos/7.1.1503/os/x86_64/Packages/screen-4.1.0-0.19.20120314git3c2946.el7.x86_64.rpm\nrpm -ivh screen-4.1.0-0.19.20120314git3c2946.el7.x86_64.rpm\n```\n\n## 验证安装\n\n\n\n```ruby\nroot@pts/1 $ which screen\n/usr/bin/screen\n\nroot@pts/1 $ screen -v\nScreen version 4.01.00devel (GNU) 2-May-06\n```\n\n------\n\n## 使用\n\n### screen\n\n在开始使用 `screen` 之前，执行下面的命令\n\n\n\n```css\nroot@pts/1 $ ps -ef|grep screen\nroot      6297  2410  0 14:02 pts/1    00:00:00 grep --color=auto screen\n```\n\n然后输入 `screen` 回车，感觉打开了一个新的shell session\n\n### screen -list\n\n这个时候我们在执行上面的`ps`命令和`screen -list`查看结果\n\n\n\n```shell\nroot@pts/2 $ ps -ef|grep screen\nroot      6335  2410  0 14:02 pts/1    00:00:00 screen\nroot      6476  6337  0 14:02 pts/2    00:00:00 grep --color=auto screen\n\nroot@pts/2 $ screen -list\nThere is a screen on:\n        6336.pts-1.192  (Attached)\n1 Socket in /var/run/screen/S-root.\n```\n\n`screen -list`是查看开启的screen列表\n\n### 新增screen `ctrl+a+c`\n\n为了验证新增screen和后面的功能，在上面的开启的第一个screen session中执行`top`命令\n\n从当前的screen session开启一个新的screen session可以使用快捷键 `ctrl+a+c`\n\n看到开启了一个新的 screen session，一个没有执行`top`的新session\n\n### screen切换 ctrl+a+n/p\n\n\n\n```undefined\nctrl+a+n 切换到下一个\n\nctrl+a+p 切换到上一个\n```\n\n需要说明的是在切换的时候N多session组成一个`类似环状`，ctrl+a+n切换到最后一个之后在切换久切换到了第一个，\n\n同理ctrl+a+p切换到第一个之后在切换久切换到了最后一个screen session\n\n### 离开screen ctrl+a+d\n\n注意括号中的状态值，由`Attached`变成`Detached`\n\n\n\n```csharp\n[detached from 6336.pts-1.192]\n\nroot@pts/1 $ screen -list\nThere is a screen on:\n    6336.pts-1.192  (Detached)\n1 Socket in /var/run/screen/S-root.\n```\n\n### 再连接到screen ctrl+r[+name]\n\n当系统只有一个screen处于 Detached状态的话，直接输入`ctrl+r`回车就可以进入screen\n\n如果有多个\n\n\n\n```dart\nroot@pts/1 $ screen -list\nThere are screens on:\n        9944.lc (Detached)\n        9766.pts-1.192  (Detached)\n        6336.pts-1.192  (Detached)\n3 Sockets in /var/run/screen/S-root.\n```\n\n就需要执行`ctrl+r+9766.pts-1.192`\n\n这里其实输入前面的数字或者后面的字符串都行，比如\n\n\n\n```css\nctrl+r+6336\nctrl+r+pts-1.192\npts-1.192` 是由系统生成的，对应用户而言没有明确的意义。我们可以通过`screen -S lc` 命令去自定义这个值，结果如上面的`9944.lc\n```\n\n## 锁住screen ctrl+a+x\n\n\n\n```csharp\nScreen used by root <root> on 192.\nPassword:  \n```\n\n使用的时候输入密码即可\n\n## 停止screen exit or ctrl+a+k\n\n当你跑完脚本或者执行完任务的时候，一般建议`停止screen`，也就是`真正的退出screen`\n\n","source":"_posts/CentOSCommandScreen.md","raw":"---\ntitle: 命令：Screen\ntypora-copy-images-to: CentOSCommandScreen\ndate: 2020-02-15 04:14:48\ntags:\n- 转载\n- Linux\ncategories:\n- 学习\n---\n\n## 摘要\n\n> 作为运维人员经常会遇到等到远程主机的链接因为网络原因或者别的其他不可抗拒的原因断掉，此时远程为执行完成的命令也会断掉而导致很多任务需要重新执行。\n\n> 这给大家介绍一个在这种情况下很好用的命令 `screen`，具体好用在那里，下面具体介绍，包括从其安装到配置到使用\n\n## What to do\n\n在正式介绍之前，先给大家介绍下 `screen` 都能做什么事情\n\n- 通过一个SSH session使用多个shell窗口\n- 即使网络断开链接也能保持shell窗口处理激活状态\n- 可以在任何地方断开或者重连同一个shell session\n- 不用为了跑一个耗时的任务而长时间保持几个shell session处于激活状态\n\n------\n\n## 安装\n\nCentos下命令安装一般都采用两种方式，YUM和RPM包的方式。这里分别介绍\n\n### YUM安装\n\n\n\n```undefined\nyum install -y screen\n```\n\n### RPM安装\n\n对于下载 RPM 包，建议去 [http://rpm.pbone.net/](https://link.jianshu.com?t=http://rpm.pbone.net/) 下载\n\n\n\n```cpp\nwget ftp://bo.mirror.garr.it/1/slc/centos/7.1.1503/os/x86_64/Packages/screen-4.1.0-0.19.20120314git3c2946.el7.x86_64.rpm\nrpm -ivh screen-4.1.0-0.19.20120314git3c2946.el7.x86_64.rpm\n```\n\n## 验证安装\n\n\n\n```ruby\nroot@pts/1 $ which screen\n/usr/bin/screen\n\nroot@pts/1 $ screen -v\nScreen version 4.01.00devel (GNU) 2-May-06\n```\n\n------\n\n## 使用\n\n### screen\n\n在开始使用 `screen` 之前，执行下面的命令\n\n\n\n```css\nroot@pts/1 $ ps -ef|grep screen\nroot      6297  2410  0 14:02 pts/1    00:00:00 grep --color=auto screen\n```\n\n然后输入 `screen` 回车，感觉打开了一个新的shell session\n\n### screen -list\n\n这个时候我们在执行上面的`ps`命令和`screen -list`查看结果\n\n\n\n```shell\nroot@pts/2 $ ps -ef|grep screen\nroot      6335  2410  0 14:02 pts/1    00:00:00 screen\nroot      6476  6337  0 14:02 pts/2    00:00:00 grep --color=auto screen\n\nroot@pts/2 $ screen -list\nThere is a screen on:\n        6336.pts-1.192  (Attached)\n1 Socket in /var/run/screen/S-root.\n```\n\n`screen -list`是查看开启的screen列表\n\n### 新增screen `ctrl+a+c`\n\n为了验证新增screen和后面的功能，在上面的开启的第一个screen session中执行`top`命令\n\n从当前的screen session开启一个新的screen session可以使用快捷键 `ctrl+a+c`\n\n看到开启了一个新的 screen session，一个没有执行`top`的新session\n\n### screen切换 ctrl+a+n/p\n\n\n\n```undefined\nctrl+a+n 切换到下一个\n\nctrl+a+p 切换到上一个\n```\n\n需要说明的是在切换的时候N多session组成一个`类似环状`，ctrl+a+n切换到最后一个之后在切换久切换到了第一个，\n\n同理ctrl+a+p切换到第一个之后在切换久切换到了最后一个screen session\n\n### 离开screen ctrl+a+d\n\n注意括号中的状态值，由`Attached`变成`Detached`\n\n\n\n```csharp\n[detached from 6336.pts-1.192]\n\nroot@pts/1 $ screen -list\nThere is a screen on:\n    6336.pts-1.192  (Detached)\n1 Socket in /var/run/screen/S-root.\n```\n\n### 再连接到screen ctrl+r[+name]\n\n当系统只有一个screen处于 Detached状态的话，直接输入`ctrl+r`回车就可以进入screen\n\n如果有多个\n\n\n\n```dart\nroot@pts/1 $ screen -list\nThere are screens on:\n        9944.lc (Detached)\n        9766.pts-1.192  (Detached)\n        6336.pts-1.192  (Detached)\n3 Sockets in /var/run/screen/S-root.\n```\n\n就需要执行`ctrl+r+9766.pts-1.192`\n\n这里其实输入前面的数字或者后面的字符串都行，比如\n\n\n\n```css\nctrl+r+6336\nctrl+r+pts-1.192\npts-1.192` 是由系统生成的，对应用户而言没有明确的意义。我们可以通过`screen -S lc` 命令去自定义这个值，结果如上面的`9944.lc\n```\n\n## 锁住screen ctrl+a+x\n\n\n\n```csharp\nScreen used by root <root> on 192.\nPassword:  \n```\n\n使用的时候输入密码即可\n\n## 停止screen exit or ctrl+a+k\n\n当你跑完脚本或者执行完任务的时候，一般建议`停止screen`，也就是`真正的退出screen`\n\n","slug":"CentOSCommandScreen","published":1,"updated":"2021-11-24T11:00:32.102Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwdmsuvq000aoovh0gh7487i","content":"<h2 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h2><blockquote>\n<p>作为运维人员经常会遇到等到远程主机的链接因为网络原因或者别的其他不可抗拒的原因断掉，此时远程为执行完成的命令也会断掉而导致很多任务需要重新执行。</p>\n</blockquote>\n<blockquote>\n<p>这给大家介绍一个在这种情况下很好用的命令 <code>screen</code>，具体好用在那里，下面具体介绍，包括从其安装到配置到使用</p>\n</blockquote>\n<h2 id=\"What-to-do\"><a href=\"#What-to-do\" class=\"headerlink\" title=\"What to do\"></a>What to do</h2><p>在正式介绍之前，先给大家介绍下 <code>screen</code> 都能做什么事情</p>\n<ul>\n<li>通过一个SSH session使用多个shell窗口</li>\n<li>即使网络断开链接也能保持shell窗口处理激活状态</li>\n<li>可以在任何地方断开或者重连同一个shell session</li>\n<li>不用为了跑一个耗时的任务而长时间保持几个shell session处于激活状态</li>\n</ul>\n<hr>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>Centos下命令安装一般都采用两种方式，YUM和RPM包的方式。这里分别介绍</p>\n<h3 id=\"YUM安装\"><a href=\"#YUM安装\" class=\"headerlink\" title=\"YUM安装\"></a>YUM安装</h3><pre class=\" language-undefined\"><code class=\"language-undefined\">yum install -y screen</code></pre>\n<h3 id=\"RPM安装\"><a href=\"#RPM安装\" class=\"headerlink\" title=\"RPM安装\"></a>RPM安装</h3><p>对于下载 RPM 包，建议去 <a href=\"https://link.jianshu.com?t=http://rpm.pbone.net/\" target=\"_blank\" rel=\"noopener\">http://rpm.pbone.net/</a> 下载</p>\n<pre class=\" language-cpp\"><code class=\"language-cpp\">wget ftp<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>bo<span class=\"token punctuation\">.</span>mirror<span class=\"token punctuation\">.</span>garr<span class=\"token punctuation\">.</span>it<span class=\"token operator\">/</span><span class=\"token number\">1</span><span class=\"token operator\">/</span>slc<span class=\"token operator\">/</span>centos<span class=\"token operator\">/</span><span class=\"token number\">7.1</span><span class=\"token punctuation\">.</span><span class=\"token number\">1503</span><span class=\"token operator\">/</span>os<span class=\"token operator\">/</span>x86_64<span class=\"token operator\">/</span>Packages<span class=\"token operator\">/</span>screen<span class=\"token number\">-4.1</span><span class=\"token punctuation\">.</span><span class=\"token number\">0</span><span class=\"token operator\">-</span><span class=\"token number\">0.19</span><span class=\"token punctuation\">.</span>20120314git3c2946<span class=\"token punctuation\">.</span>el7<span class=\"token punctuation\">.</span>x86_64<span class=\"token punctuation\">.</span>rpm\nrpm <span class=\"token operator\">-</span>ivh screen<span class=\"token number\">-4.1</span><span class=\"token punctuation\">.</span><span class=\"token number\">0</span><span class=\"token operator\">-</span><span class=\"token number\">0.19</span><span class=\"token punctuation\">.</span>20120314git3c2946<span class=\"token punctuation\">.</span>el7<span class=\"token punctuation\">.</span>x86_64<span class=\"token punctuation\">.</span>rpm</code></pre>\n<h2 id=\"验证安装\"><a href=\"#验证安装\" class=\"headerlink\" title=\"验证安装\"></a>验证安装</h2><pre class=\" language-ruby\"><code class=\"language-ruby\">root<span class=\"token variable\">@pts</span><span class=\"token operator\">/</span><span class=\"token number\">1</span> $ which screen\n<span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>screen\n\nroot<span class=\"token variable\">@pts</span><span class=\"token operator\">/</span><span class=\"token number\">1</span> $ screen <span class=\"token operator\">-</span>v\n<span class=\"token constant\">Screen</span> version <span class=\"token number\">4.01</span><span class=\"token punctuation\">.</span><span class=\"token function\">00devel</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">GNU</span><span class=\"token punctuation\">)</span> <span class=\"token number\">2</span><span class=\"token operator\">-</span><span class=\"token constant\">May</span><span class=\"token operator\">-</span><span class=\"token number\">06</span></code></pre>\n<hr>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><h3 id=\"screen\"><a href=\"#screen\" class=\"headerlink\" title=\"screen\"></a>screen</h3><p>在开始使用 <code>screen</code> 之前，执行下面的命令</p>\n<pre class=\" language-css\"><code class=\"language-css\">root@pts/<span class=\"token number\">1</span> $ ps -ef|grep screen\nroot      <span class=\"token number\">6297</span>  <span class=\"token number\">2410</span>  <span class=\"token number\">0</span> <span class=\"token property\">14</span><span class=\"token punctuation\">:</span><span class=\"token number\">02</span> pts/<span class=\"token number\">1</span>    <span class=\"token property\">00</span><span class=\"token punctuation\">:</span><span class=\"token property\">00</span><span class=\"token punctuation\">:</span><span class=\"token number\">00</span> grep --color=auto screen</code></pre>\n<p>然后输入 <code>screen</code> 回车，感觉打开了一个新的shell session</p>\n<h3 id=\"screen-list\"><a href=\"#screen-list\" class=\"headerlink\" title=\"screen -list\"></a>screen -list</h3><p>这个时候我们在执行上面的<code>ps</code>命令和<code>screen -list</code>查看结果</p>\n<pre class=\" language-shell\"><code class=\"language-shell\">root@pts/2 $ ps -ef|grep screen\nroot      6335  2410  0 14:02 pts/1    00:00:00 screen\nroot      6476  6337  0 14:02 pts/2    00:00:00 grep --color=auto screen\n\nroot@pts/2 $ screen -list\nThere is a screen on:\n        6336.pts-1.192  (Attached)\n1 Socket in /var/run/screen/S-root.</code></pre>\n<p><code>screen -list</code>是查看开启的screen列表</p>\n<h3 id=\"新增screen-ctrl-a-c\"><a href=\"#新增screen-ctrl-a-c\" class=\"headerlink\" title=\"新增screen ctrl+a+c\"></a>新增screen <code>ctrl+a+c</code></h3><p>为了验证新增screen和后面的功能，在上面的开启的第一个screen session中执行<code>top</code>命令</p>\n<p>从当前的screen session开启一个新的screen session可以使用快捷键 <code>ctrl+a+c</code></p>\n<p>看到开启了一个新的 screen session，一个没有执行<code>top</code>的新session</p>\n<h3 id=\"screen切换-ctrl-a-n-p\"><a href=\"#screen切换-ctrl-a-n-p\" class=\"headerlink\" title=\"screen切换 ctrl+a+n/p\"></a>screen切换 ctrl+a+n/p</h3><pre class=\" language-undefined\"><code class=\"language-undefined\">ctrl+a+n 切换到下一个\n\nctrl+a+p 切换到上一个</code></pre>\n<p>需要说明的是在切换的时候N多session组成一个<code>类似环状</code>，ctrl+a+n切换到最后一个之后在切换久切换到了第一个，</p>\n<p>同理ctrl+a+p切换到第一个之后在切换久切换到了最后一个screen session</p>\n<h3 id=\"离开screen-ctrl-a-d\"><a href=\"#离开screen-ctrl-a-d\" class=\"headerlink\" title=\"离开screen ctrl+a+d\"></a>离开screen ctrl+a+d</h3><p>注意括号中的状态值，由<code>Attached</code>变成<code>Detached</code></p>\n<pre class=\" language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span>detached <span class=\"token keyword\">from</span> <span class=\"token number\">6336</span><span class=\"token punctuation\">.</span>pts<span class=\"token number\">-1.192</span><span class=\"token punctuation\">]</span>\n\nroot@pts<span class=\"token operator\">/</span><span class=\"token number\">1</span> $ screen <span class=\"token operator\">-</span>list\nThere <span class=\"token keyword\">is</span> a screen on<span class=\"token punctuation\">:</span>\n    <span class=\"token number\">6336</span><span class=\"token punctuation\">.</span>pts<span class=\"token number\">-1</span><span class=\"token punctuation\">.</span><span class=\"token function\">192</span>  <span class=\"token punctuation\">(</span>Detached<span class=\"token punctuation\">)</span>\n<span class=\"token number\">1</span> Socket <span class=\"token keyword\">in</span> <span class=\"token operator\">/</span><span class=\"token keyword\">var</span><span class=\"token operator\">/</span>run<span class=\"token operator\">/</span>screen<span class=\"token operator\">/</span>S<span class=\"token operator\">-</span>root<span class=\"token punctuation\">.</span></code></pre>\n<h3 id=\"再连接到screen-ctrl-r-name\"><a href=\"#再连接到screen-ctrl-r-name\" class=\"headerlink\" title=\"再连接到screen ctrl+r[+name]\"></a>再连接到screen ctrl+r[+name]</h3><p>当系统只有一个screen处于 Detached状态的话，直接输入<code>ctrl+r</code>回车就可以进入screen</p>\n<p>如果有多个</p>\n<pre class=\" language-dart\"><code class=\"language-dart\">root<span class=\"token metadata symbol\">@pts</span><span class=\"token operator\">/</span><span class=\"token number\">1</span> $ screen <span class=\"token operator\">-</span>list\nThere are screens on<span class=\"token punctuation\">:</span>\n        <span class=\"token number\">9944</span><span class=\"token punctuation\">.</span><span class=\"token function\">lc</span> <span class=\"token punctuation\">(</span>Detached<span class=\"token punctuation\">)</span>\n        <span class=\"token number\">9766</span><span class=\"token punctuation\">.</span>pts<span class=\"token number\">-1</span><span class=\"token punctuation\">.</span><span class=\"token function\">192</span>  <span class=\"token punctuation\">(</span>Detached<span class=\"token punctuation\">)</span>\n        <span class=\"token number\">6336</span><span class=\"token punctuation\">.</span>pts<span class=\"token number\">-1</span><span class=\"token punctuation\">.</span><span class=\"token function\">192</span>  <span class=\"token punctuation\">(</span>Detached<span class=\"token punctuation\">)</span>\n<span class=\"token number\">3</span> Sockets <span class=\"token keyword\">in</span> <span class=\"token operator\">/</span><span class=\"token keyword\">var</span><span class=\"token operator\">/</span>run<span class=\"token operator\">/</span>screen<span class=\"token operator\">/</span>S<span class=\"token operator\">-</span>root<span class=\"token punctuation\">.</span></code></pre>\n<p>就需要执行<code>ctrl+r+9766.pts-1.192</code></p>\n<p>这里其实输入前面的数字或者后面的字符串都行，比如</p>\n<pre class=\" language-css\"><code class=\"language-css\">ctrl+r+<span class=\"token number\">6336</span>\nctrl+r+pts-<span class=\"token number\">1.192</span>\npts-<span class=\"token number\">1.192</span>` 是由系统生成的，对应用户而言没有明确的意义。我们可以通过`screen -S lc` 命令去自定义这个值，结果如上面的`<span class=\"token number\">9944.</span>lc</code></pre>\n<h2 id=\"锁住screen-ctrl-a-x\"><a href=\"#锁住screen-ctrl-a-x\" class=\"headerlink\" title=\"锁住screen ctrl+a+x\"></a>锁住screen ctrl+a+x</h2><pre class=\" language-csharp\"><code class=\"language-csharp\">Screen used by root <span class=\"token operator\">&lt;</span>root<span class=\"token operator\">></span> on <span class=\"token number\">192</span><span class=\"token punctuation\">.</span>\nPassword<span class=\"token punctuation\">:</span>  </code></pre>\n<p>使用的时候输入密码即可</p>\n<h2 id=\"停止screen-exit-or-ctrl-a-k\"><a href=\"#停止screen-exit-or-ctrl-a-k\" class=\"headerlink\" title=\"停止screen exit or ctrl+a+k\"></a>停止screen exit or ctrl+a+k</h2><p>当你跑完脚本或者执行完任务的时候，一般建议<code>停止screen</code>，也就是<code>真正的退出screen</code></p>\n","site":{"data":{"friends":[{"avatar":"http://q1.qlogo.cn/g?b=qq&nk=2750360683&s=640","name":"核心","introduction":"来自山东的一位普通高中生,喜欢捣鼓2333，爱好编程（新手）","url":"http://www.emtips.net/","title":"Piu~"},{"avatar":"https://blobscdn.gitbook.com/v0/b/gitbook-28427.appspot.com/o/spaces%2F-Lw6uUvSmToYpKvgzoM5%2Favatar.png?generation=1576386325104024&alt=media","name":"SRO","introduction":"欢迎来到SRO知识库,您在这里可以看到大多数的SRO内部，外部资料","url":"https://sromc.cn/","title":"Piu~"},{"avatar":"http://q1.qlogo.cn/g?b=qq&nk=1692565761&s=640","name":"河南省商务中等职业学校","introduction":"网络搭建竞赛组","url":"https://blinkfox.github.io/","title":"Piu~"}]}},"excerpt":"","more":"<h2 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h2><blockquote>\n<p>作为运维人员经常会遇到等到远程主机的链接因为网络原因或者别的其他不可抗拒的原因断掉，此时远程为执行完成的命令也会断掉而导致很多任务需要重新执行。</p>\n</blockquote>\n<blockquote>\n<p>这给大家介绍一个在这种情况下很好用的命令 <code>screen</code>，具体好用在那里，下面具体介绍，包括从其安装到配置到使用</p>\n</blockquote>\n<h2 id=\"What-to-do\"><a href=\"#What-to-do\" class=\"headerlink\" title=\"What to do\"></a>What to do</h2><p>在正式介绍之前，先给大家介绍下 <code>screen</code> 都能做什么事情</p>\n<ul>\n<li>通过一个SSH session使用多个shell窗口</li>\n<li>即使网络断开链接也能保持shell窗口处理激活状态</li>\n<li>可以在任何地方断开或者重连同一个shell session</li>\n<li>不用为了跑一个耗时的任务而长时间保持几个shell session处于激活状态</li>\n</ul>\n<hr>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>Centos下命令安装一般都采用两种方式，YUM和RPM包的方式。这里分别介绍</p>\n<h3 id=\"YUM安装\"><a href=\"#YUM安装\" class=\"headerlink\" title=\"YUM安装\"></a>YUM安装</h3><pre><code class=\"undefined\">yum install -y screen</code></pre>\n<h3 id=\"RPM安装\"><a href=\"#RPM安装\" class=\"headerlink\" title=\"RPM安装\"></a>RPM安装</h3><p>对于下载 RPM 包，建议去 <a href=\"https://link.jianshu.com?t=http://rpm.pbone.net/\" target=\"_blank\" rel=\"noopener\">http://rpm.pbone.net/</a> 下载</p>\n<pre><code class=\"cpp\">wget ftp://bo.mirror.garr.it/1/slc/centos/7.1.1503/os/x86_64/Packages/screen-4.1.0-0.19.20120314git3c2946.el7.x86_64.rpm\nrpm -ivh screen-4.1.0-0.19.20120314git3c2946.el7.x86_64.rpm</code></pre>\n<h2 id=\"验证安装\"><a href=\"#验证安装\" class=\"headerlink\" title=\"验证安装\"></a>验证安装</h2><pre><code class=\"ruby\">root@pts/1 $ which screen\n/usr/bin/screen\n\nroot@pts/1 $ screen -v\nScreen version 4.01.00devel (GNU) 2-May-06</code></pre>\n<hr>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><h3 id=\"screen\"><a href=\"#screen\" class=\"headerlink\" title=\"screen\"></a>screen</h3><p>在开始使用 <code>screen</code> 之前，执行下面的命令</p>\n<pre><code class=\"css\">root@pts/1 $ ps -ef|grep screen\nroot      6297  2410  0 14:02 pts/1    00:00:00 grep --color=auto screen</code></pre>\n<p>然后输入 <code>screen</code> 回车，感觉打开了一个新的shell session</p>\n<h3 id=\"screen-list\"><a href=\"#screen-list\" class=\"headerlink\" title=\"screen -list\"></a>screen -list</h3><p>这个时候我们在执行上面的<code>ps</code>命令和<code>screen -list</code>查看结果</p>\n<pre><code class=\"shell\">root@pts/2 $ ps -ef|grep screen\nroot      6335  2410  0 14:02 pts/1    00:00:00 screen\nroot      6476  6337  0 14:02 pts/2    00:00:00 grep --color=auto screen\n\nroot@pts/2 $ screen -list\nThere is a screen on:\n        6336.pts-1.192  (Attached)\n1 Socket in /var/run/screen/S-root.</code></pre>\n<p><code>screen -list</code>是查看开启的screen列表</p>\n<h3 id=\"新增screen-ctrl-a-c\"><a href=\"#新增screen-ctrl-a-c\" class=\"headerlink\" title=\"新增screen ctrl+a+c\"></a>新增screen <code>ctrl+a+c</code></h3><p>为了验证新增screen和后面的功能，在上面的开启的第一个screen session中执行<code>top</code>命令</p>\n<p>从当前的screen session开启一个新的screen session可以使用快捷键 <code>ctrl+a+c</code></p>\n<p>看到开启了一个新的 screen session，一个没有执行<code>top</code>的新session</p>\n<h3 id=\"screen切换-ctrl-a-n-p\"><a href=\"#screen切换-ctrl-a-n-p\" class=\"headerlink\" title=\"screen切换 ctrl+a+n/p\"></a>screen切换 ctrl+a+n/p</h3><pre><code class=\"undefined\">ctrl+a+n 切换到下一个\n\nctrl+a+p 切换到上一个</code></pre>\n<p>需要说明的是在切换的时候N多session组成一个<code>类似环状</code>，ctrl+a+n切换到最后一个之后在切换久切换到了第一个，</p>\n<p>同理ctrl+a+p切换到第一个之后在切换久切换到了最后一个screen session</p>\n<h3 id=\"离开screen-ctrl-a-d\"><a href=\"#离开screen-ctrl-a-d\" class=\"headerlink\" title=\"离开screen ctrl+a+d\"></a>离开screen ctrl+a+d</h3><p>注意括号中的状态值，由<code>Attached</code>变成<code>Detached</code></p>\n<pre><code class=\"csharp\">[detached from 6336.pts-1.192]\n\nroot@pts/1 $ screen -list\nThere is a screen on:\n    6336.pts-1.192  (Detached)\n1 Socket in /var/run/screen/S-root.</code></pre>\n<h3 id=\"再连接到screen-ctrl-r-name\"><a href=\"#再连接到screen-ctrl-r-name\" class=\"headerlink\" title=\"再连接到screen ctrl+r[+name]\"></a>再连接到screen ctrl+r[+name]</h3><p>当系统只有一个screen处于 Detached状态的话，直接输入<code>ctrl+r</code>回车就可以进入screen</p>\n<p>如果有多个</p>\n<pre><code class=\"dart\">root@pts/1 $ screen -list\nThere are screens on:\n        9944.lc (Detached)\n        9766.pts-1.192  (Detached)\n        6336.pts-1.192  (Detached)\n3 Sockets in /var/run/screen/S-root.</code></pre>\n<p>就需要执行<code>ctrl+r+9766.pts-1.192</code></p>\n<p>这里其实输入前面的数字或者后面的字符串都行，比如</p>\n<pre><code class=\"css\">ctrl+r+6336\nctrl+r+pts-1.192\npts-1.192` 是由系统生成的，对应用户而言没有明确的意义。我们可以通过`screen -S lc` 命令去自定义这个值，结果如上面的`9944.lc</code></pre>\n<h2 id=\"锁住screen-ctrl-a-x\"><a href=\"#锁住screen-ctrl-a-x\" class=\"headerlink\" title=\"锁住screen ctrl+a+x\"></a>锁住screen ctrl+a+x</h2><pre><code class=\"csharp\">Screen used by root &lt;root&gt; on 192.\nPassword:  </code></pre>\n<p>使用的时候输入密码即可</p>\n<h2 id=\"停止screen-exit-or-ctrl-a-k\"><a href=\"#停止screen-exit-or-ctrl-a-k\" class=\"headerlink\" title=\"停止screen exit or ctrl+a+k\"></a>停止screen exit or ctrl+a+k</h2><p>当你跑完脚本或者执行完任务的时候，一般建议<code>停止screen</code>，也就是<code>真正的退出screen</code></p>\n"},{"title":"Hello World","typora-root-url":"..","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n\t$ hexo new \"My New Post\"\n\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n\n\t$ hexo server\n\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n\n\t$ hexo generate\n\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n\n\t$ hexo deploy\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n\n\n\n\n\n![image-20200215031832012](/_posts/hello-world/image-20200215031832012.png)","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ntypora-root-url: ..\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n\t$ hexo new \"My New Post\"\n\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n\n\t$ hexo server\n\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n\n\t$ hexo generate\n\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n\n\t$ hexo deploy\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n\n\n\n\n\n![image-20200215031832012](/_posts/hello-world/image-20200215031832012.png)","slug":"hello-world","published":1,"date":"2021-11-24T11:00:32.119Z","updated":"2021-11-24T11:00:32.119Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwdmsuvs000doovh0vt2ahd2","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre><code>$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre><code>$ hexo server</code></pre><p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre><code>$ hexo generate</code></pre><p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre><code>$ hexo deploy</code></pre><p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n<p><img src=\"/2021/11/24/hello-world/hello-world/image-20200215031832012.png\" alt=\"image-20200215031832012\"></p>\n","site":{"data":{"friends":[{"avatar":"http://q1.qlogo.cn/g?b=qq&nk=2750360683&s=640","name":"核心","introduction":"来自山东的一位普通高中生,喜欢捣鼓2333，爱好编程（新手）","url":"http://www.emtips.net/","title":"Piu~"},{"avatar":"https://blobscdn.gitbook.com/v0/b/gitbook-28427.appspot.com/o/spaces%2F-Lw6uUvSmToYpKvgzoM5%2Favatar.png?generation=1576386325104024&alt=media","name":"SRO","introduction":"欢迎来到SRO知识库,您在这里可以看到大多数的SRO内部，外部资料","url":"https://sromc.cn/","title":"Piu~"},{"avatar":"http://q1.qlogo.cn/g?b=qq&nk=1692565761&s=640","name":"河南省商务中等职业学校","introduction":"网络搭建竞赛组","url":"https://blinkfox.github.io/","title":"Piu~"}]}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre><code>$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre><code>$ hexo server</code></pre><p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre><code>$ hexo generate</code></pre><p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre><code>$ hexo deploy</code></pre><p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n<p><img src=\"/2021/11/24/hello-world/hello-world/image-20200215031832012.png\" alt=\"image-20200215031832012\"></p>\n"},{"title":"hexo博客框架+matery主题搭建以及云服务器部署","typora-root-url":"hexo","_content":"### 阅读须知：\n\n- 系统环境：\n\n  > 本机：win10系统\n  > 虚拟机：CentOS7-64位（新装的）\n  > 云服务器：CentOS7-64位\n  > 注意：以下代码中`#`代表root权限，`$`代表普通用户\n  >\n  > 如果你也跟我一样新装了个虚拟机centos7系统，建议先看看[我的另一篇博客](http://www.nstop.cn/2019/11/25hexo-bo-ke-da-jian/)\n\n### 一、初步搭建hexo环境(注意：我这是在虚拟机中的CentOS7系统上操作)\n\n#### 1、安装git（如果有则无须安装）\n\n先介绍一种简单的方法（直接安装）但这种安装git版本过低\n`yum install -y git`\n–查看git版本\n`git --version`\n\n![img](11-29-08.jpg)\n\n\n\n> 这时候你会发现git版本会过低，我这里的是1.8.3.1\n> 下面我将介绍最新版本git安装\n\n1. 先卸载旧版本\n\n   \n\n   \n\n   bash\n\n   ```bash\n   $ sudo yum remove -y git\n   ```\n\n2. 安装git新版本所需的依赖包\n\n   \n\n   \n\n   bash\n\n   ```bash\n   $ sudo yum install -y curl-devel expat-devel gettext-devel openssl-devel zlib-devel\n   $ sudo yum install -y gcc perl-ExtUtils-MakeMaker\n   ```\n\n3. 从我的github仓库源中下载最新git安装包并解压到`/usr/local/src`目录下\n\n   \n\n   \n\n   bash\n\n   ```bash\n   $ wget https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.19.0.tar.gz\n   $ sudo tar -zxvf git-2.19.0.tar.gz -C /usr/local/src\n   ```\n\n   > 如果你的机器上没有安装wget则先安装\n   > `sudo yum install -y wget`\n   > 这里解释一下 `-y` 这个参数的作用：\n   > 无需用户确认要发生的操作（也就是经常会弹出的yes/no/Enter 直接确认跳过）\n\n4. 编译并安装\n\n   \n\n   \n\n   bash\n\n   ```bash\n   $ cd /usr/local/src/git-2.19.0/\n   $ sudo make prefix=/usr/local/git all # 编译源码\n   $ sudo make prefix=/usr/local/git install #安装到/usr/local/git\n   ```\n\n5. 修改配置文件（添加环境变量）\n\n   \n\n   \n\n   bash\n\n   ```bash\n   $ sudo vi /etc/profile\n   #在文件末尾添加export PATH=/usr/local/git/bin:$PATH 保存退出\n   ```\n\n6. 更新修改过后的配置文件\n\n   \n\n   \n\n   bash\n\n   ```bash\n   $ source /etc/profile\n   #查看git版本检查一下是否安装成功\n   $ git --version\n   ```\n\n7. 顺便添加你的用户和邮箱\n\n   \n\n   \n\n   bash\n\n   ```bash\n   # git config --global user.name \"yourname\"\n   # git config --global user.email \"youremail\"\n   ```\n\n#### 2、安装nodejs\n\n在安装hexo-cli之前需要借助nodejs\n\n1. 去nodejs官网下载Linux二进制64bit压缩包，当然如果你的系统是32位的，即选择32位的，这里我直接用wget命令+ url 直接下载到本系统上\n\n   \n\n   \n\n   bash\n\n   ```bash\n   # wget https://nodejs.org/dist/v12.13.1/node-v12.13.1-linux-x64.tar.xz\n   ```\n\n2. 在`/usr/local/`目录下创建一个`nodejs`文件夹\n\n   \n\n   \n\n   bash\n\n   ```bash\n   # mkdir /usr/local/nodejs\n   ```\n\n3. 将压缩包解压到`/usr/local/nodejs/`下\n\n   \n\n   \n\n   bash\n\n   ```bash\n   # tar -Jxvf node-v12.13.1-linux-x64.tar.xz -C /usr/local/nodejs\n   ```\n\n4. 为nodejs添加环境变量，即将`/usr/local/nodejs/node-v12.13.1-linux-x64/bin`添加到环境变量$PATH中，当然你也可以用创建`软连接`(即windows中的快捷方式)的方式代替，只不过第二种显得有点麻烦\n\n   - 查看一下当前进程的环境变量值\n\n     \n\n     \n\n     bash\n\n     ```bash\n     # echo $PATH\n     ```\n\n   - 配置nodejs的环境\n\n     \n\n     \n\n     bash\n\n     ```bash\n     # vi /etc/profile\n     ```\n\n     在文件末尾加上：`export PATH=/usr/local/nodejs/node-v12.13.1-linux-x64/bin:$PATH`保存退出并更新profile文件\n\n     \n\n     \n\n     bash\n\n     ```bash\n     # source /etc/profile\n     ```\n\n     > 这里提一下为什么要写成PATH=/usr/local/nodejs/node-v12.13.1-linux-x64/bin:$PATH\n     > 而不写成PATH=$PATH:/usr/local/nodejs/node-v12.13.1-linux-x64/bin\n     > 当执行某个命令时，如果找不到会从环境变量中去查找对应的目录下是否有该命令，而查找则是\n     > 按照从左到右的顺序进行查找，所以这就可以避免旧版本在新版本之前而使得新版本不能被应用的情况\n\n   - 再次查看环境变量检查是否添加成功\n\n     \n\n     \n\n     bash\n\n     ```bash\n     # echo $PATH\n     ```\n\n5. 查看nodejs版本检查是否安装成功\n\n   \n\n   \n\n   bash\n\n   ```bash\n   # node -v\n   # npm -v\n   ```\n\n#### 3、安装hexo\n\n接下来用`npm`来安装hexo-cli,但是在这不推荐大家使用，由于安装源在国外，下载过于缓慢，所以我们可以用国内的阿里巴巴镜像源进行快速下载安装\n\n1. npm 安装方式\n\n   \n\n   \n\n   bash\n\n   ```bash\n   # npm install -g hexo-cli\n   ```\n\n2. cnpm 安装方式\n\n   \n\n   \n\n   bash\n\n   ```bash\n   # npm install -g cnpm --registry=https://registry.npm.taobao.org\n   # cnpm install -g hexo-cli\n   ```\n\n3. 查看hexo版本检查是否已安装好\n\n   \n\n   \n\n   bash\n\n   ```bash\n   # hexo -v\n   ```\n\n#### 4、用hexo生成博客框架\n\n1. 随便创建一个文件夹，这个文件夹用来存放hexo框架所有文件的（换而言之这个文件夹就是你的博客根目录），然后初始化该文件\n\n   \n\n   \n\n   bash\n\n   ```bash\n   # mkdir myblog\n   #这里改一下myblog的所有者和所有组(jake为你自己的用户名)\n   # chown jake:jake -R myblog\n   # cd myblog\n   # hexo init\n   ```\n\n2. 用hexo -s 命令启动该博客，接着用浏览器输入localhost:4000 访问，检查是否成功\n\n   \n\n   \n\n   bash\n\n   ```bash\n   # hexo s\n   ```\n\n   - 默认端口4000，你也可以自定义指定端口为5000\n\n     \n\n     \n\n     bash\n\n     ```bash\n     # hexo s -p 5000\n     ```\n\n3. 另外介绍一个命令（后面要用到），用`hexo g`命令生成部署该博客（实质会生成一个public文件夹，这个文件夹下都是html静态页面）\n\n   \n\n   \n\n   bash\n\n   ```bash\n   # hexo g\n   ```\n\n#### 5、win10系统访问虚拟机端口\n\n由于我所有hexo部署都在虚拟机系统上，怎么通过win10主机访问我的博客页面呢\n\n1. 开放虚拟机CentOS系统的4000端口\n\n   \n\n   \n\n   bash\n\n   ```bash\n   # firewall-cmd --zone=public --add-port=4000/tcp --permanent\n   ```\n\n2. 重启防火墙\n\n   \n\n   \n\n   bash\n\n   ```bash\n   # systemctl restart firewalld.service\n   ```\n\n3. 接下来你就可以通过win10上的浏览器输入虚拟机ip:4000访问你的博客了，当你看到如下图所示，那么恭喜你成功完成了第一步！\n\n   ![img](11-29-09.jpg)\n\n### 二、在第一步的基础上换一个华丽的主题（也就是matery），再用GitHub作为服务器来被外界访问\n\n#### 1、下载matery主题\n\n从github上下载一个matery主题(当前目录下)，然后把这个文件移动到`myblog/themes/`下\n\n\n\n\n\nbash\n\n```bash\n# git clone https://github.com/blinkfoxhexo-theme-matery.git\n#/home/jake/myblog是我的博客根目录，需要根据自身情况予以修改\n# mv hexo-theme-matery /home/jake/blog/themes/\n```\n\n#### 2、修改配置文件_config.yml\n\n\n\n![img](11-29-10.jpg)\n\n\n\n#### 3、切换到myblog文件下重新启动\n\n\n\n\n\nbash\n\n```bash\n# hexo s\n```\n\n\n\n![img](11-29-11.jpg)\n\n\n\n#### 4、部署GitHub\n\n接下来就部署GitHub了，前提你得有个GitHub账号，没有的话去注册一个（这里不提供教程，自己百度）\n\n1. 登录你的GitHub，创建一个仓库\n\n   ![img](11-29-12.jpg)\n\n   \n\n2. 按照规则为你的仓库起名（这个名字就是别人可以访问你博客的网址）\n\n   ![img](11-29-13.jpg)\n\n   ![img](11-29-14.jpg)\n\n   \n\n3. 打开`_config.yml`配置文件，配置你的仓库\n\n   \n\n   \n\n   bash\n\n   ```bash\n   # vi _config.yml\n   ```\n\n   \n\n   ![img](11-29-15.jpg)\n\n   \n\n4. 因为需要将项目推送到GitHub，所以需要安装一个插件\n\n   \n\n   \n\n   bash\n\n   ```bash\n   # cnpm install --save hexo-deployer-git\n   ```\n\n5. 装好后直接用hexo g 生成博客文件，再用hexo d 推送项目到github上\n\n   \n\n   \n\n   bash\n\n   ```bash\n   # hexo g\n   # hexo d\n   ```\n\n   \n\n   ![img](11-29-16.jpg)\n\n   \n\n6. 换用ssh公钥\n   你会发现每次执行hexo d 推送到github上时需要输入账号和密码，这有点令人不耐烦，因此下面给大家展示一种用ssh公钥的方法去部署github\n\n   - 在虚拟机CentOS系统上下载ssh key\n\n     \n\n     \n\n     bash\n\n     ```bash\n     # ssh-keygen -t rsa\n     #一路回车即可，然后查看/root下的文件夹\n     # ls -al /root\n     ```\n\n   - 这时候你会发现在root下有一个隐藏文件.ssh，打开.ssh下的\n\n     ```\n     id_rsa.pub\n     ```\n\n     文件，复制此文件的全部内容,粘贴到下图所示位置\n\n     打开github\n\n     ![img](11-29-17.jpg)\n\n     ![img](11-29-18.jpg)\n\n     ![img](11-29-19.jpg)\n\n   - 相应的也要修改\n\n     ```\n     _config.yml\n     ```\n\n     配置文件\n\n     ![img](11-29-22.jpg)\n\n     ![img](11-29-21.jpg)\n\n     ![img](11-29-20.jpg)\n\n#### 5、收获成功的喜悦\n\n当你看到这里恭喜你已经成功完成了第一份属于自己的博客了!但你会发现，你通过github访问你的博客会很卡，简单说一下原因。github服务器在国外，所以访问速度很慢，这里提供一个简单的解决办法\n\n1. 可以用国内的coding，类似github，去coding官网注册一个账号，记得要实名认证，然后仿照github的操作将ssh key内容粘贴到指定区域\n\n   ![img](11-29-24.jpg)\n\n   ![img](11-29-25.jpg)\n\n2. 同样修改\n\n   ```\n   _config.yml\n   ```\n\n   配置文件\n\n   ![img](11-29-23.jpg)\n\n3. 用`hexo clean`清理一下 ==> `hexo g`生成 ==> `hexo d`部署推送博客\n\n4. 接下来登录coding账号，查看仓库是存在项目，确定之后开始创建静态网站，步骤如下图所示\n\n   ![img](11-29-26.jpg)\n\n   ![img](11-29-27.jpg)\n\n   ![img](11-29-28.jpg)\n\n#### 6、温馨提示\n\n最后温馨提示一下，matery主题虽然应用到hexo框架上了，但仍需要改动一些配置文件，根据每个人不同的喜好可以制定自己独特的博客，至于个性化设置这里就不介绍了，需要的小伙伴可以去参考以下链接，看看大佬们是如何设计优化matery主题和hexo博客框架的。\n\n- 参考链接:\n  [洪卫の博客:Hexo+Github博客搭建完全教程](https://sunhwee.com/posts/6e8839eb.html)\n  [韦阳的博客:超详细Hexo+Github博客搭建小白教程](https://godweiyang.com/2018/04/13hexo-blog/)\n\n> 如果实在不懂的小伙伴可以在下方留言，也可以参考一下这个大佬的视频[hexo博客搭建](https://www.bilibili.com/video/av44544186/)\n\n### 三、将第二步中的github和coding替换为自己的云服务器，下面介绍如何部署好云服务器\n\n#### 1. 创建git用户\n\n当你做完前面两大步，这一步就相当的简单，原理都一样，首先在你的云服务机上，创建一个git用户,并指定密码\n\n\n\n\n\nbash\n\n```bash\n# useradd git\n# passwd git\n```\n\n#### 2. 部署密钥到服务器上\n\n切换到git用户，创建`.ssh`文件夹，以及在`.ssh`下创建`authorized_keys`文件,将ssh_key（也就是第二大步里面的那个密钥内容）粘贴到`authorized_keys`文件中\n\n\n\n\n\nbash\n\n```bash\n# su git\n# 切换到git用户的家目录\n# cd ~  \n$ mkdir .ssh\n$ vim ~/.ssh/autorized_keys # wq保存退出\n# 修改一下.ssh 和 authorized_key 的权限，保证不被其他用户或用户组访问以及修改\n$ chmod 600 ~/.ssh/authorized_key\n$ chmod 700 ~/.ssh \n```\n\n> 没有安装vim的 安装一下： `yum install -y vim`\n\n#### 3. 安装nginx\n\n\n\n\n\nbash\n\n```bash\n# yum install -y nginx\n# systemctl start nginx.service # 启动nginx服务\n```\n\n当你通过外网访问你的服务器ip可以看到nginx的欢迎页面就说明你安装成功了。这里说一下，有可能你显示的时centos欢迎页面，这也没问题。（我的就是）\n打开`/etc/nginx/nginx.conf`配置文件（如果找不到，你也可以用`nginx -t`查看配置文件在哪）\n\n![img](11-29-29.jpg)\n\n\n接下来创建你的博客根目录(我创建的根目录是`/home/git/blog`)\n\n\n\n\n\n\n\nbash\n\n```bash\n$ mkdir ~/blog\n```\n\n修改nginx配置文件如下（注意以下两个地方）\n第一个是权限问题\n\n![img](11-29-31.jpg)\n\n\n第二个是访问路径\n\n![img](11-29-30.jpg)\n\n\n配置好就重启一下nginx\n\n\n\n\n\n\n\nbash\n\n```bash\n# systemctl restart nginx.service\n```\n\n#### 4.创建git仓库\n\n创建git仓库以及用hooks钩子同步到你的博客根目录\n\n\n\n\n\nbash\n\n```bash\n$ cd ~\n$ git init --bare blog.git\n$ ls -l blog.git\n# 修改一下权限\n# chown git:git -R blog.git\n# 创建post-receive文件\n$ vim blog.git/hooks/post-receive\n```\n\n添加以下内容：\n\n> \\#!/bin/sh\n> git –work-tree=/home/git/blog –git-dir=/home/git/blog.git checkout -f\n> `/home/git/blog`这是你刚刚创建的博客根目录\n> 赋予其执行权限\n\n\n\n\n\nbash\n\n```bash\n$ chmod +x /home/git/blog.git/hooks/post-receive\n```\n\n接下来创建git-receive-pack和git-upload-pack软连接,以防执行hexo d 命令时报错找不到\n\n\n\n\n\nbash\n\n```bash\n# sudo ln -s /usr/local/git/bin/git-receive-pack  /usr/bin/git-recei\n# sudo ln -s /usr/local/git/bin/git-upload-pack  /usr/bin/git-upload-pack\n```\n\n#### 5.修改配置文件\n\n到本地的虚拟机系统上修改博客`_config.yml`配置文件\n添加 `git@yourserver_ip:/home/git/blog.git`git服务器地址\n\n![img](11-29-32.jpg)\n\n\n\n> 特别注意：\n> 如果你之前跟我一样配置三个git服务器（github、coding、自己的云服务器）,那么你就要删除一下本地系统中的`.ssh`文件中的`known_hosts`\n> 只要你更改了`_config.yml`文件中git服务器地址，最好删除一下`known_hosts`\n> 执行`hexo clean && hexo g && hexo d`\n\n### 四、总结一下可能会碰到的错误\n\n1. 经常会发生的错误：权限问题引起的。（这是个家常便饭，但你清楚了权限的重要性，那么你以后在linux系统上配置安装一些程序就很容易了）\n   有时候你在安装依赖文件或者执行某些命令如`hexo d hexo clean hexo g`等等会报错，那是因为你使用的当前用户权限不够。包括你在向git服务器推送项目时，你的服务器那边git用户权限不足而导致操作不了某些文件。\n\n   所以建议你把博客根目录下所有文件的使用者更改为你当前用户。当然你也可以用root用户去操作，但是经常切换用户很麻烦，或者使用sudo借用root权限也要输入密码。\n   如：假设你的博客根目录路径为`/home/jake/myblog`\n   那么使用以下命令更改权限\n\n   \n\n   \n\n   bash\n\n   ```bash\n   $ sudo chown jake:jake -R /home/jake/myblog/*\n   ```\n\n2. 访问网页出现404错误，这种很好解决，一是你的nginx路径配错了，二是访问端口未开放，ip配置不对。\n\n3. `hexo d`推送项目到git服务器时验证失败，首先确保你把本地的ssh_key密钥内容复制到了你的git服务器上了，然后删除你本地的`.ssh`文件夹下的`known_hosts`文件，重新`hexo d`,还有一种可能，你没有装推送必要的依赖插件`hexo-deployer-git`\n\n### 五、讨论以及心得\n\n有人可能会问我为什么不直接用windows作为本地进行操作，而要大费周章地去搞个虚拟机系统操作。\n\n或许你会觉得Windows上操作会更容易，当然有些小伙伴可能想用windows搭建hexo博客，这里我就不介绍了。\n\n其实用windows去搭建hexo博客的话我个人感觉有些别扭，因为你在windows操作的话在安装完git之后也是用git bash来部署安装hexo博客的，等价于用git bash 来营造一个Linux系统终端；\n\n显得有点多此一举，况且多用用Linux系统对某些小伙伴以后的学习是有帮助的。\n\n比如：虚拟机系统如何查看端口状态以及端口的开放和关闭，如何开启和关闭防火墙、虚拟机网速问题、git服务器的安装和使用、github、coding版本项目管理工具的使用、初步认识nginx负载均衡等等，这些都是我在搭建hexo中需要了解的知识。另外最重要的是我又对Linux系统有了进一步的了解\n\n### 六、参考链接\n\n1. [洪卫の博客:Hexo+Github博客搭建完全教程](https://sunhwee.com/posts/6e8839eb.html)\n2. [韦阳的博客:超详细Hexo+Github博客搭建小白教程](https://godweiyang.com/2018/04/13hexo-blog/)\n3. [Hexo 博客部署到腾讯云服务器全流程](https://blog.csdn.net/StaunchKai/article/details/82878928)\n4. [centos7开放、关闭及查看端口](https://blog.csdn.net/qq_34996727/article/details/81065961)\n5. [廖雪峰的Git教程](https://www.liaoxuefeng.com/wiki/896043488029600)\n\n[文章来源](http://www.nstop.cn/)","source":"_posts/hexo.md","raw":"---\ntitle: hexo博客框架+matery主题搭建以及云服务器部署\n\ncategories:\n- Linux\ntags:\n- Hexo\n- Linux\n- 转载\ntypora-root-url: hexo\n---\n### 阅读须知：\n\n- 系统环境：\n\n  > 本机：win10系统\n  > 虚拟机：CentOS7-64位（新装的）\n  > 云服务器：CentOS7-64位\n  > 注意：以下代码中`#`代表root权限，`$`代表普通用户\n  >\n  > 如果你也跟我一样新装了个虚拟机centos7系统，建议先看看[我的另一篇博客](http://www.nstop.cn/2019/11/25hexo-bo-ke-da-jian/)\n\n### 一、初步搭建hexo环境(注意：我这是在虚拟机中的CentOS7系统上操作)\n\n#### 1、安装git（如果有则无须安装）\n\n先介绍一种简单的方法（直接安装）但这种安装git版本过低\n`yum install -y git`\n–查看git版本\n`git --version`\n\n![img](11-29-08.jpg)\n\n\n\n> 这时候你会发现git版本会过低，我这里的是1.8.3.1\n> 下面我将介绍最新版本git安装\n\n1. 先卸载旧版本\n\n   \n\n   \n\n   bash\n\n   ```bash\n   $ sudo yum remove -y git\n   ```\n\n2. 安装git新版本所需的依赖包\n\n   \n\n   \n\n   bash\n\n   ```bash\n   $ sudo yum install -y curl-devel expat-devel gettext-devel openssl-devel zlib-devel\n   $ sudo yum install -y gcc perl-ExtUtils-MakeMaker\n   ```\n\n3. 从我的github仓库源中下载最新git安装包并解压到`/usr/local/src`目录下\n\n   \n\n   \n\n   bash\n\n   ```bash\n   $ wget https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.19.0.tar.gz\n   $ sudo tar -zxvf git-2.19.0.tar.gz -C /usr/local/src\n   ```\n\n   > 如果你的机器上没有安装wget则先安装\n   > `sudo yum install -y wget`\n   > 这里解释一下 `-y` 这个参数的作用：\n   > 无需用户确认要发生的操作（也就是经常会弹出的yes/no/Enter 直接确认跳过）\n\n4. 编译并安装\n\n   \n\n   \n\n   bash\n\n   ```bash\n   $ cd /usr/local/src/git-2.19.0/\n   $ sudo make prefix=/usr/local/git all # 编译源码\n   $ sudo make prefix=/usr/local/git install #安装到/usr/local/git\n   ```\n\n5. 修改配置文件（添加环境变量）\n\n   \n\n   \n\n   bash\n\n   ```bash\n   $ sudo vi /etc/profile\n   #在文件末尾添加export PATH=/usr/local/git/bin:$PATH 保存退出\n   ```\n\n6. 更新修改过后的配置文件\n\n   \n\n   \n\n   bash\n\n   ```bash\n   $ source /etc/profile\n   #查看git版本检查一下是否安装成功\n   $ git --version\n   ```\n\n7. 顺便添加你的用户和邮箱\n\n   \n\n   \n\n   bash\n\n   ```bash\n   # git config --global user.name \"yourname\"\n   # git config --global user.email \"youremail\"\n   ```\n\n#### 2、安装nodejs\n\n在安装hexo-cli之前需要借助nodejs\n\n1. 去nodejs官网下载Linux二进制64bit压缩包，当然如果你的系统是32位的，即选择32位的，这里我直接用wget命令+ url 直接下载到本系统上\n\n   \n\n   \n\n   bash\n\n   ```bash\n   # wget https://nodejs.org/dist/v12.13.1/node-v12.13.1-linux-x64.tar.xz\n   ```\n\n2. 在`/usr/local/`目录下创建一个`nodejs`文件夹\n\n   \n\n   \n\n   bash\n\n   ```bash\n   # mkdir /usr/local/nodejs\n   ```\n\n3. 将压缩包解压到`/usr/local/nodejs/`下\n\n   \n\n   \n\n   bash\n\n   ```bash\n   # tar -Jxvf node-v12.13.1-linux-x64.tar.xz -C /usr/local/nodejs\n   ```\n\n4. 为nodejs添加环境变量，即将`/usr/local/nodejs/node-v12.13.1-linux-x64/bin`添加到环境变量$PATH中，当然你也可以用创建`软连接`(即windows中的快捷方式)的方式代替，只不过第二种显得有点麻烦\n\n   - 查看一下当前进程的环境变量值\n\n     \n\n     \n\n     bash\n\n     ```bash\n     # echo $PATH\n     ```\n\n   - 配置nodejs的环境\n\n     \n\n     \n\n     bash\n\n     ```bash\n     # vi /etc/profile\n     ```\n\n     在文件末尾加上：`export PATH=/usr/local/nodejs/node-v12.13.1-linux-x64/bin:$PATH`保存退出并更新profile文件\n\n     \n\n     \n\n     bash\n\n     ```bash\n     # source /etc/profile\n     ```\n\n     > 这里提一下为什么要写成PATH=/usr/local/nodejs/node-v12.13.1-linux-x64/bin:$PATH\n     > 而不写成PATH=$PATH:/usr/local/nodejs/node-v12.13.1-linux-x64/bin\n     > 当执行某个命令时，如果找不到会从环境变量中去查找对应的目录下是否有该命令，而查找则是\n     > 按照从左到右的顺序进行查找，所以这就可以避免旧版本在新版本之前而使得新版本不能被应用的情况\n\n   - 再次查看环境变量检查是否添加成功\n\n     \n\n     \n\n     bash\n\n     ```bash\n     # echo $PATH\n     ```\n\n5. 查看nodejs版本检查是否安装成功\n\n   \n\n   \n\n   bash\n\n   ```bash\n   # node -v\n   # npm -v\n   ```\n\n#### 3、安装hexo\n\n接下来用`npm`来安装hexo-cli,但是在这不推荐大家使用，由于安装源在国外，下载过于缓慢，所以我们可以用国内的阿里巴巴镜像源进行快速下载安装\n\n1. npm 安装方式\n\n   \n\n   \n\n   bash\n\n   ```bash\n   # npm install -g hexo-cli\n   ```\n\n2. cnpm 安装方式\n\n   \n\n   \n\n   bash\n\n   ```bash\n   # npm install -g cnpm --registry=https://registry.npm.taobao.org\n   # cnpm install -g hexo-cli\n   ```\n\n3. 查看hexo版本检查是否已安装好\n\n   \n\n   \n\n   bash\n\n   ```bash\n   # hexo -v\n   ```\n\n#### 4、用hexo生成博客框架\n\n1. 随便创建一个文件夹，这个文件夹用来存放hexo框架所有文件的（换而言之这个文件夹就是你的博客根目录），然后初始化该文件\n\n   \n\n   \n\n   bash\n\n   ```bash\n   # mkdir myblog\n   #这里改一下myblog的所有者和所有组(jake为你自己的用户名)\n   # chown jake:jake -R myblog\n   # cd myblog\n   # hexo init\n   ```\n\n2. 用hexo -s 命令启动该博客，接着用浏览器输入localhost:4000 访问，检查是否成功\n\n   \n\n   \n\n   bash\n\n   ```bash\n   # hexo s\n   ```\n\n   - 默认端口4000，你也可以自定义指定端口为5000\n\n     \n\n     \n\n     bash\n\n     ```bash\n     # hexo s -p 5000\n     ```\n\n3. 另外介绍一个命令（后面要用到），用`hexo g`命令生成部署该博客（实质会生成一个public文件夹，这个文件夹下都是html静态页面）\n\n   \n\n   \n\n   bash\n\n   ```bash\n   # hexo g\n   ```\n\n#### 5、win10系统访问虚拟机端口\n\n由于我所有hexo部署都在虚拟机系统上，怎么通过win10主机访问我的博客页面呢\n\n1. 开放虚拟机CentOS系统的4000端口\n\n   \n\n   \n\n   bash\n\n   ```bash\n   # firewall-cmd --zone=public --add-port=4000/tcp --permanent\n   ```\n\n2. 重启防火墙\n\n   \n\n   \n\n   bash\n\n   ```bash\n   # systemctl restart firewalld.service\n   ```\n\n3. 接下来你就可以通过win10上的浏览器输入虚拟机ip:4000访问你的博客了，当你看到如下图所示，那么恭喜你成功完成了第一步！\n\n   ![img](11-29-09.jpg)\n\n### 二、在第一步的基础上换一个华丽的主题（也就是matery），再用GitHub作为服务器来被外界访问\n\n#### 1、下载matery主题\n\n从github上下载一个matery主题(当前目录下)，然后把这个文件移动到`myblog/themes/`下\n\n\n\n\n\nbash\n\n```bash\n# git clone https://github.com/blinkfoxhexo-theme-matery.git\n#/home/jake/myblog是我的博客根目录，需要根据自身情况予以修改\n# mv hexo-theme-matery /home/jake/blog/themes/\n```\n\n#### 2、修改配置文件_config.yml\n\n\n\n![img](11-29-10.jpg)\n\n\n\n#### 3、切换到myblog文件下重新启动\n\n\n\n\n\nbash\n\n```bash\n# hexo s\n```\n\n\n\n![img](11-29-11.jpg)\n\n\n\n#### 4、部署GitHub\n\n接下来就部署GitHub了，前提你得有个GitHub账号，没有的话去注册一个（这里不提供教程，自己百度）\n\n1. 登录你的GitHub，创建一个仓库\n\n   ![img](11-29-12.jpg)\n\n   \n\n2. 按照规则为你的仓库起名（这个名字就是别人可以访问你博客的网址）\n\n   ![img](11-29-13.jpg)\n\n   ![img](11-29-14.jpg)\n\n   \n\n3. 打开`_config.yml`配置文件，配置你的仓库\n\n   \n\n   \n\n   bash\n\n   ```bash\n   # vi _config.yml\n   ```\n\n   \n\n   ![img](11-29-15.jpg)\n\n   \n\n4. 因为需要将项目推送到GitHub，所以需要安装一个插件\n\n   \n\n   \n\n   bash\n\n   ```bash\n   # cnpm install --save hexo-deployer-git\n   ```\n\n5. 装好后直接用hexo g 生成博客文件，再用hexo d 推送项目到github上\n\n   \n\n   \n\n   bash\n\n   ```bash\n   # hexo g\n   # hexo d\n   ```\n\n   \n\n   ![img](11-29-16.jpg)\n\n   \n\n6. 换用ssh公钥\n   你会发现每次执行hexo d 推送到github上时需要输入账号和密码，这有点令人不耐烦，因此下面给大家展示一种用ssh公钥的方法去部署github\n\n   - 在虚拟机CentOS系统上下载ssh key\n\n     \n\n     \n\n     bash\n\n     ```bash\n     # ssh-keygen -t rsa\n     #一路回车即可，然后查看/root下的文件夹\n     # ls -al /root\n     ```\n\n   - 这时候你会发现在root下有一个隐藏文件.ssh，打开.ssh下的\n\n     ```\n     id_rsa.pub\n     ```\n\n     文件，复制此文件的全部内容,粘贴到下图所示位置\n\n     打开github\n\n     ![img](11-29-17.jpg)\n\n     ![img](11-29-18.jpg)\n\n     ![img](11-29-19.jpg)\n\n   - 相应的也要修改\n\n     ```\n     _config.yml\n     ```\n\n     配置文件\n\n     ![img](11-29-22.jpg)\n\n     ![img](11-29-21.jpg)\n\n     ![img](11-29-20.jpg)\n\n#### 5、收获成功的喜悦\n\n当你看到这里恭喜你已经成功完成了第一份属于自己的博客了!但你会发现，你通过github访问你的博客会很卡，简单说一下原因。github服务器在国外，所以访问速度很慢，这里提供一个简单的解决办法\n\n1. 可以用国内的coding，类似github，去coding官网注册一个账号，记得要实名认证，然后仿照github的操作将ssh key内容粘贴到指定区域\n\n   ![img](11-29-24.jpg)\n\n   ![img](11-29-25.jpg)\n\n2. 同样修改\n\n   ```\n   _config.yml\n   ```\n\n   配置文件\n\n   ![img](11-29-23.jpg)\n\n3. 用`hexo clean`清理一下 ==> `hexo g`生成 ==> `hexo d`部署推送博客\n\n4. 接下来登录coding账号，查看仓库是存在项目，确定之后开始创建静态网站，步骤如下图所示\n\n   ![img](11-29-26.jpg)\n\n   ![img](11-29-27.jpg)\n\n   ![img](11-29-28.jpg)\n\n#### 6、温馨提示\n\n最后温馨提示一下，matery主题虽然应用到hexo框架上了，但仍需要改动一些配置文件，根据每个人不同的喜好可以制定自己独特的博客，至于个性化设置这里就不介绍了，需要的小伙伴可以去参考以下链接，看看大佬们是如何设计优化matery主题和hexo博客框架的。\n\n- 参考链接:\n  [洪卫の博客:Hexo+Github博客搭建完全教程](https://sunhwee.com/posts/6e8839eb.html)\n  [韦阳的博客:超详细Hexo+Github博客搭建小白教程](https://godweiyang.com/2018/04/13hexo-blog/)\n\n> 如果实在不懂的小伙伴可以在下方留言，也可以参考一下这个大佬的视频[hexo博客搭建](https://www.bilibili.com/video/av44544186/)\n\n### 三、将第二步中的github和coding替换为自己的云服务器，下面介绍如何部署好云服务器\n\n#### 1. 创建git用户\n\n当你做完前面两大步，这一步就相当的简单，原理都一样，首先在你的云服务机上，创建一个git用户,并指定密码\n\n\n\n\n\nbash\n\n```bash\n# useradd git\n# passwd git\n```\n\n#### 2. 部署密钥到服务器上\n\n切换到git用户，创建`.ssh`文件夹，以及在`.ssh`下创建`authorized_keys`文件,将ssh_key（也就是第二大步里面的那个密钥内容）粘贴到`authorized_keys`文件中\n\n\n\n\n\nbash\n\n```bash\n# su git\n# 切换到git用户的家目录\n# cd ~  \n$ mkdir .ssh\n$ vim ~/.ssh/autorized_keys # wq保存退出\n# 修改一下.ssh 和 authorized_key 的权限，保证不被其他用户或用户组访问以及修改\n$ chmod 600 ~/.ssh/authorized_key\n$ chmod 700 ~/.ssh \n```\n\n> 没有安装vim的 安装一下： `yum install -y vim`\n\n#### 3. 安装nginx\n\n\n\n\n\nbash\n\n```bash\n# yum install -y nginx\n# systemctl start nginx.service # 启动nginx服务\n```\n\n当你通过外网访问你的服务器ip可以看到nginx的欢迎页面就说明你安装成功了。这里说一下，有可能你显示的时centos欢迎页面，这也没问题。（我的就是）\n打开`/etc/nginx/nginx.conf`配置文件（如果找不到，你也可以用`nginx -t`查看配置文件在哪）\n\n![img](11-29-29.jpg)\n\n\n接下来创建你的博客根目录(我创建的根目录是`/home/git/blog`)\n\n\n\n\n\n\n\nbash\n\n```bash\n$ mkdir ~/blog\n```\n\n修改nginx配置文件如下（注意以下两个地方）\n第一个是权限问题\n\n![img](11-29-31.jpg)\n\n\n第二个是访问路径\n\n![img](11-29-30.jpg)\n\n\n配置好就重启一下nginx\n\n\n\n\n\n\n\nbash\n\n```bash\n# systemctl restart nginx.service\n```\n\n#### 4.创建git仓库\n\n创建git仓库以及用hooks钩子同步到你的博客根目录\n\n\n\n\n\nbash\n\n```bash\n$ cd ~\n$ git init --bare blog.git\n$ ls -l blog.git\n# 修改一下权限\n# chown git:git -R blog.git\n# 创建post-receive文件\n$ vim blog.git/hooks/post-receive\n```\n\n添加以下内容：\n\n> \\#!/bin/sh\n> git –work-tree=/home/git/blog –git-dir=/home/git/blog.git checkout -f\n> `/home/git/blog`这是你刚刚创建的博客根目录\n> 赋予其执行权限\n\n\n\n\n\nbash\n\n```bash\n$ chmod +x /home/git/blog.git/hooks/post-receive\n```\n\n接下来创建git-receive-pack和git-upload-pack软连接,以防执行hexo d 命令时报错找不到\n\n\n\n\n\nbash\n\n```bash\n# sudo ln -s /usr/local/git/bin/git-receive-pack  /usr/bin/git-recei\n# sudo ln -s /usr/local/git/bin/git-upload-pack  /usr/bin/git-upload-pack\n```\n\n#### 5.修改配置文件\n\n到本地的虚拟机系统上修改博客`_config.yml`配置文件\n添加 `git@yourserver_ip:/home/git/blog.git`git服务器地址\n\n![img](11-29-32.jpg)\n\n\n\n> 特别注意：\n> 如果你之前跟我一样配置三个git服务器（github、coding、自己的云服务器）,那么你就要删除一下本地系统中的`.ssh`文件中的`known_hosts`\n> 只要你更改了`_config.yml`文件中git服务器地址，最好删除一下`known_hosts`\n> 执行`hexo clean && hexo g && hexo d`\n\n### 四、总结一下可能会碰到的错误\n\n1. 经常会发生的错误：权限问题引起的。（这是个家常便饭，但你清楚了权限的重要性，那么你以后在linux系统上配置安装一些程序就很容易了）\n   有时候你在安装依赖文件或者执行某些命令如`hexo d hexo clean hexo g`等等会报错，那是因为你使用的当前用户权限不够。包括你在向git服务器推送项目时，你的服务器那边git用户权限不足而导致操作不了某些文件。\n\n   所以建议你把博客根目录下所有文件的使用者更改为你当前用户。当然你也可以用root用户去操作，但是经常切换用户很麻烦，或者使用sudo借用root权限也要输入密码。\n   如：假设你的博客根目录路径为`/home/jake/myblog`\n   那么使用以下命令更改权限\n\n   \n\n   \n\n   bash\n\n   ```bash\n   $ sudo chown jake:jake -R /home/jake/myblog/*\n   ```\n\n2. 访问网页出现404错误，这种很好解决，一是你的nginx路径配错了，二是访问端口未开放，ip配置不对。\n\n3. `hexo d`推送项目到git服务器时验证失败，首先确保你把本地的ssh_key密钥内容复制到了你的git服务器上了，然后删除你本地的`.ssh`文件夹下的`known_hosts`文件，重新`hexo d`,还有一种可能，你没有装推送必要的依赖插件`hexo-deployer-git`\n\n### 五、讨论以及心得\n\n有人可能会问我为什么不直接用windows作为本地进行操作，而要大费周章地去搞个虚拟机系统操作。\n\n或许你会觉得Windows上操作会更容易，当然有些小伙伴可能想用windows搭建hexo博客，这里我就不介绍了。\n\n其实用windows去搭建hexo博客的话我个人感觉有些别扭，因为你在windows操作的话在安装完git之后也是用git bash来部署安装hexo博客的，等价于用git bash 来营造一个Linux系统终端；\n\n显得有点多此一举，况且多用用Linux系统对某些小伙伴以后的学习是有帮助的。\n\n比如：虚拟机系统如何查看端口状态以及端口的开放和关闭，如何开启和关闭防火墙、虚拟机网速问题、git服务器的安装和使用、github、coding版本项目管理工具的使用、初步认识nginx负载均衡等等，这些都是我在搭建hexo中需要了解的知识。另外最重要的是我又对Linux系统有了进一步的了解\n\n### 六、参考链接\n\n1. [洪卫の博客:Hexo+Github博客搭建完全教程](https://sunhwee.com/posts/6e8839eb.html)\n2. [韦阳的博客:超详细Hexo+Github博客搭建小白教程](https://godweiyang.com/2018/04/13hexo-blog/)\n3. [Hexo 博客部署到腾讯云服务器全流程](https://blog.csdn.net/StaunchKai/article/details/82878928)\n4. [centos7开放、关闭及查看端口](https://blog.csdn.net/qq_34996727/article/details/81065961)\n5. [廖雪峰的Git教程](https://www.liaoxuefeng.com/wiki/896043488029600)\n\n[文章来源](http://www.nstop.cn/)","slug":"hexo","published":1,"date":"2021-11-24T11:00:32.119Z","updated":"2021-11-24T11:00:32.119Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwdmsuvt000eoovhby1ahxe7","content":"<h3 id=\"阅读须知：\"><a href=\"#阅读须知：\" class=\"headerlink\" title=\"阅读须知：\"></a>阅读须知：</h3><ul>\n<li><p>系统环境：</p>\n<blockquote>\n<p>本机：win10系统<br>虚拟机：CentOS7-64位（新装的）<br>云服务器：CentOS7-64位<br>注意：以下代码中<code>#</code>代表root权限，<code>$</code>代表普通用户</p>\n<p>如果你也跟我一样新装了个虚拟机centos7系统，建议先看看<a href=\"http://www.nstop.cn/2019/11/25hexo-bo-ke-da-jian/\" target=\"_blank\" rel=\"noopener\">我的另一篇博客</a></p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"一、初步搭建hexo环境-注意：我这是在虚拟机中的CentOS7系统上操作\"><a href=\"#一、初步搭建hexo环境-注意：我这是在虚拟机中的CentOS7系统上操作\" class=\"headerlink\" title=\"一、初步搭建hexo环境(注意：我这是在虚拟机中的CentOS7系统上操作)\"></a>一、初步搭建hexo环境(注意：我这是在虚拟机中的CentOS7系统上操作)</h3><h4 id=\"1、安装git（如果有则无须安装）\"><a href=\"#1、安装git（如果有则无须安装）\" class=\"headerlink\" title=\"1、安装git（如果有则无须安装）\"></a>1、安装git（如果有则无须安装）</h4><p>先介绍一种简单的方法（直接安装）但这种安装git版本过低<br><code>yum install -y git</code><br>–查看git版本<br><code>git --version</code></p>\n<p><img src=\"/2021/11/24/hexo/11-29-08.jpg\" alt=\"img\"></p>\n<blockquote>\n<p>这时候你会发现git版本会过低，我这里的是1.8.3.1<br>下面我将介绍最新版本git安装</p>\n</blockquote>\n<ol>\n<li>先卸载旧版本</li>\n</ol>\n<p>   bash</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">   $ <span class=\"token function\">sudo</span> yum remove -y <span class=\"token function\">git</span></code></pre>\n<ol start=\"2\">\n<li>安装git新版本所需的依赖包</li>\n</ol>\n<p>   bash</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">   $ <span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> -y curl-devel expat-devel gettext-devel openssl-devel zlib-devel\n   $ <span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> -y gcc perl-ExtUtils-MakeMaker</code></pre>\n<ol start=\"3\">\n<li>从我的github仓库源中下载最新git安装包并解压到<code>/usr/local/src</code>目录下</li>\n</ol>\n<p>   bash</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">   $ <span class=\"token function\">wget</span> https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.19.0.tar.gz\n   $ <span class=\"token function\">sudo</span> <span class=\"token function\">tar</span> -zxvf git-2.19.0.tar.gz -C /usr/local/src</code></pre>\n<blockquote>\n<p>如果你的机器上没有安装wget则先安装<br><code>sudo yum install -y wget</code><br>这里解释一下 <code>-y</code> 这个参数的作用：<br>无需用户确认要发生的操作（也就是经常会弹出的yes/no/Enter 直接确认跳过）</p>\n</blockquote>\n<ol start=\"4\">\n<li>编译并安装</li>\n</ol>\n<p>   bash</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">   $ <span class=\"token function\">cd</span> /usr/local/src/git-2.19.0/\n   $ <span class=\"token function\">sudo</span> <span class=\"token function\">make</span> prefix<span class=\"token operator\">=</span>/usr/local/git all <span class=\"token comment\" spellcheck=\"true\"># 编译源码</span>\n   $ <span class=\"token function\">sudo</span> <span class=\"token function\">make</span> prefix<span class=\"token operator\">=</span>/usr/local/git <span class=\"token function\">install</span> <span class=\"token comment\" spellcheck=\"true\">#安装到/usr/local/git</span></code></pre>\n<ol start=\"5\">\n<li>修改配置文件（添加环境变量）</li>\n</ol>\n<p>   bash</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">   $ <span class=\"token function\">sudo</span> <span class=\"token function\">vi</span> /etc/profile\n   <span class=\"token comment\" spellcheck=\"true\">#在文件末尾添加export PATH=/usr/local/git/bin:$PATH 保存退出</span></code></pre>\n<ol start=\"6\">\n<li>更新修改过后的配置文件</li>\n</ol>\n<p>   bash</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">   $ <span class=\"token function\">source</span> /etc/profile\n   <span class=\"token comment\" spellcheck=\"true\">#查看git版本检查一下是否安装成功</span>\n   $ <span class=\"token function\">git</span> --version</code></pre>\n<ol start=\"7\">\n<li>顺便添加你的用户和邮箱</li>\n</ol>\n<p>   bash</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">   <span class=\"token comment\" spellcheck=\"true\"># git config --global user.name \"yourname\"</span>\n   <span class=\"token comment\" spellcheck=\"true\"># git config --global user.email \"youremail\"</span></code></pre>\n<h4 id=\"2、安装nodejs\"><a href=\"#2、安装nodejs\" class=\"headerlink\" title=\"2、安装nodejs\"></a>2、安装nodejs</h4><p>在安装hexo-cli之前需要借助nodejs</p>\n<ol>\n<li>去nodejs官网下载Linux二进制64bit压缩包，当然如果你的系统是32位的，即选择32位的，这里我直接用wget命令+ url 直接下载到本系统上</li>\n</ol>\n<p>   bash</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">   <span class=\"token comment\" spellcheck=\"true\"># wget https://nodejs.org/dist/v12.13.1/node-v12.13.1-linux-x64.tar.xz</span></code></pre>\n<ol start=\"2\">\n<li>在<code>/usr/local/</code>目录下创建一个<code>nodejs</code>文件夹</li>\n</ol>\n<p>   bash</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">   <span class=\"token comment\" spellcheck=\"true\"># mkdir /usr/local/nodejs</span></code></pre>\n<ol start=\"3\">\n<li>将压缩包解压到<code>/usr/local/nodejs/</code>下</li>\n</ol>\n<p>   bash</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">   <span class=\"token comment\" spellcheck=\"true\"># tar -Jxvf node-v12.13.1-linux-x64.tar.xz -C /usr/local/nodejs</span></code></pre>\n<ol start=\"4\">\n<li><p>为nodejs添加环境变量，即将<code>/usr/local/nodejs/node-v12.13.1-linux-x64/bin</code>添加到环境变量$PATH中，当然你也可以用创建<code>软连接</code>(即windows中的快捷方式)的方式代替，只不过第二种显得有点麻烦</p>\n<ul>\n<li>查看一下当前进程的环境变量值</li>\n</ul>\n</li>\n</ol>\n<pre><code> bash\n\n ```bash\n # echo $PATH\n ```</code></pre><ul>\n<li>配置nodejs的环境</li>\n</ul>\n<pre><code> bash\n\n ```bash\n # vi /etc/profile\n ```\n\n 在文件末尾加上：`export PATH=/usr/local/nodejs/node-v12.13.1-linux-x64/bin:$PATH`保存退出并更新profile文件\n\n\n\n\n\n bash\n\n ```bash\n # source /etc/profile\n ```\n\n &gt; 这里提一下为什么要写成PATH=/usr/local/nodejs/node-v12.13.1-linux-x64/bin:$PATH\n &gt; 而不写成PATH=$PATH:/usr/local/nodejs/node-v12.13.1-linux-x64/bin\n &gt; 当执行某个命令时，如果找不到会从环境变量中去查找对应的目录下是否有该命令，而查找则是\n &gt; 按照从左到右的顺序进行查找，所以这就可以避免旧版本在新版本之前而使得新版本不能被应用的情况</code></pre><ul>\n<li>再次查看环境变量检查是否添加成功</li>\n</ul>\n<pre><code> bash\n\n ```bash\n # echo $PATH\n ```</code></pre><ol start=\"5\">\n<li>查看nodejs版本检查是否安装成功</li>\n</ol>\n<p>   bash</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">   <span class=\"token comment\" spellcheck=\"true\"># node -v</span>\n   <span class=\"token comment\" spellcheck=\"true\"># npm -v</span></code></pre>\n<h4 id=\"3、安装hexo\"><a href=\"#3、安装hexo\" class=\"headerlink\" title=\"3、安装hexo\"></a>3、安装hexo</h4><p>接下来用<code>npm</code>来安装hexo-cli,但是在这不推荐大家使用，由于安装源在国外，下载过于缓慢，所以我们可以用国内的阿里巴巴镜像源进行快速下载安装</p>\n<ol>\n<li>npm 安装方式</li>\n</ol>\n<p>   bash</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">   <span class=\"token comment\" spellcheck=\"true\"># npm install -g hexo-cli</span></code></pre>\n<ol start=\"2\">\n<li>cnpm 安装方式</li>\n</ol>\n<p>   bash</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">   <span class=\"token comment\" spellcheck=\"true\"># npm install -g cnpm --registry=https://registry.npm.taobao.org</span>\n   <span class=\"token comment\" spellcheck=\"true\"># cnpm install -g hexo-cli</span></code></pre>\n<ol start=\"3\">\n<li>查看hexo版本检查是否已安装好</li>\n</ol>\n<p>   bash</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">   <span class=\"token comment\" spellcheck=\"true\"># hexo -v</span></code></pre>\n<h4 id=\"4、用hexo生成博客框架\"><a href=\"#4、用hexo生成博客框架\" class=\"headerlink\" title=\"4、用hexo生成博客框架\"></a>4、用hexo生成博客框架</h4><ol>\n<li>随便创建一个文件夹，这个文件夹用来存放hexo框架所有文件的（换而言之这个文件夹就是你的博客根目录），然后初始化该文件</li>\n</ol>\n<p>   bash</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">   <span class=\"token comment\" spellcheck=\"true\"># mkdir myblog</span>\n   <span class=\"token comment\" spellcheck=\"true\">#这里改一下myblog的所有者和所有组(jake为你自己的用户名)</span>\n   <span class=\"token comment\" spellcheck=\"true\"># chown jake:jake -R myblog</span>\n   <span class=\"token comment\" spellcheck=\"true\"># cd myblog</span>\n   <span class=\"token comment\" spellcheck=\"true\"># hexo init</span></code></pre>\n<ol start=\"2\">\n<li>用hexo -s 命令启动该博客，接着用浏览器输入localhost:4000 访问，检查是否成功</li>\n</ol>\n<p>   bash</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">   <span class=\"token comment\" spellcheck=\"true\"># hexo s</span></code></pre>\n<ul>\n<li>默认端口4000，你也可以自定义指定端口为5000</li>\n</ul>\n<pre><code> bash\n\n ```bash\n # hexo s -p 5000\n ```</code></pre><ol start=\"3\">\n<li>另外介绍一个命令（后面要用到），用<code>hexo g</code>命令生成部署该博客（实质会生成一个public文件夹，这个文件夹下都是html静态页面）</li>\n</ol>\n<p>   bash</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">   <span class=\"token comment\" spellcheck=\"true\"># hexo g</span></code></pre>\n<h4 id=\"5、win10系统访问虚拟机端口\"><a href=\"#5、win10系统访问虚拟机端口\" class=\"headerlink\" title=\"5、win10系统访问虚拟机端口\"></a>5、win10系统访问虚拟机端口</h4><p>由于我所有hexo部署都在虚拟机系统上，怎么通过win10主机访问我的博客页面呢</p>\n<ol>\n<li>开放虚拟机CentOS系统的4000端口</li>\n</ol>\n<p>   bash</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">   <span class=\"token comment\" spellcheck=\"true\"># firewall-cmd --zone=public --add-port=4000/tcp --permanent</span></code></pre>\n<ol start=\"2\">\n<li>重启防火墙</li>\n</ol>\n<p>   bash</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">   <span class=\"token comment\" spellcheck=\"true\"># systemctl restart firewalld.service</span></code></pre>\n<ol start=\"3\">\n<li><p>接下来你就可以通过win10上的浏览器输入虚拟机ip:4000访问你的博客了，当你看到如下图所示，那么恭喜你成功完成了第一步！</p>\n<p><img src=\"/2021/11/24/hexo/11-29-09.jpg\" alt=\"img\"></p>\n</li>\n</ol>\n<h3 id=\"二、在第一步的基础上换一个华丽的主题（也就是matery），再用GitHub作为服务器来被外界访问\"><a href=\"#二、在第一步的基础上换一个华丽的主题（也就是matery），再用GitHub作为服务器来被外界访问\" class=\"headerlink\" title=\"二、在第一步的基础上换一个华丽的主题（也就是matery），再用GitHub作为服务器来被外界访问\"></a>二、在第一步的基础上换一个华丽的主题（也就是matery），再用GitHub作为服务器来被外界访问</h3><h4 id=\"1、下载matery主题\"><a href=\"#1、下载matery主题\" class=\"headerlink\" title=\"1、下载matery主题\"></a>1、下载matery主题</h4><p>从github上下载一个matery主题(当前目录下)，然后把这个文件移动到<code>myblog/themes/</code>下</p>\n<p>bash</p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token comment\" spellcheck=\"true\"># git clone https://github.com/blinkfoxhexo-theme-matery.git</span>\n<span class=\"token comment\" spellcheck=\"true\">#/home/jake/myblog是我的博客根目录，需要根据自身情况予以修改</span>\n<span class=\"token comment\" spellcheck=\"true\"># mv hexo-theme-matery /home/jake/blog/themes/</span></code></pre>\n<h4 id=\"2、修改配置文件-config-yml\"><a href=\"#2、修改配置文件-config-yml\" class=\"headerlink\" title=\"2、修改配置文件_config.yml\"></a>2、修改配置文件_config.yml</h4><p><img src=\"/2021/11/24/hexo/11-29-10.jpg\" alt=\"img\"></p>\n<h4 id=\"3、切换到myblog文件下重新启动\"><a href=\"#3、切换到myblog文件下重新启动\" class=\"headerlink\" title=\"3、切换到myblog文件下重新启动\"></a>3、切换到myblog文件下重新启动</h4><p>bash</p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token comment\" spellcheck=\"true\"># hexo s</span></code></pre>\n<p><img src=\"/2021/11/24/hexo/11-29-11.jpg\" alt=\"img\"></p>\n<h4 id=\"4、部署GitHub\"><a href=\"#4、部署GitHub\" class=\"headerlink\" title=\"4、部署GitHub\"></a>4、部署GitHub</h4><p>接下来就部署GitHub了，前提你得有个GitHub账号，没有的话去注册一个（这里不提供教程，自己百度）</p>\n<ol>\n<li><p>登录你的GitHub，创建一个仓库</p>\n<p><img src=\"/2021/11/24/hexo/11-29-12.jpg\" alt=\"img\"></p>\n</li>\n</ol>\n<ol start=\"2\">\n<li><p>按照规则为你的仓库起名（这个名字就是别人可以访问你博客的网址）</p>\n<p><img src=\"/2021/11/24/hexo/11-29-13.jpg\" alt=\"img\"></p>\n<p><img src=\"/2021/11/24/hexo/11-29-14.jpg\" alt=\"img\"></p>\n</li>\n</ol>\n<ol start=\"3\">\n<li>打开<code>_config.yml</code>配置文件，配置你的仓库</li>\n</ol>\n<p>   bash</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">   <span class=\"token comment\" spellcheck=\"true\"># vi _config.yml</span></code></pre>\n<p>   <img src=\"/2021/11/24/hexo/11-29-15.jpg\" alt=\"img\"></p>\n<ol start=\"4\">\n<li>因为需要将项目推送到GitHub，所以需要安装一个插件</li>\n</ol>\n<p>   bash</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">   <span class=\"token comment\" spellcheck=\"true\"># cnpm install --save hexo-deployer-git</span></code></pre>\n<ol start=\"5\">\n<li>装好后直接用hexo g 生成博客文件，再用hexo d 推送项目到github上</li>\n</ol>\n<p>   bash</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">   <span class=\"token comment\" spellcheck=\"true\"># hexo g</span>\n   <span class=\"token comment\" spellcheck=\"true\"># hexo d</span></code></pre>\n<p>   <img src=\"/2021/11/24/hexo/11-29-16.jpg\" alt=\"img\"></p>\n<ol start=\"6\">\n<li><p>换用ssh公钥<br>你会发现每次执行hexo d 推送到github上时需要输入账号和密码，这有点令人不耐烦，因此下面给大家展示一种用ssh公钥的方法去部署github</p>\n<ul>\n<li>在虚拟机CentOS系统上下载ssh key</li>\n</ul>\n</li>\n</ol>\n<pre><code> bash\n\n ```bash\n # ssh-keygen -t rsa\n #一路回车即可，然后查看/root下的文件夹\n # ls -al /root\n ```</code></pre><ul>\n<li><p>这时候你会发现在root下有一个隐藏文件.ssh，打开.ssh下的</p>\n<pre><code>id_rsa.pub</code></pre><p>文件，复制此文件的全部内容,粘贴到下图所示位置</p>\n<p>打开github</p>\n<p><img src=\"/2021/11/24/hexo/11-29-17.jpg\" alt=\"img\"></p>\n<p><img src=\"/2021/11/24/hexo/11-29-18.jpg\" alt=\"img\"></p>\n<p><img src=\"/2021/11/24/hexo/11-29-19.jpg\" alt=\"img\"></p>\n</li>\n<li><p>相应的也要修改</p>\n<pre><code>_config.yml</code></pre><p>配置文件</p>\n<p><img src=\"/2021/11/24/hexo/11-29-22.jpg\" alt=\"img\"></p>\n<p><img src=\"/2021/11/24/hexo/11-29-21.jpg\" alt=\"img\"></p>\n<p><img src=\"/2021/11/24/hexo/11-29-20.jpg\" alt=\"img\"></p>\n</li>\n</ul>\n<h4 id=\"5、收获成功的喜悦\"><a href=\"#5、收获成功的喜悦\" class=\"headerlink\" title=\"5、收获成功的喜悦\"></a>5、收获成功的喜悦</h4><p>当你看到这里恭喜你已经成功完成了第一份属于自己的博客了!但你会发现，你通过github访问你的博客会很卡，简单说一下原因。github服务器在国外，所以访问速度很慢，这里提供一个简单的解决办法</p>\n<ol>\n<li><p>可以用国内的coding，类似github，去coding官网注册一个账号，记得要实名认证，然后仿照github的操作将ssh key内容粘贴到指定区域</p>\n<p><img src=\"/2021/11/24/hexo/11-29-24.jpg\" alt=\"img\"></p>\n<p><img src=\"/2021/11/24/hexo/11-29-25.jpg\" alt=\"img\"></p>\n</li>\n<li><p>同样修改</p>\n<pre><code>_config.yml</code></pre><p>配置文件</p>\n<p><img src=\"/2021/11/24/hexo/11-29-23.jpg\" alt=\"img\"></p>\n</li>\n<li><p>用<code>hexo clean</code>清理一下 ==&gt; <code>hexo g</code>生成 ==&gt; <code>hexo d</code>部署推送博客</p>\n</li>\n<li><p>接下来登录coding账号，查看仓库是存在项目，确定之后开始创建静态网站，步骤如下图所示</p>\n<p><img src=\"/2021/11/24/hexo/11-29-26.jpg\" alt=\"img\"></p>\n<p><img src=\"/2021/11/24/hexo/11-29-27.jpg\" alt=\"img\"></p>\n<p><img src=\"/2021/11/24/hexo/11-29-28.jpg\" alt=\"img\"></p>\n</li>\n</ol>\n<h4 id=\"6、温馨提示\"><a href=\"#6、温馨提示\" class=\"headerlink\" title=\"6、温馨提示\"></a>6、温馨提示</h4><p>最后温馨提示一下，matery主题虽然应用到hexo框架上了，但仍需要改动一些配置文件，根据每个人不同的喜好可以制定自己独特的博客，至于个性化设置这里就不介绍了，需要的小伙伴可以去参考以下链接，看看大佬们是如何设计优化matery主题和hexo博客框架的。</p>\n<ul>\n<li>参考链接:<br><a href=\"https://sunhwee.com/posts/6e8839eb.html\" target=\"_blank\" rel=\"noopener\">洪卫の博客:Hexo+Github博客搭建完全教程</a><br><a href=\"https://godweiyang.com/2018/04/13hexo-blog/\" target=\"_blank\" rel=\"noopener\">韦阳的博客:超详细Hexo+Github博客搭建小白教程</a></li>\n</ul>\n<blockquote>\n<p>如果实在不懂的小伙伴可以在下方留言，也可以参考一下这个大佬的视频<a href=\"https://www.bilibili.com/video/av44544186/\" target=\"_blank\" rel=\"noopener\">hexo博客搭建</a></p>\n</blockquote>\n<h3 id=\"三、将第二步中的github和coding替换为自己的云服务器，下面介绍如何部署好云服务器\"><a href=\"#三、将第二步中的github和coding替换为自己的云服务器，下面介绍如何部署好云服务器\" class=\"headerlink\" title=\"三、将第二步中的github和coding替换为自己的云服务器，下面介绍如何部署好云服务器\"></a>三、将第二步中的github和coding替换为自己的云服务器，下面介绍如何部署好云服务器</h3><h4 id=\"1-创建git用户\"><a href=\"#1-创建git用户\" class=\"headerlink\" title=\"1. 创建git用户\"></a>1. 创建git用户</h4><p>当你做完前面两大步，这一步就相当的简单，原理都一样，首先在你的云服务机上，创建一个git用户,并指定密码</p>\n<p>bash</p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token comment\" spellcheck=\"true\"># useradd git</span>\n<span class=\"token comment\" spellcheck=\"true\"># passwd git</span></code></pre>\n<h4 id=\"2-部署密钥到服务器上\"><a href=\"#2-部署密钥到服务器上\" class=\"headerlink\" title=\"2. 部署密钥到服务器上\"></a>2. 部署密钥到服务器上</h4><p>切换到git用户，创建<code>.ssh</code>文件夹，以及在<code>.ssh</code>下创建<code>authorized_keys</code>文件,将ssh_key（也就是第二大步里面的那个密钥内容）粘贴到<code>authorized_keys</code>文件中</p>\n<p>bash</p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token comment\" spellcheck=\"true\"># su git</span>\n<span class=\"token comment\" spellcheck=\"true\"># 切换到git用户的家目录</span>\n<span class=\"token comment\" spellcheck=\"true\"># cd ~  </span>\n$ <span class=\"token function\">mkdir</span> .ssh\n$ vim ~/.ssh/autorized_keys <span class=\"token comment\" spellcheck=\"true\"># wq保存退出</span>\n<span class=\"token comment\" spellcheck=\"true\"># 修改一下.ssh 和 authorized_key 的权限，保证不被其他用户或用户组访问以及修改</span>\n$ <span class=\"token function\">chmod</span> 600 ~/.ssh/authorized_key\n$ <span class=\"token function\">chmod</span> 700 ~/.ssh </code></pre>\n<blockquote>\n<p>没有安装vim的 安装一下： <code>yum install -y vim</code></p>\n</blockquote>\n<h4 id=\"3-安装nginx\"><a href=\"#3-安装nginx\" class=\"headerlink\" title=\"3. 安装nginx\"></a>3. 安装nginx</h4><p>bash</p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token comment\" spellcheck=\"true\"># yum install -y nginx</span>\n<span class=\"token comment\" spellcheck=\"true\"># systemctl start nginx.service # 启动nginx服务</span></code></pre>\n<p>当你通过外网访问你的服务器ip可以看到nginx的欢迎页面就说明你安装成功了。这里说一下，有可能你显示的时centos欢迎页面，这也没问题。（我的就是）<br>打开<code>/etc/nginx/nginx.conf</code>配置文件（如果找不到，你也可以用<code>nginx -t</code>查看配置文件在哪）</p>\n<p><img src=\"/2021/11/24/hexo/11-29-29.jpg\" alt=\"img\"></p>\n<p>接下来创建你的博客根目录(我创建的根目录是<code>/home/git/blog</code>)</p>\n<p>bash</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">mkdir</span> ~/blog</code></pre>\n<p>修改nginx配置文件如下（注意以下两个地方）<br>第一个是权限问题</p>\n<p><img src=\"/2021/11/24/hexo/11-29-31.jpg\" alt=\"img\"></p>\n<p>第二个是访问路径</p>\n<p><img src=\"/2021/11/24/hexo/11-29-30.jpg\" alt=\"img\"></p>\n<p>配置好就重启一下nginx</p>\n<p>bash</p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token comment\" spellcheck=\"true\"># systemctl restart nginx.service</span></code></pre>\n<h4 id=\"4-创建git仓库\"><a href=\"#4-创建git仓库\" class=\"headerlink\" title=\"4.创建git仓库\"></a>4.创建git仓库</h4><p>创建git仓库以及用hooks钩子同步到你的博客根目录</p>\n<p>bash</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">cd</span> ~\n$ <span class=\"token function\">git</span> init --bare blog.git\n$ <span class=\"token function\">ls</span> -l blog.git\n<span class=\"token comment\" spellcheck=\"true\"># 修改一下权限</span>\n<span class=\"token comment\" spellcheck=\"true\"># chown git:git -R blog.git</span>\n<span class=\"token comment\" spellcheck=\"true\"># 创建post-receive文件</span>\n$ vim blog.git/hooks/post-receive</code></pre>\n<p>添加以下内容：</p>\n<blockquote>\n<p>#!/bin/sh<br>git –work-tree=/home/git/blog –git-dir=/home/git/blog.git checkout -f<br><code>/home/git/blog</code>这是你刚刚创建的博客根目录<br>赋予其执行权限</p>\n</blockquote>\n<p>bash</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">chmod</span> +x /home/git/blog.git/hooks/post-receive</code></pre>\n<p>接下来创建git-receive-pack和git-upload-pack软连接,以防执行hexo d 命令时报错找不到</p>\n<p>bash</p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token comment\" spellcheck=\"true\"># sudo ln -s /usr/local/git/bin/git-receive-pack  /usr/bin/git-recei</span>\n<span class=\"token comment\" spellcheck=\"true\"># sudo ln -s /usr/local/git/bin/git-upload-pack  /usr/bin/git-upload-pack</span></code></pre>\n<h4 id=\"5-修改配置文件\"><a href=\"#5-修改配置文件\" class=\"headerlink\" title=\"5.修改配置文件\"></a>5.修改配置文件</h4><p>到本地的虚拟机系统上修改博客<code>_config.yml</code>配置文件<br>添加 <code>git@yourserver_ip:/home/git/blog.git</code>git服务器地址</p>\n<p><img src=\"/2021/11/24/hexo/11-29-32.jpg\" alt=\"img\"></p>\n<blockquote>\n<p>特别注意：<br>如果你之前跟我一样配置三个git服务器（github、coding、自己的云服务器）,那么你就要删除一下本地系统中的<code>.ssh</code>文件中的<code>known_hosts</code><br>只要你更改了<code>_config.yml</code>文件中git服务器地址，最好删除一下<code>known_hosts</code><br>执行<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code></p>\n</blockquote>\n<h3 id=\"四、总结一下可能会碰到的错误\"><a href=\"#四、总结一下可能会碰到的错误\" class=\"headerlink\" title=\"四、总结一下可能会碰到的错误\"></a>四、总结一下可能会碰到的错误</h3><ol>\n<li><p>经常会发生的错误：权限问题引起的。（这是个家常便饭，但你清楚了权限的重要性，那么你以后在linux系统上配置安装一些程序就很容易了）<br>有时候你在安装依赖文件或者执行某些命令如<code>hexo d hexo clean hexo g</code>等等会报错，那是因为你使用的当前用户权限不够。包括你在向git服务器推送项目时，你的服务器那边git用户权限不足而导致操作不了某些文件。</p>\n<p>所以建议你把博客根目录下所有文件的使用者更改为你当前用户。当然你也可以用root用户去操作，但是经常切换用户很麻烦，或者使用sudo借用root权限也要输入密码。<br>如：假设你的博客根目录路径为<code>/home/jake/myblog</code><br>那么使用以下命令更改权限</p>\n</li>\n</ol>\n<p>   bash</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">   $ <span class=\"token function\">sudo</span> <span class=\"token function\">chown</span> jake:jake -R /home/jake/myblog/*</code></pre>\n<ol start=\"2\">\n<li><p>访问网页出现404错误，这种很好解决，一是你的nginx路径配错了，二是访问端口未开放，ip配置不对。</p>\n</li>\n<li><p><code>hexo d</code>推送项目到git服务器时验证失败，首先确保你把本地的ssh_key密钥内容复制到了你的git服务器上了，然后删除你本地的<code>.ssh</code>文件夹下的<code>known_hosts</code>文件，重新<code>hexo d</code>,还有一种可能，你没有装推送必要的依赖插件<code>hexo-deployer-git</code></p>\n</li>\n</ol>\n<h3 id=\"五、讨论以及心得\"><a href=\"#五、讨论以及心得\" class=\"headerlink\" title=\"五、讨论以及心得\"></a>五、讨论以及心得</h3><p>有人可能会问我为什么不直接用windows作为本地进行操作，而要大费周章地去搞个虚拟机系统操作。</p>\n<p>或许你会觉得Windows上操作会更容易，当然有些小伙伴可能想用windows搭建hexo博客，这里我就不介绍了。</p>\n<p>其实用windows去搭建hexo博客的话我个人感觉有些别扭，因为你在windows操作的话在安装完git之后也是用git bash来部署安装hexo博客的，等价于用git bash 来营造一个Linux系统终端；</p>\n<p>显得有点多此一举，况且多用用Linux系统对某些小伙伴以后的学习是有帮助的。</p>\n<p>比如：虚拟机系统如何查看端口状态以及端口的开放和关闭，如何开启和关闭防火墙、虚拟机网速问题、git服务器的安装和使用、github、coding版本项目管理工具的使用、初步认识nginx负载均衡等等，这些都是我在搭建hexo中需要了解的知识。另外最重要的是我又对Linux系统有了进一步的了解</p>\n<h3 id=\"六、参考链接\"><a href=\"#六、参考链接\" class=\"headerlink\" title=\"六、参考链接\"></a>六、参考链接</h3><ol>\n<li><a href=\"https://sunhwee.com/posts/6e8839eb.html\" target=\"_blank\" rel=\"noopener\">洪卫の博客:Hexo+Github博客搭建完全教程</a></li>\n<li><a href=\"https://godweiyang.com/2018/04/13hexo-blog/\" target=\"_blank\" rel=\"noopener\">韦阳的博客:超详细Hexo+Github博客搭建小白教程</a></li>\n<li><a href=\"https://blog.csdn.net/StaunchKai/article/details/82878928\" target=\"_blank\" rel=\"noopener\">Hexo 博客部署到腾讯云服务器全流程</a></li>\n<li><a href=\"https://blog.csdn.net/qq_34996727/article/details/81065961\" target=\"_blank\" rel=\"noopener\">centos7开放、关闭及查看端口</a></li>\n<li><a href=\"https://www.liaoxuefeng.com/wiki/896043488029600\" target=\"_blank\" rel=\"noopener\">廖雪峰的Git教程</a></li>\n</ol>\n<p><a href=\"http://www.nstop.cn/\" target=\"_blank\" rel=\"noopener\">文章来源</a></p>\n","site":{"data":{"friends":[{"avatar":"http://q1.qlogo.cn/g?b=qq&nk=2750360683&s=640","name":"核心","introduction":"来自山东的一位普通高中生,喜欢捣鼓2333，爱好编程（新手）","url":"http://www.emtips.net/","title":"Piu~"},{"avatar":"https://blobscdn.gitbook.com/v0/b/gitbook-28427.appspot.com/o/spaces%2F-Lw6uUvSmToYpKvgzoM5%2Favatar.png?generation=1576386325104024&alt=media","name":"SRO","introduction":"欢迎来到SRO知识库,您在这里可以看到大多数的SRO内部，外部资料","url":"https://sromc.cn/","title":"Piu~"},{"avatar":"http://q1.qlogo.cn/g?b=qq&nk=1692565761&s=640","name":"河南省商务中等职业学校","introduction":"网络搭建竞赛组","url":"https://blinkfox.github.io/","title":"Piu~"}]}},"excerpt":"","more":"<h3 id=\"阅读须知：\"><a href=\"#阅读须知：\" class=\"headerlink\" title=\"阅读须知：\"></a>阅读须知：</h3><ul>\n<li><p>系统环境：</p>\n<blockquote>\n<p>本机：win10系统<br>虚拟机：CentOS7-64位（新装的）<br>云服务器：CentOS7-64位<br>注意：以下代码中<code>#</code>代表root权限，<code>$</code>代表普通用户</p>\n<p>如果你也跟我一样新装了个虚拟机centos7系统，建议先看看<a href=\"http://www.nstop.cn/2019/11/25hexo-bo-ke-da-jian/\" target=\"_blank\" rel=\"noopener\">我的另一篇博客</a></p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"一、初步搭建hexo环境-注意：我这是在虚拟机中的CentOS7系统上操作\"><a href=\"#一、初步搭建hexo环境-注意：我这是在虚拟机中的CentOS7系统上操作\" class=\"headerlink\" title=\"一、初步搭建hexo环境(注意：我这是在虚拟机中的CentOS7系统上操作)\"></a>一、初步搭建hexo环境(注意：我这是在虚拟机中的CentOS7系统上操作)</h3><h4 id=\"1、安装git（如果有则无须安装）\"><a href=\"#1、安装git（如果有则无须安装）\" class=\"headerlink\" title=\"1、安装git（如果有则无须安装）\"></a>1、安装git（如果有则无须安装）</h4><p>先介绍一种简单的方法（直接安装）但这种安装git版本过低<br><code>yum install -y git</code><br>–查看git版本<br><code>git --version</code></p>\n<p><img src=\"/2021/11/24/hexo/11-29-08.jpg\" alt=\"img\"></p>\n<blockquote>\n<p>这时候你会发现git版本会过低，我这里的是1.8.3.1<br>下面我将介绍最新版本git安装</p>\n</blockquote>\n<ol>\n<li>先卸载旧版本</li>\n</ol>\n<p>   bash</p>\n<pre><code class=\"bash\">   $ sudo yum remove -y git</code></pre>\n<ol start=\"2\">\n<li>安装git新版本所需的依赖包</li>\n</ol>\n<p>   bash</p>\n<pre><code class=\"bash\">   $ sudo yum install -y curl-devel expat-devel gettext-devel openssl-devel zlib-devel\n   $ sudo yum install -y gcc perl-ExtUtils-MakeMaker</code></pre>\n<ol start=\"3\">\n<li>从我的github仓库源中下载最新git安装包并解压到<code>/usr/local/src</code>目录下</li>\n</ol>\n<p>   bash</p>\n<pre><code class=\"bash\">   $ wget https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.19.0.tar.gz\n   $ sudo tar -zxvf git-2.19.0.tar.gz -C /usr/local/src</code></pre>\n<blockquote>\n<p>如果你的机器上没有安装wget则先安装<br><code>sudo yum install -y wget</code><br>这里解释一下 <code>-y</code> 这个参数的作用：<br>无需用户确认要发生的操作（也就是经常会弹出的yes/no/Enter 直接确认跳过）</p>\n</blockquote>\n<ol start=\"4\">\n<li>编译并安装</li>\n</ol>\n<p>   bash</p>\n<pre><code class=\"bash\">   $ cd /usr/local/src/git-2.19.0/\n   $ sudo make prefix=/usr/local/git all # 编译源码\n   $ sudo make prefix=/usr/local/git install #安装到/usr/local/git</code></pre>\n<ol start=\"5\">\n<li>修改配置文件（添加环境变量）</li>\n</ol>\n<p>   bash</p>\n<pre><code class=\"bash\">   $ sudo vi /etc/profile\n   #在文件末尾添加export PATH=/usr/local/git/bin:$PATH 保存退出</code></pre>\n<ol start=\"6\">\n<li>更新修改过后的配置文件</li>\n</ol>\n<p>   bash</p>\n<pre><code class=\"bash\">   $ source /etc/profile\n   #查看git版本检查一下是否安装成功\n   $ git --version</code></pre>\n<ol start=\"7\">\n<li>顺便添加你的用户和邮箱</li>\n</ol>\n<p>   bash</p>\n<pre><code class=\"bash\">   # git config --global user.name &quot;yourname&quot;\n   # git config --global user.email &quot;youremail&quot;</code></pre>\n<h4 id=\"2、安装nodejs\"><a href=\"#2、安装nodejs\" class=\"headerlink\" title=\"2、安装nodejs\"></a>2、安装nodejs</h4><p>在安装hexo-cli之前需要借助nodejs</p>\n<ol>\n<li>去nodejs官网下载Linux二进制64bit压缩包，当然如果你的系统是32位的，即选择32位的，这里我直接用wget命令+ url 直接下载到本系统上</li>\n</ol>\n<p>   bash</p>\n<pre><code class=\"bash\">   # wget https://nodejs.org/dist/v12.13.1/node-v12.13.1-linux-x64.tar.xz</code></pre>\n<ol start=\"2\">\n<li>在<code>/usr/local/</code>目录下创建一个<code>nodejs</code>文件夹</li>\n</ol>\n<p>   bash</p>\n<pre><code class=\"bash\">   # mkdir /usr/local/nodejs</code></pre>\n<ol start=\"3\">\n<li>将压缩包解压到<code>/usr/local/nodejs/</code>下</li>\n</ol>\n<p>   bash</p>\n<pre><code class=\"bash\">   # tar -Jxvf node-v12.13.1-linux-x64.tar.xz -C /usr/local/nodejs</code></pre>\n<ol start=\"4\">\n<li><p>为nodejs添加环境变量，即将<code>/usr/local/nodejs/node-v12.13.1-linux-x64/bin</code>添加到环境变量$PATH中，当然你也可以用创建<code>软连接</code>(即windows中的快捷方式)的方式代替，只不过第二种显得有点麻烦</p>\n<ul>\n<li>查看一下当前进程的环境变量值</li>\n</ul>\n</li>\n</ol>\n<pre><code> bash\n\n ```bash\n # echo $PATH\n ```</code></pre><ul>\n<li>配置nodejs的环境</li>\n</ul>\n<pre><code> bash\n\n ```bash\n # vi /etc/profile\n ```\n\n 在文件末尾加上：`export PATH=/usr/local/nodejs/node-v12.13.1-linux-x64/bin:$PATH`保存退出并更新profile文件\n\n\n\n\n\n bash\n\n ```bash\n # source /etc/profile\n ```\n\n &gt; 这里提一下为什么要写成PATH=/usr/local/nodejs/node-v12.13.1-linux-x64/bin:$PATH\n &gt; 而不写成PATH=$PATH:/usr/local/nodejs/node-v12.13.1-linux-x64/bin\n &gt; 当执行某个命令时，如果找不到会从环境变量中去查找对应的目录下是否有该命令，而查找则是\n &gt; 按照从左到右的顺序进行查找，所以这就可以避免旧版本在新版本之前而使得新版本不能被应用的情况</code></pre><ul>\n<li>再次查看环境变量检查是否添加成功</li>\n</ul>\n<pre><code> bash\n\n ```bash\n # echo $PATH\n ```</code></pre><ol start=\"5\">\n<li>查看nodejs版本检查是否安装成功</li>\n</ol>\n<p>   bash</p>\n<pre><code class=\"bash\">   # node -v\n   # npm -v</code></pre>\n<h4 id=\"3、安装hexo\"><a href=\"#3、安装hexo\" class=\"headerlink\" title=\"3、安装hexo\"></a>3、安装hexo</h4><p>接下来用<code>npm</code>来安装hexo-cli,但是在这不推荐大家使用，由于安装源在国外，下载过于缓慢，所以我们可以用国内的阿里巴巴镜像源进行快速下载安装</p>\n<ol>\n<li>npm 安装方式</li>\n</ol>\n<p>   bash</p>\n<pre><code class=\"bash\">   # npm install -g hexo-cli</code></pre>\n<ol start=\"2\">\n<li>cnpm 安装方式</li>\n</ol>\n<p>   bash</p>\n<pre><code class=\"bash\">   # npm install -g cnpm --registry=https://registry.npm.taobao.org\n   # cnpm install -g hexo-cli</code></pre>\n<ol start=\"3\">\n<li>查看hexo版本检查是否已安装好</li>\n</ol>\n<p>   bash</p>\n<pre><code class=\"bash\">   # hexo -v</code></pre>\n<h4 id=\"4、用hexo生成博客框架\"><a href=\"#4、用hexo生成博客框架\" class=\"headerlink\" title=\"4、用hexo生成博客框架\"></a>4、用hexo生成博客框架</h4><ol>\n<li>随便创建一个文件夹，这个文件夹用来存放hexo框架所有文件的（换而言之这个文件夹就是你的博客根目录），然后初始化该文件</li>\n</ol>\n<p>   bash</p>\n<pre><code class=\"bash\">   # mkdir myblog\n   #这里改一下myblog的所有者和所有组(jake为你自己的用户名)\n   # chown jake:jake -R myblog\n   # cd myblog\n   # hexo init</code></pre>\n<ol start=\"2\">\n<li>用hexo -s 命令启动该博客，接着用浏览器输入localhost:4000 访问，检查是否成功</li>\n</ol>\n<p>   bash</p>\n<pre><code class=\"bash\">   # hexo s</code></pre>\n<ul>\n<li>默认端口4000，你也可以自定义指定端口为5000</li>\n</ul>\n<pre><code> bash\n\n ```bash\n # hexo s -p 5000\n ```</code></pre><ol start=\"3\">\n<li>另外介绍一个命令（后面要用到），用<code>hexo g</code>命令生成部署该博客（实质会生成一个public文件夹，这个文件夹下都是html静态页面）</li>\n</ol>\n<p>   bash</p>\n<pre><code class=\"bash\">   # hexo g</code></pre>\n<h4 id=\"5、win10系统访问虚拟机端口\"><a href=\"#5、win10系统访问虚拟机端口\" class=\"headerlink\" title=\"5、win10系统访问虚拟机端口\"></a>5、win10系统访问虚拟机端口</h4><p>由于我所有hexo部署都在虚拟机系统上，怎么通过win10主机访问我的博客页面呢</p>\n<ol>\n<li>开放虚拟机CentOS系统的4000端口</li>\n</ol>\n<p>   bash</p>\n<pre><code class=\"bash\">   # firewall-cmd --zone=public --add-port=4000/tcp --permanent</code></pre>\n<ol start=\"2\">\n<li>重启防火墙</li>\n</ol>\n<p>   bash</p>\n<pre><code class=\"bash\">   # systemctl restart firewalld.service</code></pre>\n<ol start=\"3\">\n<li><p>接下来你就可以通过win10上的浏览器输入虚拟机ip:4000访问你的博客了，当你看到如下图所示，那么恭喜你成功完成了第一步！</p>\n<p><img src=\"/2021/11/24/hexo/11-29-09.jpg\" alt=\"img\"></p>\n</li>\n</ol>\n<h3 id=\"二、在第一步的基础上换一个华丽的主题（也就是matery），再用GitHub作为服务器来被外界访问\"><a href=\"#二、在第一步的基础上换一个华丽的主题（也就是matery），再用GitHub作为服务器来被外界访问\" class=\"headerlink\" title=\"二、在第一步的基础上换一个华丽的主题（也就是matery），再用GitHub作为服务器来被外界访问\"></a>二、在第一步的基础上换一个华丽的主题（也就是matery），再用GitHub作为服务器来被外界访问</h3><h4 id=\"1、下载matery主题\"><a href=\"#1、下载matery主题\" class=\"headerlink\" title=\"1、下载matery主题\"></a>1、下载matery主题</h4><p>从github上下载一个matery主题(当前目录下)，然后把这个文件移动到<code>myblog/themes/</code>下</p>\n<p>bash</p>\n<pre><code class=\"bash\"># git clone https://github.com/blinkfoxhexo-theme-matery.git\n#/home/jake/myblog是我的博客根目录，需要根据自身情况予以修改\n# mv hexo-theme-matery /home/jake/blog/themes/</code></pre>\n<h4 id=\"2、修改配置文件-config-yml\"><a href=\"#2、修改配置文件-config-yml\" class=\"headerlink\" title=\"2、修改配置文件_config.yml\"></a>2、修改配置文件_config.yml</h4><p><img src=\"/2021/11/24/hexo/11-29-10.jpg\" alt=\"img\"></p>\n<h4 id=\"3、切换到myblog文件下重新启动\"><a href=\"#3、切换到myblog文件下重新启动\" class=\"headerlink\" title=\"3、切换到myblog文件下重新启动\"></a>3、切换到myblog文件下重新启动</h4><p>bash</p>\n<pre><code class=\"bash\"># hexo s</code></pre>\n<p><img src=\"/2021/11/24/hexo/11-29-11.jpg\" alt=\"img\"></p>\n<h4 id=\"4、部署GitHub\"><a href=\"#4、部署GitHub\" class=\"headerlink\" title=\"4、部署GitHub\"></a>4、部署GitHub</h4><p>接下来就部署GitHub了，前提你得有个GitHub账号，没有的话去注册一个（这里不提供教程，自己百度）</p>\n<ol>\n<li><p>登录你的GitHub，创建一个仓库</p>\n<p><img src=\"/2021/11/24/hexo/11-29-12.jpg\" alt=\"img\"></p>\n</li>\n</ol>\n<ol start=\"2\">\n<li><p>按照规则为你的仓库起名（这个名字就是别人可以访问你博客的网址）</p>\n<p><img src=\"/2021/11/24/hexo/11-29-13.jpg\" alt=\"img\"></p>\n<p><img src=\"/2021/11/24/hexo/11-29-14.jpg\" alt=\"img\"></p>\n</li>\n</ol>\n<ol start=\"3\">\n<li>打开<code>_config.yml</code>配置文件，配置你的仓库</li>\n</ol>\n<p>   bash</p>\n<pre><code class=\"bash\">   # vi _config.yml</code></pre>\n<p>   <img src=\"/2021/11/24/hexo/11-29-15.jpg\" alt=\"img\"></p>\n<ol start=\"4\">\n<li>因为需要将项目推送到GitHub，所以需要安装一个插件</li>\n</ol>\n<p>   bash</p>\n<pre><code class=\"bash\">   # cnpm install --save hexo-deployer-git</code></pre>\n<ol start=\"5\">\n<li>装好后直接用hexo g 生成博客文件，再用hexo d 推送项目到github上</li>\n</ol>\n<p>   bash</p>\n<pre><code class=\"bash\">   # hexo g\n   # hexo d</code></pre>\n<p>   <img src=\"/2021/11/24/hexo/11-29-16.jpg\" alt=\"img\"></p>\n<ol start=\"6\">\n<li><p>换用ssh公钥<br>你会发现每次执行hexo d 推送到github上时需要输入账号和密码，这有点令人不耐烦，因此下面给大家展示一种用ssh公钥的方法去部署github</p>\n<ul>\n<li>在虚拟机CentOS系统上下载ssh key</li>\n</ul>\n</li>\n</ol>\n<pre><code> bash\n\n ```bash\n # ssh-keygen -t rsa\n #一路回车即可，然后查看/root下的文件夹\n # ls -al /root\n ```</code></pre><ul>\n<li><p>这时候你会发现在root下有一个隐藏文件.ssh，打开.ssh下的</p>\n<pre><code>id_rsa.pub</code></pre><p>文件，复制此文件的全部内容,粘贴到下图所示位置</p>\n<p>打开github</p>\n<p><img src=\"/2021/11/24/hexo/11-29-17.jpg\" alt=\"img\"></p>\n<p><img src=\"/2021/11/24/hexo/11-29-18.jpg\" alt=\"img\"></p>\n<p><img src=\"/2021/11/24/hexo/11-29-19.jpg\" alt=\"img\"></p>\n</li>\n<li><p>相应的也要修改</p>\n<pre><code>_config.yml</code></pre><p>配置文件</p>\n<p><img src=\"/2021/11/24/hexo/11-29-22.jpg\" alt=\"img\"></p>\n<p><img src=\"/2021/11/24/hexo/11-29-21.jpg\" alt=\"img\"></p>\n<p><img src=\"/2021/11/24/hexo/11-29-20.jpg\" alt=\"img\"></p>\n</li>\n</ul>\n<h4 id=\"5、收获成功的喜悦\"><a href=\"#5、收获成功的喜悦\" class=\"headerlink\" title=\"5、收获成功的喜悦\"></a>5、收获成功的喜悦</h4><p>当你看到这里恭喜你已经成功完成了第一份属于自己的博客了!但你会发现，你通过github访问你的博客会很卡，简单说一下原因。github服务器在国外，所以访问速度很慢，这里提供一个简单的解决办法</p>\n<ol>\n<li><p>可以用国内的coding，类似github，去coding官网注册一个账号，记得要实名认证，然后仿照github的操作将ssh key内容粘贴到指定区域</p>\n<p><img src=\"/2021/11/24/hexo/11-29-24.jpg\" alt=\"img\"></p>\n<p><img src=\"/2021/11/24/hexo/11-29-25.jpg\" alt=\"img\"></p>\n</li>\n<li><p>同样修改</p>\n<pre><code>_config.yml</code></pre><p>配置文件</p>\n<p><img src=\"/2021/11/24/hexo/11-29-23.jpg\" alt=\"img\"></p>\n</li>\n<li><p>用<code>hexo clean</code>清理一下 ==&gt; <code>hexo g</code>生成 ==&gt; <code>hexo d</code>部署推送博客</p>\n</li>\n<li><p>接下来登录coding账号，查看仓库是存在项目，确定之后开始创建静态网站，步骤如下图所示</p>\n<p><img src=\"/2021/11/24/hexo/11-29-26.jpg\" alt=\"img\"></p>\n<p><img src=\"/2021/11/24/hexo/11-29-27.jpg\" alt=\"img\"></p>\n<p><img src=\"/2021/11/24/hexo/11-29-28.jpg\" alt=\"img\"></p>\n</li>\n</ol>\n<h4 id=\"6、温馨提示\"><a href=\"#6、温馨提示\" class=\"headerlink\" title=\"6、温馨提示\"></a>6、温馨提示</h4><p>最后温馨提示一下，matery主题虽然应用到hexo框架上了，但仍需要改动一些配置文件，根据每个人不同的喜好可以制定自己独特的博客，至于个性化设置这里就不介绍了，需要的小伙伴可以去参考以下链接，看看大佬们是如何设计优化matery主题和hexo博客框架的。</p>\n<ul>\n<li>参考链接:<br><a href=\"https://sunhwee.com/posts/6e8839eb.html\" target=\"_blank\" rel=\"noopener\">洪卫の博客:Hexo+Github博客搭建完全教程</a><br><a href=\"https://godweiyang.com/2018/04/13hexo-blog/\" target=\"_blank\" rel=\"noopener\">韦阳的博客:超详细Hexo+Github博客搭建小白教程</a></li>\n</ul>\n<blockquote>\n<p>如果实在不懂的小伙伴可以在下方留言，也可以参考一下这个大佬的视频<a href=\"https://www.bilibili.com/video/av44544186/\" target=\"_blank\" rel=\"noopener\">hexo博客搭建</a></p>\n</blockquote>\n<h3 id=\"三、将第二步中的github和coding替换为自己的云服务器，下面介绍如何部署好云服务器\"><a href=\"#三、将第二步中的github和coding替换为自己的云服务器，下面介绍如何部署好云服务器\" class=\"headerlink\" title=\"三、将第二步中的github和coding替换为自己的云服务器，下面介绍如何部署好云服务器\"></a>三、将第二步中的github和coding替换为自己的云服务器，下面介绍如何部署好云服务器</h3><h4 id=\"1-创建git用户\"><a href=\"#1-创建git用户\" class=\"headerlink\" title=\"1. 创建git用户\"></a>1. 创建git用户</h4><p>当你做完前面两大步，这一步就相当的简单，原理都一样，首先在你的云服务机上，创建一个git用户,并指定密码</p>\n<p>bash</p>\n<pre><code class=\"bash\"># useradd git\n# passwd git</code></pre>\n<h4 id=\"2-部署密钥到服务器上\"><a href=\"#2-部署密钥到服务器上\" class=\"headerlink\" title=\"2. 部署密钥到服务器上\"></a>2. 部署密钥到服务器上</h4><p>切换到git用户，创建<code>.ssh</code>文件夹，以及在<code>.ssh</code>下创建<code>authorized_keys</code>文件,将ssh_key（也就是第二大步里面的那个密钥内容）粘贴到<code>authorized_keys</code>文件中</p>\n<p>bash</p>\n<pre><code class=\"bash\"># su git\n# 切换到git用户的家目录\n# cd ~  \n$ mkdir .ssh\n$ vim ~/.ssh/autorized_keys # wq保存退出\n# 修改一下.ssh 和 authorized_key 的权限，保证不被其他用户或用户组访问以及修改\n$ chmod 600 ~/.ssh/authorized_key\n$ chmod 700 ~/.ssh </code></pre>\n<blockquote>\n<p>没有安装vim的 安装一下： <code>yum install -y vim</code></p>\n</blockquote>\n<h4 id=\"3-安装nginx\"><a href=\"#3-安装nginx\" class=\"headerlink\" title=\"3. 安装nginx\"></a>3. 安装nginx</h4><p>bash</p>\n<pre><code class=\"bash\"># yum install -y nginx\n# systemctl start nginx.service # 启动nginx服务</code></pre>\n<p>当你通过外网访问你的服务器ip可以看到nginx的欢迎页面就说明你安装成功了。这里说一下，有可能你显示的时centos欢迎页面，这也没问题。（我的就是）<br>打开<code>/etc/nginx/nginx.conf</code>配置文件（如果找不到，你也可以用<code>nginx -t</code>查看配置文件在哪）</p>\n<p><img src=\"/2021/11/24/hexo/11-29-29.jpg\" alt=\"img\"></p>\n<p>接下来创建你的博客根目录(我创建的根目录是<code>/home/git/blog</code>)</p>\n<p>bash</p>\n<pre><code class=\"bash\">$ mkdir ~/blog</code></pre>\n<p>修改nginx配置文件如下（注意以下两个地方）<br>第一个是权限问题</p>\n<p><img src=\"/2021/11/24/hexo/11-29-31.jpg\" alt=\"img\"></p>\n<p>第二个是访问路径</p>\n<p><img src=\"/2021/11/24/hexo/11-29-30.jpg\" alt=\"img\"></p>\n<p>配置好就重启一下nginx</p>\n<p>bash</p>\n<pre><code class=\"bash\"># systemctl restart nginx.service</code></pre>\n<h4 id=\"4-创建git仓库\"><a href=\"#4-创建git仓库\" class=\"headerlink\" title=\"4.创建git仓库\"></a>4.创建git仓库</h4><p>创建git仓库以及用hooks钩子同步到你的博客根目录</p>\n<p>bash</p>\n<pre><code class=\"bash\">$ cd ~\n$ git init --bare blog.git\n$ ls -l blog.git\n# 修改一下权限\n# chown git:git -R blog.git\n# 创建post-receive文件\n$ vim blog.git/hooks/post-receive</code></pre>\n<p>添加以下内容：</p>\n<blockquote>\n<p>#!/bin/sh<br>git –work-tree=/home/git/blog –git-dir=/home/git/blog.git checkout -f<br><code>/home/git/blog</code>这是你刚刚创建的博客根目录<br>赋予其执行权限</p>\n</blockquote>\n<p>bash</p>\n<pre><code class=\"bash\">$ chmod +x /home/git/blog.git/hooks/post-receive</code></pre>\n<p>接下来创建git-receive-pack和git-upload-pack软连接,以防执行hexo d 命令时报错找不到</p>\n<p>bash</p>\n<pre><code class=\"bash\"># sudo ln -s /usr/local/git/bin/git-receive-pack  /usr/bin/git-recei\n# sudo ln -s /usr/local/git/bin/git-upload-pack  /usr/bin/git-upload-pack</code></pre>\n<h4 id=\"5-修改配置文件\"><a href=\"#5-修改配置文件\" class=\"headerlink\" title=\"5.修改配置文件\"></a>5.修改配置文件</h4><p>到本地的虚拟机系统上修改博客<code>_config.yml</code>配置文件<br>添加 <code>git@yourserver_ip:/home/git/blog.git</code>git服务器地址</p>\n<p><img src=\"/2021/11/24/hexo/11-29-32.jpg\" alt=\"img\"></p>\n<blockquote>\n<p>特别注意：<br>如果你之前跟我一样配置三个git服务器（github、coding、自己的云服务器）,那么你就要删除一下本地系统中的<code>.ssh</code>文件中的<code>known_hosts</code><br>只要你更改了<code>_config.yml</code>文件中git服务器地址，最好删除一下<code>known_hosts</code><br>执行<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code></p>\n</blockquote>\n<h3 id=\"四、总结一下可能会碰到的错误\"><a href=\"#四、总结一下可能会碰到的错误\" class=\"headerlink\" title=\"四、总结一下可能会碰到的错误\"></a>四、总结一下可能会碰到的错误</h3><ol>\n<li><p>经常会发生的错误：权限问题引起的。（这是个家常便饭，但你清楚了权限的重要性，那么你以后在linux系统上配置安装一些程序就很容易了）<br>有时候你在安装依赖文件或者执行某些命令如<code>hexo d hexo clean hexo g</code>等等会报错，那是因为你使用的当前用户权限不够。包括你在向git服务器推送项目时，你的服务器那边git用户权限不足而导致操作不了某些文件。</p>\n<p>所以建议你把博客根目录下所有文件的使用者更改为你当前用户。当然你也可以用root用户去操作，但是经常切换用户很麻烦，或者使用sudo借用root权限也要输入密码。<br>如：假设你的博客根目录路径为<code>/home/jake/myblog</code><br>那么使用以下命令更改权限</p>\n</li>\n</ol>\n<p>   bash</p>\n<pre><code class=\"bash\">   $ sudo chown jake:jake -R /home/jake/myblog/*</code></pre>\n<ol start=\"2\">\n<li><p>访问网页出现404错误，这种很好解决，一是你的nginx路径配错了，二是访问端口未开放，ip配置不对。</p>\n</li>\n<li><p><code>hexo d</code>推送项目到git服务器时验证失败，首先确保你把本地的ssh_key密钥内容复制到了你的git服务器上了，然后删除你本地的<code>.ssh</code>文件夹下的<code>known_hosts</code>文件，重新<code>hexo d</code>,还有一种可能，你没有装推送必要的依赖插件<code>hexo-deployer-git</code></p>\n</li>\n</ol>\n<h3 id=\"五、讨论以及心得\"><a href=\"#五、讨论以及心得\" class=\"headerlink\" title=\"五、讨论以及心得\"></a>五、讨论以及心得</h3><p>有人可能会问我为什么不直接用windows作为本地进行操作，而要大费周章地去搞个虚拟机系统操作。</p>\n<p>或许你会觉得Windows上操作会更容易，当然有些小伙伴可能想用windows搭建hexo博客，这里我就不介绍了。</p>\n<p>其实用windows去搭建hexo博客的话我个人感觉有些别扭，因为你在windows操作的话在安装完git之后也是用git bash来部署安装hexo博客的，等价于用git bash 来营造一个Linux系统终端；</p>\n<p>显得有点多此一举，况且多用用Linux系统对某些小伙伴以后的学习是有帮助的。</p>\n<p>比如：虚拟机系统如何查看端口状态以及端口的开放和关闭，如何开启和关闭防火墙、虚拟机网速问题、git服务器的安装和使用、github、coding版本项目管理工具的使用、初步认识nginx负载均衡等等，这些都是我在搭建hexo中需要了解的知识。另外最重要的是我又对Linux系统有了进一步的了解</p>\n<h3 id=\"六、参考链接\"><a href=\"#六、参考链接\" class=\"headerlink\" title=\"六、参考链接\"></a>六、参考链接</h3><ol>\n<li><a href=\"https://sunhwee.com/posts/6e8839eb.html\" target=\"_blank\" rel=\"noopener\">洪卫の博客:Hexo+Github博客搭建完全教程</a></li>\n<li><a href=\"https://godweiyang.com/2018/04/13hexo-blog/\" target=\"_blank\" rel=\"noopener\">韦阳的博客:超详细Hexo+Github博客搭建小白教程</a></li>\n<li><a href=\"https://blog.csdn.net/StaunchKai/article/details/82878928\" target=\"_blank\" rel=\"noopener\">Hexo 博客部署到腾讯云服务器全流程</a></li>\n<li><a href=\"https://blog.csdn.net/qq_34996727/article/details/81065961\" target=\"_blank\" rel=\"noopener\">centos7开放、关闭及查看端口</a></li>\n<li><a href=\"https://www.liaoxuefeng.com/wiki/896043488029600\" target=\"_blank\" rel=\"noopener\">廖雪峰的Git教程</a></li>\n</ol>\n<p><a href=\"http://www.nstop.cn/\" target=\"_blank\" rel=\"noopener\">文章来源</a></p>\n"}],"PostAsset":[{"_id":"source/_posts/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215413958-1581710292740.png","slug":"20170802215413958-1581710292740.png","post":"ckwdmsuvo0008oovh6g952js0","modified":1,"renderable":0},{"_id":"source/_posts/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215413958.png","slug":"20170802215413958.png","post":"ckwdmsuvo0008oovh6g952js0","modified":1,"renderable":0},{"_id":"source/_posts/hello-world/image-20200215031832012.png","post":"ckwdmsuvs000doovh0vt2ahd2","slug":"image-20200215031832012.png","modified":1,"renderable":1},{"_id":"source/_posts/HexoReferencesToLocalImagesCannotBeDisplayed/20181115112933605.png","post":"ckwdmsuvn0006oovh0wo16ts1","slug":"20181115112933605.png","modified":1,"renderable":1},{"_id":"source/_posts/HexoReferencesToLocalImagesCannotBeDisplayed/20181115112941162.png","post":"ckwdmsuvn0006oovh0wo16ts1","slug":"20181115112941162.png","modified":1,"renderable":1},{"_id":"source/_posts/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215316131-1581710292501.png","post":"ckwdmsuvo0008oovh6g952js0","slug":"20170802215316131-1581710292501.png","modified":1,"renderable":1},{"_id":"source/_posts/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215316131.png","post":"ckwdmsuvo0008oovh6g952js0","slug":"20170802215316131.png","modified":1,"renderable":1},{"_id":"source/_posts/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215328854-1581710292745.png","post":"ckwdmsuvo0008oovh6g952js0","slug":"20170802215328854-1581710292745.png","modified":1,"renderable":1},{"_id":"source/_posts/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215328854.png","post":"ckwdmsuvo0008oovh6g952js0","slug":"20170802215328854.png","modified":1,"renderable":1},{"_id":"source/_posts/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215338473-1581710292744.png","post":"ckwdmsuvo0008oovh6g952js0","slug":"20170802215338473-1581710292744.png","modified":1,"renderable":1},{"_id":"source/_posts/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215338473.png","post":"ckwdmsuvo0008oovh6g952js0","slug":"20170802215338473.png","modified":1,"renderable":1},{"_id":"source/_posts/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215350265-1581710292556.png","post":"ckwdmsuvo0008oovh6g952js0","slug":"20170802215350265-1581710292556.png","modified":1,"renderable":1},{"_id":"source/_posts/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215350265.png","post":"ckwdmsuvo0008oovh6g952js0","slug":"20170802215350265.png","modified":1,"renderable":1},{"_id":"source/_posts/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215400518-1581710292743.png","slug":"20170802215400518-1581710292743.png","post":"ckwdmsuvo0008oovh6g952js0","modified":1,"renderable":0},{"_id":"source/_posts/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215400518.png","slug":"20170802215400518.png","post":"ckwdmsuvo0008oovh6g952js0","modified":1,"renderable":0},{"_id":"source/_posts/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215956812-1581710292746.png","post":"ckwdmsuvo0008oovh6g952js0","slug":"20170802215956812-1581710292746.png","modified":1,"renderable":1},{"_id":"source/_posts/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802215956812.png","post":"ckwdmsuvo0008oovh6g952js0","slug":"20170802215956812.png","modified":1,"renderable":1},{"_id":"source/_posts/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802220104192-1581710292747.png","post":"ckwdmsuvo0008oovh6g952js0","slug":"20170802220104192-1581710292747.png","modified":1,"renderable":1},{"_id":"source/_posts/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802220104192.png","post":"ckwdmsuvo0008oovh6g952js0","slug":"20170802220104192.png","modified":1,"renderable":1},{"_id":"source/_posts/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802220117307-1581710292747.png","slug":"20170802220117307-1581710292747.png","post":"ckwdmsuvo0008oovh6g952js0","modified":1,"renderable":0},{"_id":"source/_posts/UseKaliWirelessPenetrationToGetTheWifiPassword/20170802220117307.png","slug":"20170802220117307.png","post":"ckwdmsuvo0008oovh6g952js0","modified":1,"renderable":0},{"_id":"source/_posts/hexo/11-29-08.jpg","post":"ckwdmsuvt000eoovhby1ahxe7","slug":"11-29-08.jpg","modified":1,"renderable":1},{"_id":"source/_posts/hexo/11-29-09.jpg","post":"ckwdmsuvt000eoovhby1ahxe7","slug":"11-29-09.jpg","modified":1,"renderable":1},{"_id":"source/_posts/hexo/11-29-10.jpg","post":"ckwdmsuvt000eoovhby1ahxe7","slug":"11-29-10.jpg","modified":1,"renderable":1},{"_id":"source/_posts/hexo/11-29-11.jpg","post":"ckwdmsuvt000eoovhby1ahxe7","slug":"11-29-11.jpg","modified":1,"renderable":1},{"_id":"source/_posts/hexo/11-29-12.jpg","post":"ckwdmsuvt000eoovhby1ahxe7","slug":"11-29-12.jpg","modified":1,"renderable":1},{"_id":"source/_posts/hexo/11-29-13.jpg","post":"ckwdmsuvt000eoovhby1ahxe7","slug":"11-29-13.jpg","modified":1,"renderable":1},{"_id":"source/_posts/hexo/11-29-14.jpg","post":"ckwdmsuvt000eoovhby1ahxe7","slug":"11-29-14.jpg","modified":1,"renderable":1},{"_id":"source/_posts/hexo/11-29-15.jpg","post":"ckwdmsuvt000eoovhby1ahxe7","slug":"11-29-15.jpg","modified":1,"renderable":1},{"_id":"source/_posts/hexo/11-29-16.jpg","post":"ckwdmsuvt000eoovhby1ahxe7","slug":"11-29-16.jpg","modified":1,"renderable":1},{"_id":"source/_posts/hexo/11-29-17.jpg","post":"ckwdmsuvt000eoovhby1ahxe7","slug":"11-29-17.jpg","modified":1,"renderable":1},{"_id":"source/_posts/hexo/11-29-18.jpg","post":"ckwdmsuvt000eoovhby1ahxe7","slug":"11-29-18.jpg","modified":1,"renderable":1},{"_id":"source/_posts/hexo/11-29-19.jpg","post":"ckwdmsuvt000eoovhby1ahxe7","slug":"11-29-19.jpg","modified":1,"renderable":1},{"_id":"source/_posts/hexo/11-29-20.jpg","post":"ckwdmsuvt000eoovhby1ahxe7","slug":"11-29-20.jpg","modified":1,"renderable":1},{"_id":"source/_posts/hexo/11-29-21.jpg","post":"ckwdmsuvt000eoovhby1ahxe7","slug":"11-29-21.jpg","modified":1,"renderable":1},{"_id":"source/_posts/hexo/11-29-22.jpg","post":"ckwdmsuvt000eoovhby1ahxe7","slug":"11-29-22.jpg","modified":1,"renderable":1},{"_id":"source/_posts/hexo/11-29-23.jpg","post":"ckwdmsuvt000eoovhby1ahxe7","slug":"11-29-23.jpg","modified":1,"renderable":1},{"_id":"source/_posts/hexo/11-29-24.jpg","post":"ckwdmsuvt000eoovhby1ahxe7","slug":"11-29-24.jpg","modified":1,"renderable":1},{"_id":"source/_posts/hexo/11-29-25.jpg","post":"ckwdmsuvt000eoovhby1ahxe7","slug":"11-29-25.jpg","modified":1,"renderable":1},{"_id":"source/_posts/hexo/11-29-26.jpg","post":"ckwdmsuvt000eoovhby1ahxe7","slug":"11-29-26.jpg","modified":1,"renderable":1},{"_id":"source/_posts/hexo/11-29-27.jpg","post":"ckwdmsuvt000eoovhby1ahxe7","slug":"11-29-27.jpg","modified":1,"renderable":1},{"_id":"source/_posts/hexo/11-29-28.jpg","post":"ckwdmsuvt000eoovhby1ahxe7","slug":"11-29-28.jpg","modified":1,"renderable":1},{"_id":"source/_posts/hexo/11-29-29.jpg","post":"ckwdmsuvt000eoovhby1ahxe7","slug":"11-29-29.jpg","modified":1,"renderable":1},{"_id":"source/_posts/hexo/11-29-30.jpg","post":"ckwdmsuvt000eoovhby1ahxe7","slug":"11-29-30.jpg","modified":1,"renderable":1},{"_id":"source/_posts/hexo/11-29-31.jpg","post":"ckwdmsuvt000eoovhby1ahxe7","slug":"11-29-31.jpg","modified":1,"renderable":1},{"_id":"source/_posts/hexo/11-29-32.jpg","post":"ckwdmsuvt000eoovhby1ahxe7","slug":"11-29-32.jpg","modified":1,"renderable":1},{"_id":"source/_posts/hexo/image-20200215031519029.png","post":"ckwdmsuvt000eoovhby1ahxe7","slug":"image-20200215031519029.png","modified":1,"renderable":1}],"PostCategory":[{"post_id":"ckwdmsuvo0008oovh6g952js0","category_id":"ckwdmsuvl0004oovh7uu88umf","_id":"ckwdmsuvu000foovh8a8b0roe"},{"post_id":"ckwdmsuvb0000oovhfklvht8h","category_id":"ckwdmsuvl0004oovh7uu88umf","_id":"ckwdmsuvu000ioovh67sfgs38"},{"post_id":"ckwdmsuvq000aoovh0gh7487i","category_id":"ckwdmsuvl0004oovh7uu88umf","_id":"ckwdmsuvv000koovh71k8cgfn"},{"post_id":"ckwdmsuvj0002oovhadjw5pco","category_id":"ckwdmsuvr000boovh2zkf985y","_id":"ckwdmsuvw000ooovhgjri1jqf"},{"post_id":"ckwdmsuvn0006oovh0wo16ts1","category_id":"ckwdmsuvu000goovhhl3ad7s0","_id":"ckwdmsuvx000poovhd8sv2k9r"},{"post_id":"ckwdmsuvt000eoovhby1ahxe7","category_id":"ckwdmsuvv000moovh7b36558f","_id":"ckwdmsuvx000soovh89g17yvs"}],"PostTag":[{"post_id":"ckwdmsuvb0000oovhfklvht8h","tag_id":"ckwdmsuvm0005oovh2nwt9tld","_id":"ckwdmsuvv000joovh7hy74738"},{"post_id":"ckwdmsuvb0000oovhfklvht8h","tag_id":"ckwdmsuvr000coovhcv5a56w8","_id":"ckwdmsuvv000loovh2whp7hb8"},{"post_id":"ckwdmsuvj0002oovhadjw5pco","tag_id":"ckwdmsuvu000hoovhalsdd24h","_id":"ckwdmsuvy000toovhb6x3fnej"},{"post_id":"ckwdmsuvj0002oovhadjw5pco","tag_id":"ckwdmsuvm0005oovh2nwt9tld","_id":"ckwdmsuvy000uoovh4jfi4n3z"},{"post_id":"ckwdmsuvj0002oovhadjw5pco","tag_id":"ckwdmsuvr000coovhcv5a56w8","_id":"ckwdmsuvy000woovhfayogy3k"},{"post_id":"ckwdmsuvn0006oovh0wo16ts1","tag_id":"ckwdmsuvx000roovhez1lcykz","_id":"ckwdmsuvy000yoovh7dgq4hzz"},{"post_id":"ckwdmsuvn0006oovh0wo16ts1","tag_id":"ckwdmsuvu000hoovhalsdd24h","_id":"ckwdmsuvy000zoovh4pi3gcvh"},{"post_id":"ckwdmsuvo0008oovh6g952js0","tag_id":"ckwdmsuvy000xoovhe6n539sf","_id":"ckwdmsuvz0011oovh5a526pb5"},{"post_id":"ckwdmsuvq000aoovh0gh7487i","tag_id":"ckwdmsuvu000hoovhalsdd24h","_id":"ckwdmsuvz0013oovh503x876h"},{"post_id":"ckwdmsuvq000aoovh0gh7487i","tag_id":"ckwdmsuvm0005oovh2nwt9tld","_id":"ckwdmsuvz0014oovhc4nabblx"},{"post_id":"ckwdmsuvt000eoovhby1ahxe7","tag_id":"ckwdmsuvx000roovhez1lcykz","_id":"ckwdmsuw00016oovh92jefs2d"},{"post_id":"ckwdmsuvt000eoovhby1ahxe7","tag_id":"ckwdmsuvm0005oovh2nwt9tld","_id":"ckwdmsuw00017oovh5kpdcv80"},{"post_id":"ckwdmsuvt000eoovhby1ahxe7","tag_id":"ckwdmsuvu000hoovhalsdd24h","_id":"ckwdmsuw00018oovhdj21647z"}],"Tag":[{"name":"Linux","_id":"ckwdmsuvm0005oovh2nwt9tld"},{"name":"搭建教程","_id":"ckwdmsuvr000coovhcv5a56w8"},{"name":"转载","_id":"ckwdmsuvu000hoovhalsdd24h"},{"name":"Hexo","_id":"ckwdmsuvx000roovhez1lcykz"},{"name":"Kali","_id":"ckwdmsuvy000xoovhe6n539sf"}]}}