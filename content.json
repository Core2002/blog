{"meta":{"title":"小白的小博客","subtitle":"","description":"","author":"NekokeCore","url":"https://blog.fifu.fun","root":"/"},"pages":[{"title":"contact","date":"2020-02-13T17:59:49.000Z","updated":"2021-11-24T11:00:32.129Z","comments":true,"path":"contact/index.html","permalink":"https://blog.fifu.fun/contact/index.html","excerpt":"","text":""},{"title":"categories","date":"2020-02-13T17:58:47.000Z","updated":"2021-11-24T11:00:32.129Z","comments":true,"path":"categories/index.html","permalink":"https://blog.fifu.fun/categories/index.html","excerpt":"","text":""},{"title":"friends","date":"2020-02-13T18:00:09.000Z","updated":"2021-11-24T11:00:32.129Z","comments":true,"path":"friends/index.html","permalink":"https://blog.fifu.fun/friends/index.html","excerpt":"","text":""},{"title":"about","date":"2020-02-13T17:59:28.000Z","updated":"2021-11-24T11:00:32.129Z","comments":true,"path":"about/index.html","permalink":"https://blog.fifu.fun/about/index.html","excerpt":"","text":""},{"title":"tags","date":"2020-02-13T17:59:11.000Z","updated":"2021-11-24T11:00:32.129Z","comments":true,"path":"tags/index.html","permalink":"https://blog.fifu.fun/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"密码破解与心理学","slug":"密码破解与心理学","date":"2021-11-25T09:04:51.000Z","updated":"2021-11-27T05:33:51.365Z","comments":true,"path":"2021/11/25/密码破解与心理学/","link":"","permalink":"https://blog.fifu.fun/2021/11/25/%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E4%B8%8E%E5%BF%83%E7%90%86%E5%AD%A6/","excerpt":"","text":"仅供学习与交流，切勿对真实目标操作，否则后果自负！ 十大基本规律 绝大多数人都高估了破译密码的难度和低估了自己密码存在的风险，因而，往往把能够破解密码的人当成神秘人物，同时基本很少有修改自己密码的习惯。 绝大多数人一生常用的密码通常不会超过3个，如果你破解了某人的QQ密码，很可能你也破解了他的论坛密码、邮箱密码、游戏账号密码…… 从性别上看，男性的密码比女性的要更加难破；从年龄层面上看，年轻人的密码比35岁以上的人群的密码更加难破；从受教育层度上看，大专以上学历的人群相对于以下学历人群，密码破解难度更大，且大专、本科、硕士学历的人群密码破解难度基本上没有什么区别；从专业角度上看，理科生的密码比起文科生要难破一些，计算机相关专业的学生密码破解难度最大。 绝大多数人的密码，基本上都是有确定含义的，随机乱码组成的密码极度罕见（应该说我从来没有遇到过，不过如果是这种密码，我这种基于心理的思路，可以确定毫无办法）。 大多数人的密码要么纯粹用数字组成，要么纯粹用小写字母组成，要么用数字加字母组成，只有很少人会采用下划线，极少数的人字母区分大小写。 密码所采用的字母中，很多都是姓名拼音、名字拼音的全部或首字母缩写，某一图腾的英文单词（通常是名词）——图腾的含义后面会提到，某一单位名的首字母缩写，以及某一地名的拼音或英文及其缩写。 密码所采用的数字中，很多有关日期，且该日期对密码所有人拥有极其重要的意义，还有很多与地名和电话号码有关。 使用下划线的密码，下划线通常只出现一次，一般这类密码的主人密码保护意识很强，其密码往往还包含数字和字母，这种密码的下划线的位置通常处在数字和字母的分隔处；字母区分大小写的密码，大写通常只出现一次，并且很多时候都出现在密码的开头，极少数出现在结尾。 除非所登录系统有严格的位数限制，否则密码的位数通常是8位到11位，7位以下的密码和12位以上的密码较为少见。 公共网络的密码通常很少包含个人信息，大多数是单位名称的全部或某一部分的中文或英文全称，或者英文或拼音的首字母缩写，外加拥有特定含义的数字，这种数字通常是电话号码或者门牌号，另外，有些密码是上述特定字母或其缩写的简单重复，如：12341234、abcabcabc；个人密码则很少出现上述简单重复的情况。 十大规律隐含的心理学特性惰性从上述很多条规律都可以看出人或多或少存在惰性，比如很少人会定期修改密码；再如很少人密码会区分大小写，因为这样的话必须进行至少一次大小写切换；再如各种不同账号使用同一密码都是人存在惰性的有力证明。 自我意识自我意识很多时候体现在使用名字的密码上，通常，自我意识较为强烈的人，很看重自己的名号或者名誉，因而，其密码一旦使用自己的名字，往往就是名字的全拼，较少使用缩写，更不会省略自己的姓氏，另外，这类人也有很大一部分使用的是某一图腾的英文单词，例如某人非常崇拜某一偶像，那么，这个偶像就是他的图腾，其密码很有可能与这个图腾有关。 自我保护意识从公用密码很少包含个人信息这一点很容易印证自我保护的问题，一般来说，当某一网管或其他特定工作性质的人需要为某公用账号设置密码时，首先需要考虑的是密码易为别人所理解和记忆，然而，一个人在考虑秘密之类的东西时，首先联想的是他自己身上的东西，由于这些东西涉及其个人隐私，因而很容易被他的潜意识所排除。 爱与责任感不少人的密码会使用伴侣和孩子的姓名或生日、结婚纪念日、自己公司成立日期等诸如此类的信息，这很明显地体现了爱和责任感。 完美主义倾向完美主义倾向在密码中主要体现在对称与平衡上面，这从名字加日期的组合式密码和带下划线的密码可以很容易看出来，例如，某人叫做张三，生日是1980年1月1日，那么，如果采用前者，其密码往往是zhangsan19800101或者zhangsan8011，不大可能设置成z1h9a8n0g0s0a1n01这种类型；如果使用下划线密码，则很大可能会采用zhangsan_19800101或者zhang_san_19800101，不大可能采用_zhangsan19800101或者z_hangsan19800101这种类型。 常见的无脑型密码所谓无脑型密码，指那种破解起来没有任何技术含量，纯粹依靠运气就可以破解的密码，这种密码通常为公用，其结构很多时候为：某一数字的简单重复，某一简单规则的数字序列，某一简单规则的字母序列，按某种简单规则组合的数字和字母序列，以上四种密码有以下一些典型例子：01223456789,1234567890,123123123,12341234,0987654321，13579824680。 或者这样：qwertyuiop，abcabcabc，abcdabcd，abcdefg,八个8,八个6，八个1，八个0，八个或者九个9，abcd1234,abc123abc123,abcd4321，所在城市区号的简单重复，等等。 这种无脑型密码常见于公用的网络或者邮箱账号，尝试破解公共密码的时候，通常优先选用以上提到的这些密码进行尝试，在北京的时候，我用qwertyuiop破解了一次路由器的密码，来到潮州之后，第一次用1234567890破解了一次密码，后来才知道是同事手机网络的密码，现在用的网络是邻居的，密码是8个8. 公共网络的路由器密码破解法其实从严格意义上来讲，只要接了路由器，那么，其网络必定是共享的，因而只要接了路由器的网络，都可以看成是公用网络，区别在于公用的程度，一般来说，从公用的程度来讲，路由器可以分为四类：公共场所、公司、公租房、家庭，其中公用程度越高，密码破解难度就越低。 公共场所的路由器密码破解法公共场所通常包括旅馆、饮食场所、网吧、商场等人流量大，人群确定但身份群不稳定的场所，这种场所的网络基本上不会包含任何个人信息，且大多数密码都是无脑型密码，此外最常见的密码是以下几种： 场所名称的拼音或英文的简单重复 场所门牌号的简单重复或前半部分为门牌号，后一部分为门牌号的倒序 场所名拼音或英文加上场所所在门牌号或分店号 场所预约电话、送餐电话或400免费服务电话 场所名拼音或英文加上4位到6为无脑型密码 场所门口某路公交车号码的简单重复 总的来说，很多的场所是不设置密码的，设置密码的作用也不大，其设置密码的目的通常是防止临近商家或住户的盗用，但只要这些用户稍微花点心思，则获取密码易如反掌。 公司路由器密码破解法如果你在搜索网络的时候，搜索到网络名为4位以上的大写英文字母的，这种网络很有可能是公司网络，其密码的组合通常非常简单，除了以上提到的无脑型密码以外，很有可能采用如下几种形式。 公司名拼音或英文的简单重复，如中国移动，其某一门店的哦网络有可能是zgydzgyd，或者chinamobile 公司门牌号的简单重复或者前半部分为门牌号，后一部分为门牌号的倒序，例如某公司位于某栋大楼的1606室，那么其密码有可能是16061606或者16066061 公司前台电话号码，有时还会加上公司所在城市的区号 公司名拼音或英文加上公司门牌号 公司名拼音或英文加上某一4位到6位的无脑型密码 公司名拼音或英文缩写加上电话号码或电话号码的最后4位 总之，公司的网络由于用的人多，所以，其密码包含的较难记住的信息越少，破解难度是非常低的，只要有耐心多尝试几次，一般来说，都不难破解，至于公司的名称、门牌号码和电话号码如何获得，这个我想只要你在一些写字楼上过班，都不用我来教你。 公租房路由器密码破解法这里所谓的公租房，是指来自不同地方彼此不认识的人或者彼此要好的同学、朋友、同事一起租住的房子，包括大学宿舍，职工宿舍，同时还包括彼此独立租房，但共用一个网络的用户群。 公租房的密码类型已经或多或少接近于家庭密码，但由于成员关系不如家庭那么亲密，因而，其包含的个人信息依然较少，破解的成功率依然较为可观。除了上述提到的无脑型密码以外，公租房的密码通常还有以下几种类型： 所在小区名或楼层名拼音的全部或者拼音简写的简单重复，例如“金碧花园”用户，其密码就有可能是jinbihuayuan或者jbhyjbh 房号或者楼号加房号或其简单重复，或者前一部分为房号，后一部分为房号的倒序，例如我在北京时候住在某栋小区的2号楼2单元1202房，我为租用我网络的用户设置的密码就是12022021；同时，尝试过登录邻居路由器的时候，住在1201的公租房用户，其密码为12011201；住在11楼3号房的用户，其路由器密码为02021103。 小区名的简写加上房号，例如，我在北京住的小区名为华龙美晟，搜到我楼下2号房的用户，其路由器密码为hlms1102。 宿舍电话号码或者前面加上区号，例如，广州某大学宿舍的电话号码为61306325，那么，其密码有可能就是61306325或者02061306325. 公租房用户都要经常用到的某一电话号码，例如送水电话，送煤气的电话，送餐电话，等等。 家庭路由器密码破解法家庭密码在这四类密码中间，相对来说是最容易破解的，因为大家彼此都很亲密，因而，这类密码通常包含了不少家庭方面的信息，不过，从人性的角度来将，再亲密的人彼此之间也是存在隐私的，因而，这类密码通常不会包含真正内心深处的隐私，因而，相对于个人密码来讲，其破解难度要低得多。 不少的家庭路由器密码依然使用上述的无脑型密码，另外一些则具备公租房密码的特点，以上这些都不再赘述，下面谈谈家庭路由器密码相对于公租房密码所不具备的特点及其破解方法。 家庭姓氏拼音的简单重复，这种常见于姓氏拼音4个字母以上的家庭，如张、周等，而像李、林一类的姓氏，这种方式就要少见得多。另外，有趣的是，以姓氏进行简单重复的密码，其首字母通常会采用大写，有的甚至是遇到第一个字母就大写一次的现象，例如某一姓张的家庭，其密码有可能会采用Zhangzhang或者ZhangZhang的格式。 家庭所居住的房屋的电话号码或者区号加上电话号码，这类密码有时候家庭会出于安全考虑，在电话号码最后会加上一位到两位防盗码。例如，某家庭的电话号码是81008100，那么其路由器密码有可能会是810081000，最后一个0就是防盗码。 老家的电话号码，这是我阅读上面提到的那份资料所发现的一个密码规则，当时我发现有几个人采用这种类型的密码，其中一个人注册资料填写的寄件地址是北京，而户籍地址是河北某县的，而其密码以0开头，看起来像一个电话号码，因而上网查找，果然发现这个密码的前面几个数字与其户籍地址所在的县城区号相对应，因而断定这是一个老家的电话号码，尽管这属于个人密码，但是由于老家的电话是家庭成员所共知的，因而完全有可能被用作路由器密码。 家庭姓氏的拼音加上电话号码或者手机号码。 以下几条是我认为可能存在的规则，但是由于之前破解的过程没有相关的信息，因而没有经过验证的，一并提出来供大家参考。 夫妻两个人的姓氏加上结婚纪念日，有可能是两个姓氏连在一起，后面加上结婚纪念日；也有可能是两个姓氏分别放在两端，结婚纪念日放在中间。 第一个孩子的姓名、小命加上孩子生日。 父亲或者母亲的生日。 夫妻之间妻子的姓名，丈夫私底下对其的爱称加上妻子的生日。这一条是有性别的分工所决定的，因为通常涉及电脑的东西，男性懂得会更多，因此借此机会向配偶表达一下爱意是完全可能的。 家里养的宠物的名字加上某一特定含义的数字。 总之，只要你掌握足够的信息，通过这上面已经经过验证和没有经过验证的几条规律，就有极大的可能破解人家的路由器密码。 以上就是几种人群分布所在网络的路由器密码破解的主要内容，而有的时候，破解密码甚至都不需要用到以上的方法，因为路由器通常也就是那么几个品牌，而很多品牌的路由器地址都是固定的，例如TP-Link及其他很多品牌的很多型号使用的地址是192.168.1.1，像腾达则很多使用192.168.0.1，而各大品牌的路由器的默认初始登录账号和密码都是admin，偏偏很多人又不会操作，有的即使懂得操作也不愿意去修改路由器的登录密码，因而有时候你可能很轻松的就进入人家的路由器去进行诸如设定固定IP、修改流量、重启路由器等操作。如果你搜索某个网络的网络名是诸如Tenda，TP-Link_2D18FA这样的含有品牌名的网络，那么，很有可能他的路由器登录密码也是没有修改的，只要你懂得路由器怎么操作，那么，这种网络是很容易就突破了。 基于性格分析的个人密码破解法个人密码常用的组成要素 自己姓名、伴侣姓名、孩子姓名的拼音或其缩写。 自己生日、伴侣生日、孩子生日、父亲或母亲生日、自己公司开张纪念日、结婚纪念日、某个亲人的忌日等对密码主人有特别重要意义的日期。 家庭电话号码、老家电话号码、个人手机号码、爱人手机号码。 身份证、房产证、驾驶证、自己公司的经营许可证、营业执照等证件的号码或其号码段。 与自己所追求或崇拜的事物有关的事物（即：图腾）的名称或日期。 自己、亲人、宠物、图腾的昵称。 爱人或者某一图腾的名称（通常是简称），加上1314（一生一世）或者5201314（我爱你一生一世）这样拥有谐音特性的数字串。 图腾“图腾”体现在现代人的精神世界里，很多的时候是爱、理想、人格参照物等美好事物的象征。其一般意义通常与宗教或者原始崇拜有关，而宗教之所以能够一直存在，很大程度在于其能直达人类的内心深处，密码“密”的特点与图腾的这种特点很容易就能够互相结合，因而，与图腾相关联的一些事物，很容易被人们选作密码的载体。 在密码中，常见的图腾通常有以下几种： 初恋对象的名字拼音或其缩写，或者昵称的英文，初恋对象的生日或与初恋各种第一次的日期，与初恋对象有关的事物，例如某只宠物的名字、第一次约会的地点。 某个特别崇拜的人物的姓名、外号或者生日、忌日。 某个特别向往的地方的名字，包括发誓一辈子无论如何要去一次的地方或者故乡。 某个特别向往的神话人物或一种与一种理想生活有关的事物，例如：乌托邦（Utopia）。 某个童年时期对自己影响极深的人物的名字或者事物的名称，例如：电影《公民凯恩》中，凯恩至死都念念不忘的“rosebud”，如果凯恩生在现代，那么，我刚说他的密码百分之百会包含这个单词。 不同人格类型的人群使用密码的习惯由于各自使用的标准不同，古今中外各种心理学家和人物学家，对于人群的分类方法可谓千差万别，例如：儒家通常会将人分为圣人、君子、小人，三国时期的刘劭则将人按才的不同分为英、雄、俊、杰，中国的命理学更是将人按照生辰八字的结合分出“财官双美格”、“食神生财格”等多种类型，而“阴阳二十五人”分类法则将人按照五行体现的气质将人分为二十五类；西方心理学有按星座进行区分的，还有按照九型人格进行区分的，而像弗洛伊德则将人的思想分为有意识和无意识两种，施普兰格尔则把人格分为理论、经济、艺术、社会、政治、宗教6种类型…… 由于理论基础不一样，因而其分类方法就不一样，对于密码来说，上述无论任何一种理论所提供的分类方法都难以能够和该人群的密码使用习惯一一对应，因而，下面我将结合自己的经验以及自己的思考，对不同类型的密码所对应的人群进行分类。 由于自己过往破译的密码并不算太多，而阅读过的那份材料所涉及的人又全部素未谋面，加上我并没有学过系统的心理学课程，因而，以下的分类方法未必科学，难免会遗漏某些人格类型，同时，也缺乏统计学意义上的证据作为支撑，因而你不妨把他看成是一种无稽之谈。需要特别指出的是，以下分类所涉及的人群，并没有严格的界限，有很多人同时兼具不同的性格特点，因而其密码也会同时拥有各自的特点。 责任感型责任感通常来源于自信以及对家人强烈的爱，这种人通常在社会上比较成功，对社会现象有特定的判断标准，且其看法不容易为别人所动，体现在生活习惯上，他们选择工作时通常比较谨慎而且目标明确，日常生活较为单一，除了工作以外，他们会花很多的时间陪家人，赚来钱通常花在家人身上或者交给爱人保管。这种人群的密码通常包括以下的要素：爱人的姓名、昵称或生日，结婚纪念日，孩子的姓名、昵称或生日，老家的电话号码，父亲或母亲的生日。 洁癖型此处指精神意义上的洁癖，这种人的思想中存在一个特定的界限，这个界限是无论自己还是别人都不允许逾越的禁区。这种人要么特别成功，要么整天抱怨；要么像个外交家，要么极度孤僻；同时他们别人的某些行为或者社会想象拥有常人所难以理解的评判标准，这种人的自我意识通常很强，而且对某种理想的人事或者生活拥有强烈的向往，在他们的内心深处，通常埋藏着一段失败但又刻骨铭心的情感经历。这一类型的人，其密码最大的可能是使用图腾。 两肋插刀型这一类人通常具备很强的领袖气质，而且极度自信，他们通常有很多的朋友，而且非常好动，属于坐久了屁股就会长疮的人，他们隔三岔五就会带一大群朋友回家吃饭或者睡觉，也经常夜不归宿，朋友需要帮忙的时候，他们通常会二话不说地伸出援手，也经常路见不平，他们通常自我意识强烈，很少对人设防。其密码的类型通常不是无脑型就是自己的姓名加上出生年月，且姓名必定是姓氏加名字的全部字母，极少使用简写，顶多加上一两位的防盗码，有时也会使用亲人的信息。 幻想型幻想型通常存在于花季少女，这种人的QQ空间、博客和微博通常带有炫目的色彩，通常使用一些童话、神话或幻想世界中才有可能存在的事物，他们追求时尚，爱看偶像剧，常会做出孩子气的行为，对小动物通常非常呵护，有不少人有养宠物的习惯，她们通常家庭条件较好，从小受惯长辈的宠爱，她们内心深处通常非常自私，尽管外表并非如此。这种人的密码类型通常使用图腾，且该图腾一般是某个白马王子的姓名或者生日，或者宠物的名字，或者某种她幻想中的理想事物。 好斗型所谓好斗型，并非指表面上爱与人争吵或者打架，而是指表面上不懂声色，但却在暗处与你暗暗较劲的人，例如某次你考了第一名，而他考了第三名，在别人都恭维你，要你请客吃饭的时候，他会找借口不去，或显得心事重重，私底下会更加卖力学习，期望下一次考试超越你。这种人通常自我意识强烈，拥有让人难以忍受的自负，妒忌心也很强。这类人的密码通常与他自己有关，其使用的密码，通常要么包含自己的昵称、姓名、手机号码或生日，也有很大几率使用图腾，且这个图腾极有可能是他在孩提时代或青春期对他成长产生强烈影响的事物。 事业领袖型这种人通常也具备很强的责任感，但与责任感型的人相比，他们的责任感的重心更多的放在工作上，他们严格要求自己，更加严格地要求自己的下属和亲人，有时会让人觉得无法忍受，工作起来，这种人是废寝忘食的，当他投入工作的时候，决不允许别人打扰他，说话的时候，一旦被人打断或者听到不想听的话，就会直接质问对方，这种人的密码，很多时候会使用自己的名字或者昵称，且很多时候会使用缩写或者不包括姓氏的名字拼音，或者与他公司或者事业有关的名称或号码，有时也会使用图腾，且该图腾要么是他认为别人绝对意想不到的事物。 完美主义者其实每个人或多或少都有完美主义的倾向，对于完美主义倾向比较显著的人来说，他们未必注重自己着装的品位，但是他们会追求有品质的事物；他们崇拜的对象通常都是人格、智力都看上去完美无缺的人；他们的房间通常物品摆放整齐，有时出门走到半路，想起家里某个物品没有摆放好，甚至会跑回来把他放到让自己看起来安心的位置；他们通常喜欢自己整理自己的房间，不喜欢让别人插手，因为，在他们看来，由别人经手的东西都是不完美的；这种人通常严于律己，洁身自好，而且在道德上有种让一些小人难以忍受的优越感；这类人也许也会讲脏话，但在他们内心深处，对纯洁的爱情却极度向往，大多数这方面的男性拥有处女情结，女性则通常向往王子公主式样的爱情。这类人的密码，一旦使用名字，则名字很大几率是全名，或者是某一特定的单词（如love，great等具有美好意义的形容词）加上全名的简称，一旦使用日期则日期通常是20120101这样的格式，很少会选择1211或120101这种格式，一旦使用电话号码，则电话号码通常包含区号，他们手机的电话簿，每个人的人名通常是全名，极少会忽略姓，也很少使用昵称；一旦使用下划线，则下划线的位置通常是能够高度体现对称美的。 现实主义者现实主义者体现在思想上，不相信奇迹，他们行为上不容易走极端，但思想上却非常极端，例如，他们相信某个名人的成功是难以复制的，尤其是他身边的人；他们认为官员中没有好官，娱乐圈的女性每个都被潜规则过，有时候和他们交谈，你会忍受不了他们满口的大道理。这类人的密码，一旦使用姓名，通常是简写，日期则以简约型的居多，如果使用下划线，他们对于对称没有什么要求，有时下划线会出现在第一位，字母区分大小写的在这一类型的人中最为常见。 以上八种人格类型，到目前为止，是我所能遇到并总结出来的全部有关密码在性格特征上的分类，在我过往所破解和遇到的密码中，还没有任何一个密码所对应的人群逃得过以上所谈到的情况。另外，从星座的观点来看，还有一些比较有趣的现象，例如，责任感型密码通常分布在天蝎座、射手座、狮子座、处女座上面，洁癖型的密码通常分布在水瓶座、双子座、天蝎座、白羊座和处女座，两肋插刀型则很多分布在白羊座、双鱼座、狮子座和摩羯座上面，幻想型绝大部分分布在双子座、天平座、射手座、水瓶座上面，好斗型则很多分布在白羊座、巨蟹座、天蝎座、处女座和摩羯座上面，事业领袖型则很多分布在金牛座、狮子座、天平座和摩羯座，完美主义者型则大多出现在白羊座、天平座和水瓶座，现实主义者则很多分布在金牛座、巨蟹座、射手座和摩羯座。另外，双子座、双鱼座和天平座最容易使用无脑型密码。双子座和水瓶座使用密码的规律最难以捉摸。 上述总结的内容正确与否还有待进一步验证，你也可以从上面找到一种你认为最符合你性格特征的类型，结合你自己的密码进行验证。 密码破解案例示范破解某公司会议室路由器密码 公司信息：IT行业；公司名称两个汉字，全部拼音为10个字母；英文简写为4个字母，假设为abcd；会议室在16楼，号码已经忘记，以1601作为示例。 路由器类型：TP-Link品牌某型号路由器，登录地址为192.168.1.1，不具备无线功能，有线登录时也需要账号密码 网管人员：认识的人，性格有点墙头草，容易左右摇摆；一旦跟他说话时语气强硬，对方则深怕会得罪你的样子；开会时经常心不在焉，说话有时不着边际；做事拖沓，有头无尾 破解过程：首先，分析网管人员的性格特点，由于是IT从业人员，因而通常具备较强的密码保护意识，因而不大可能使用无脑型密码，此外，从此人做事的习惯来看，可看出其对专业服务意识及自我认同度较差，不大可能使用严格的加密法。 其次，上述性格类型的人通常有一种不安全感，因而，其设置的密码不大可能使用他自己的个人信息；此外，做事不认真的人通常有一定惰性，其设置的密码不会太长，八位至十位是最有可能的位数。 其三，由上述两条可以判断，密码使用最大的可能要么是公司名全部拼音的10个字母，要么是英文缩写的简单重复或者英文缩写加上1601，也有可能是房间好的简单重复；进一步分析，此网管头脑简单，通常他宁愿使用16011601这样的序列，也不会有那心情去对后面的那个1601进行倒序。 最后，账号名通常会使用约定俗称的字母组成，且很可能是4位到6位，所以，账号很大可能是公司简称abcd。 最终结果： 账号：abcd密码：16011601 从密码逆推网管人员的性格：平时对其印象完全正确，此人可做朋友，因为他没有什么心机，不会害你，但不可共事，因为缺乏责任感。日后项目重要节点的相关事项尽量不能托付给他，即使不得已托付此人，也必须保持高度警惕，不时跟进。然而，非常遗憾的是，最后关头我依然险些栽在此人手里，那是为了校对数据，由于当时系统有多个平台，而校对数据必须在真实平台上进行，在校对前，我特意向他用邮件和电话确定真实平台地址，后来安排了自己公司和合作单位的20几个人校对了整整一天，最后还是发现此人给我的地址是个测试平台地址，气得老子当着公司和他们公司领导的面狠狠地耍了一回酷，不过气归气，工作却得从头再来，于是只好一边找了10几个人，说了半天的好话，熬到半夜两点多才把所有数据校对完毕，91ri.org庆幸总算没有拖慢项目进度！ 破解某同事个人密码 对象个人信息：IT公司中层经理，多个项目参与者及主要负责人；做事认真，有条不紊，名牌大学毕业；为人圆滑、精明——应该说我很少遇到这么聪明的人；对自己的业务能力极度精通，在公司人称“鬼才”；性格平和，对下属非常宽容，经常面带微笑，拥有很强的人格魅力；思维严谨，经常看有关人性和数学方面的书籍 破解过程：首先，由于此人从属于IT行业，加上拥有很高的智商，因而通常拥有很强的密码保护意识，绝不可能使用无脑型密码——应该说，觉得他会使用无脑型密码就是对他智商的侮辱。 其次，他也不大可能会在密码中透露自己的个人信息和爱人的身份信息，使用广州家里的电话号码，办公室号码和手机的可能性也不大，除非是老家的电话号码。 再次，由于其强烈的密码保护意识，他的密码通常会比普通人的要长，有可能会达到13位以上。 再次，最大可能是此人会使用“图腾”，由于其思维的严密性，喜欢数学，空间思维能力较强，会比较注重对称美，加上强烈的密码保护意识，很有可能会使用下划线，并且下划线的位置会高度体现对称美。 再次，其使用的图腾极有可能是很多人平时容易忽略的常识性意象物，并且很有可能与其爱好有关，这时候一个意念物在我脑中一闪而过——圆周率π！印象中第一次接触这个常数倒不是在数学课，而是在历史课上，现在依然记得老师跟我们吹嘘的中国历史，还记得祖冲之以及“3.1415926至3.1415927之间”这句话。的确，对于一个酷爱数学的人来说，如果在数学世界里采用某个常数作为密码的意象物，还有什么比这个东西更合适的？——既是圆身上的东西，本身就是完美的象征，同时其通常被记住的位数是8位，在长度上也非常符合密码使用的习惯。 最后就是组合了，小数点很有可能会采用下划线或者p(point)代替，首选3.1415926，这其实是一个无限循环的数字，而无限的符号我们知道，是一个横着写的8，对于高度注重对称美的数学爱好者来说，很可能会在数字和无限之间进行一下区分，于是，我首先想到的两个密码是3_1415926_8还有3p1415926_8，用其邮箱进行验证，结果均失败，数一下长度，只有11位，而且第一个还没有字母，而前面说过，通常使用下划线的人密码保护意识是很强的，通常使用了下划线，那么，其密码很可能包括数字和字母——字母嘛，首先想到的当然是他的名字缩写，为了不透露他的个人隐私，假设他叫张三好了。最后，当我破解了他的密码的时候，我差点兴奋得跳了起来，足足高兴了几天，连睡觉都合不拢嘴！女朋友很好奇问我为什么这么高兴，我一直都是笑而不语！ 最终结果： 密码：zs_3_1415926_8 从密码逆推此君的性格：此人对自我要求很高，有强烈完美主义倾向——从使用圆周率作为密码并且密码体现高度对称美可以看得出来；其次，此人自信但不自负，如果非常自负，那么，他完全没有必要在在最前面使用自己的姓名，因为通常来说很少有人会想到用圆周率这种意象物作为自己的密码，自负的人会认为使用圆周率已经足够；这种人通常胸怀宽广，能接受别人的意见或者建议，经常会反躬自省自己的错误并予以改正，生活中，他会是一个良师益友，工作上，他会是给力的伙伴，既可深交也可共事。但是，其缺点是做事一旦关乎自己，有时候会过于追求完美，从其密码所使用的下划线高度体现对称可以看得出来，这种人打工迟早会成为一个优秀的项目管理人或高层经理，但是，开拓自己的事业却不容易打破常规。 不管怎样，在工作过程中我一直与此君相处得很好，从来没有红过脸，对我这个脾气暴躁的人来说这是甚为难得的，很大一部分原因我想是源于我对他发自内心的尊重，甚至当我知道了他的密码以后，一直以来还带着深深的负罪感和愧疚感，因而都很少联系他了！ 破解某邻居的QQ密码 对象个人信息：85后，男性，每天都见面，每次见面时都会彼此很客气地打招呼，聊过几次天；聊天过程其发音非常清楚，说话偶尔会骂两句，说话简洁，非常富有条理性，极少包含“那个”，“然后”这种潮汕人俗称“话屎”的词语；他对社会上的一些现象非常强烈的反感；眼神清澈，给人的感觉非常阳光，健康；有时爱与我聊中国古文化，西方启蒙时期的哲学与思想，并且一聊起来双眼发光，极其兴奋。 破解过程：首先，聊天时知道了他的出生年份1987年，同时还知道了他的名字，假设为“李四”，还知道他出身于农村。 其次，眼神清澈，而且一见面就愿意向你敞开心扉讲心里话的人通常涉世未深，通常缺少防范意识，这类人的密码保护意识通常也比较差，猜测其密码有可能是姓名加上出生年月日的组合。 再次，说话条理清晰，不带任何“话屎”，而且喜欢聊哲学，这让我想起我的很多射手座朋友，以次推断他可能属于射手座。 再次，射手座生于每年的11月23日——12月21日，尝试用他的名字拼命lisi加上19871201这样的组合进行测试，尝试大约三十次全部失败。 突然，我想得他来自农村，父母在80年代那个时候，极有可能仍在使用农历，因此，注册他身份证的时候，很有可能跟我一样采用农历，上网用万年历查下1987年阳历11月23日——12月21日这段时期所对应的农历日期，对应的农历时间段是10月初三至11月初一。 最终结果： 密码：lisi_19871011 从密码逆推此君的性格：此君懂得使用下划线，说明他还有一定的密码保护意识，但是，从其使用自己姓名加上生日这一点可以判断他社会经验缺乏，应该较少与社会上的人接触，应该是宅男一类的人，工作不可能是销售类和管理类，很有可能是技术类。这种人通常比较爱交朋友，也非常值得交往，是那种你有万贯家财，到了重要的时候都可以放心托付给他一类的人。后来与他进一步的交往中一步步印证了我的论断。 个人密码加密建议需要使用密码的场合通常是银行的账号，其他的绝大多数则通常是上网的各种邮箱、某些客户端软件、或者论坛的登录密码。绝大多数人上网时候都会使用一个固定的密码，而且基本上没有修改密码的习惯，因此，只要你在某个论坛的密码一旦泄露，那么，很可能你的所有邮箱、游戏账号等密码都会被人家一锅端。 存在这种现象其实很容易理解，就是因为人的惰性，而且现在的网站那么多，如果针对各个网站去设置不同的密码，对于很多人来说，几乎是不可能完成的任务，因为这样你不仅需要记忆几十个甚至上百个密码，还必须记忆各个密码与各个网站的对应关系。 其实，有一种办法可以保证你的密码可以随着不同网站而进行变换，同时又不需要记忆对应关系的。以下就以这种方法作为切入点，对大家的密码设置提供一些建议，这种办法我们不妨命名为“随机有据字符加固定序列密码”。 随机有据字符加固定序列密码这个名词拥有三个关键词——随机、有据、固定。先说“固定”，固定就是指你经常使用的密码，在你每个密码中都会出现的一个字符段，假如你已经用惯了某个密码，并且这个密码你把他用在绝大多数的地方，那么，就以这个密码作为固定序列，放在你新密码之中；所谓“随机”，指的是你设置的时候事先并不知道要设置什么样的字符，而是根据不同的网站或客户端进行变动，但是，其变动是有规则的，这个规则是你自己定的，而且不会让任何人知道；所谓“有据”，这个根据，则与网站的某一种要素挂钩，我推荐使用网站的名字，目的是方便你自己的记忆。以下我举个例子，你就会很清楚地理解这种所谓的“随机有据字符加固定序列密码”的特点了。 假如你以往所常用的密码是qwert123，那么，在你的新密码中，同样保留这个字段，现在你自己定义这样一种规则：以网站的名称作为依据，登录任何一个网站，就以其名称作为参照物，截取其名称的第一个字母（或数字）和最后一个字母（数字），分别放在固定密码段的开头和结尾。例如：上新浪网，其名称为sina，那么，分别截取s和a，添加在你的固定密码组开头和结尾，那么，你在新浪上的密码就是sawrt123a；如果是迅雷的客户端，取其网站名Thunder的首字母t和最后一个字母r，这样你的迅雷地址就变成了tawrt123r，由于多了这样一层保护，那么，即使你的新浪微博密码丢失了，那么，别人也不容易用这个密码来盗取你的迅雷账号、qq号码，而且由于这种密码命名规则简单，你完全可以照用你原来的密码段，不用去修改密码输入的习惯。 上述的命名规则完全由你自己来定，除了那种截取头尾的规则以外，还可以这样：截取网站名的首个字母或数字，同时数一下这个网站名的位数，如果是奇数，字母取大写；如果是偶数，字母取小写，将它加到你固定密码组的开头或者结尾；如果截取到的是数字，那么，同样数一下网站名的位数，如果是奇数，那么保留这样一个位数，如果是偶数，则将其双写，加到你的固定密码序列上。示例：sina，baidu，163和2144，sina包含4个字母，所以截取第一个字母的小写s；baidu是5个字母，于是截取其第一个字母的大写B；163是3个字符，于是取其第一个数字1,2144是4个字符，于是取其第一个数字的复写22，添加到你的固定密码组上，于是，你的新浪密码是sqwert123，百度密码则变成了Bqwert123，网易邮箱变成了1qwert123,2144网站的密码则变成了22qwert123。总之，怎么组合就看你自己考虑了，但随机段截取的规则一定要清晰可行，并且自己要牢记，而且随机字段包含的信息越少越好，太多未必能保护自己的密码，相反更容易让有心人发现规律。 关于固定字符段的建议 坚决不使用自己证件上所能查看到的信息，包括生日、证件号码、姓名及其缩写等等，同样也坚决不使用爱人和孩子的同类相关信息。更不要使用无脑型密码。 可以使用电话号码，但是电话号码尽量使用老家的电话号码，并且对该电话号码添加或者减少一至两位的防盗码。 可以使用爱人的昵称，但这个昵称最好是只有你和对方彼此知道的，尤其是互相吹枕头风的时候才使用的那种称谓。 对于银行卡密码，如果你非要向爱人表达爱意，也可以使用你们的结婚纪念日或者其生日，但是一定进行诸如倒序、移位、加码等相关操作。例如：你们的结婚纪念日是2012年7月5日，你非要使用201275或者120775这样的数字，用倒序的观点，就成了572102和577021,；用移位的观点，不妨设置成720125或者071275；用加码的观点，可以是只加一位，变成201276和120776，也可以每位加1，312386,231886，什么规则由你自己选择，关键是你自己要容易记住，而别人又难以看懂。不要小看这种简单的操作，它很可能就是防止你密码泄露的关键。 不需要考虑对称美，密码又不是让人看的，相反是见不得光的，见不得光的对称只能是孤芳自赏，因而，建议你采用下划线或者数字的时候，将其打乱之后插入字母中，最好其结构是一旦写出来会让人看着很别扭的那种——看着越别扭的密码越是好密码，相信我没错的！ 强烈建议使用图腾，因为那是你内心深处的东西，有时候即使是你最亲密的人都未必真正了解你内心深处在想什么，陌生人更加难以猜测。 某些字母和数字之间由于形很相似，因而，当你需要使用数字时，不妨用字母进行一下伪装，反之亦然。包括1和l，2和z，6和b，8和B，9和q，0和o。 没有必要定期修改你的固定字符段，那个意义不大，相反很可能会很容易就把自己弄晕，当然前提是你能做到上述提到的那些密码规则。 关于安全问题的建议现在有很多网站尤其是论坛，为了所谓的安全性考虑，用户注册时通常会要求设置安全问题，以我自己的经验来看，那几乎是毫无作用的，这些安全问题通常会让你从8个左右的问题选择一个进行回答，很多人为了简单易记，通常会选择生日，这本来是没有什么问题的，问题在于电脑是没有智能的，它没有所谓的时间概念，相反，却有严格的格式概念，例如：某人生日是1980年1月1日，对于人来说，当某人问起你生日的时候，无论你是回答1980年1月1日，还是80年元旦，亦或是800101，都是一个概念，这个概念指向同一个目标，这个目标就是时间。然而对电脑来说，这几个却是完全不同的概念，对于电脑来说19800101与8011有着极大的差别，因而，有可能一些不同网站问你的是同一个问题，但是你在回答的时候却使用了不同的格式，这样注册多了，最后很可能连你自己都搞混了，有时候甚至会导致你自己连密码都修改不了。 因而，我的习惯是除非网站指定安全问题为必填，否则我一律不填，如果填的话，我会随便选择一个问题，并且任何网站的任何安全问题，我都使用同一个标准格式，以前我使用的是“关你鸟事啊”，电脑问我你小学上那所学校啊？你爱人叫什么名字？我都一律回答“关你鸟事啊”——本来我怎样就不关你电脑你的事，还不是“关你鸟事”吗？！","categories":[],"tags":[{"name":"密码学","slug":"密码学","permalink":"https://blog.fifu.fun/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"},{"name":"心理学","slug":"心理学","permalink":"https://blog.fifu.fun/tags/%E5%BF%83%E7%90%86%E5%AD%A6/"}]},{"title":"hexo博客框架+matery主题搭建以及云服务器部署","slug":"hexo","date":"2021-11-24T11:00:32.119Z","updated":"2021-11-26T15:31:41.899Z","comments":true,"path":"2021/11/24/hexo/","link":"","permalink":"https://blog.fifu.fun/2021/11/24/hexo/","excerpt":"","text":"阅读须知： 系统环境： 本机：win10系统虚拟机：CentOS7-64位（新装的）云服务器：CentOS7-64位注意：以下代码中#代表root权限，$代表普通用户 如果你也跟我一样新装了个虚拟机centos7系统，建议先看看我的另一篇博客 一、初步搭建hexo环境(注意：我这是在虚拟机中的CentOS7系统上操作)1、安装git（如果有则无须安装）先介绍一种简单的方法（直接安装）但这种安装git版本过低yum install -y git–查看git版本git --version 这时候你会发现git版本会过低，我这里的是1.8.3.1下面我将介绍最新版本git安装 先卸载旧版本 $ sudo yum remove -y git 安装git新版本所需的依赖包 $ sudo yum install -y curl-devel expat-devel gettext-devel openssl-devel zlib-devel $ sudo yum install -y gcc perl-ExtUtils-MakeMaker 从我的github仓库源中下载最新git安装包并解压到/usr/local/src目录下 $ wget https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.19.0.tar.gz $ sudo tar -zxvf git-2.19.0.tar.gz -C /usr/local/src 如果你的机器上没有安装wget则先安装sudo yum install -y wget这里解释一下 -y 这个参数的作用：无需用户确认要发生的操作（也就是经常会弹出的yes/no/Enter 直接确认跳过） 编译并安装 $ cd /usr/local/src/git-2.19.0/ $ sudo make prefix=/usr/local/git all # 编译源码 $ sudo make prefix=/usr/local/git install #安装到/usr/local/git 修改配置文件（添加环境变量） $ sudo vi /etc/profile #在文件末尾添加export PATH=/usr/local/git/bin:$PATH 保存退出 更新修改过后的配置文件 $ source /etc/profile #查看git版本检查一下是否安装成功 $ git --version 顺便添加你的用户和邮箱 # git config --global user.name \"yourname\" # git config --global user.email \"youremail\" 2、安装nodejs在安装hexo-cli之前需要借助nodejs 去nodejs官网下载Linux二进制64bit压缩包，当然如果你的系统是32位的，即选择32位的，这里我直接用wget命令+ url 直接下载到本系统上 # wget https://nodejs.org/dist/v12.13.1/node-v12.13.1-linux-x64.tar.xz 在/usr/local/目录下创建一个nodejs文件夹 # mkdir /usr/local/nodejs 将压缩包解压到/usr/local/nodejs/下 # tar -Jxvf node-v12.13.1-linux-x64.tar.xz -C /usr/local/nodejs 为nodejs添加环境变量，即将/usr/local/nodejs/node-v12.13.1-linux-x64/bin添加到环境变量$PATH中，当然你也可以用创建软连接(即windows中的快捷方式)的方式代替，只不过第二种显得有点麻烦 查看一下当前进程的环境变量值 # echo $PATH 配置nodejs的环境 # vi /etc/profile 在文件末尾加上：export PATH=/usr/local/nodejs/node-v12.13.1-linux-x64/bin:$PATH保存退出并更新profile文件 # source /etc/profile 这里提一下为什么要写成PATH=/usr/local/nodejs/node-v12.13.1-linux-x64/bin:$PATH而不写成PATH=$PATH:/usr/local/nodejs/node-v12.13.1-linux-x64/bin当执行某个命令时，如果找不到会从环境变量中去查找对应的目录下是否有该命令，而查找则是按照从左到右的顺序进行查找，所以这就可以避免旧版本在新版本之前而使得新版本不能被应用的情况 再次查看环境变量检查是否添加成功 # echo $PATH 查看nodejs版本检查是否安装成功 # node -v # npm -v 3、安装hexo接下来用npm来安装hexo-cli,但是在这不推荐大家使用，由于安装源在国外，下载过于缓慢，所以我们可以用国内的阿里巴巴镜像源进行快速下载安装 npm 安装方式 # npm install -g hexo-cli cnpm 安装方式 # npm install -g cnpm --registry=https://registry.npm.taobao.org # cnpm install -g hexo-cli 查看hexo版本检查是否已安装好 # hexo -v 4、用hexo生成博客框架 随便创建一个文件夹，这个文件夹用来存放hexo框架所有文件的（换而言之这个文件夹就是你的博客根目录），然后初始化该文件 # mkdir myblog #这里改一下myblog的所有者和所有组(jake为你自己的用户名) # chown jake:jake -R myblog # cd myblog # hexo init 用hexo -s 命令启动该博客，接着用浏览器输入localhost:4000 访问，检查是否成功 # hexo s 默认端口4000，你也可以自定义指定端口为5000# hexo s -p 5000 另外介绍一个命令（后面要用到），用hexo g命令生成部署该博客（实质会生成一个public文件夹，这个文件夹下都是html静态页面） # hexo g 5、win10系统访问虚拟机端口由于我所有hexo部署都在虚拟机系统上，怎么通过win10主机访问我的博客页面呢 开放虚拟机CentOS系统的4000端口 # firewall-cmd --zone=public --add-port=4000/tcp --permanent 重启防火墙 # systemctl restart firewalld.service 接下来你就可以通过win10上的浏览器输入虚拟机ip:4000访问你的博客了，当你看到如下图所示，那么恭喜你成功完成了第一步！ 二、在第一步的基础上换一个华丽的主题（也就是matery），再用GitHub作为服务器来被外界访问1、下载matery主题从github上下载一个matery主题(当前目录下)，然后把这个文件移动到myblog/themes/下 # git clone https://github.com/blinkfoxhexo-theme-matery.git #/home/jake/myblog是我的博客根目录，需要根据自身情况予以修改 # mv hexo-theme-matery /home/jake/blog/themes/ 2、修改配置文件_config.yml 3、切换到myblog文件下重新启动# hexo s 4、部署GitHub接下来就部署GitHub了，前提你得有个GitHub账号，没有的话去注册一个（这里不提供教程，自己百度） 登录你的GitHub，创建一个仓库 按照规则为你的仓库起名（这个名字就是别人可以访问你博客的网址） 打开_config.yml配置文件，配置你的仓库 # vi _config.yml 因为需要将项目推送到GitHub，所以需要安装一个插件 # cnpm install --save hexo-deployer-git 装好后直接用hexo g 生成博客文件，再用hexo d 推送项目到github上 # hexo g # hexo d 换用ssh公钥你会发现每次执行hexo d 推送到github上时需要输入账号和密码，这有点令人不耐烦，因此下面给大家展示一种用ssh公钥的方法去部署github 在虚拟机CentOS系统上下载ssh key # ssh-keygen -t rsa #一路回车即可，然后查看/root下的文件夹 # ls -al /root 这时候你会发现在root下有一个隐藏文件.ssh，打开.ssh下的 id_rsa.pub文件，复制此文件的全部内容,粘贴到下图所示位置 打开github 相应的也要修改 _config.yml配置文件 5、收获成功的喜悦当你看到这里恭喜你已经成功完成了第一份属于自己的博客了!但你会发现，你通过github访问你的博客会很卡，简单说一下原因。github服务器在国外，所以访问速度很慢，这里提供一个简单的解决办法 可以用国内的coding，类似github，去coding官网注册一个账号，记得要实名认证，然后仿照github的操作将ssh key内容粘贴到指定区域 同样修改 _config.yml配置文件 用hexo clean清理一下 ==&gt; hexo g生成 ==&gt; hexo d部署推送博客 接下来登录coding账号，查看仓库是存在项目，确定之后开始创建静态网站，步骤如下图所示 6、温馨提示最后温馨提示一下，matery主题虽然应用到hexo框架上了，但仍需要改动一些配置文件，根据每个人不同的喜好可以制定自己独特的博客，至于个性化设置这里就不介绍了，需要的小伙伴可以去参考以下链接，看看大佬们是如何设计优化matery主题和hexo博客框架的。 参考链接:洪卫の博客:Hexo+Github博客搭建完全教程韦阳的博客:超详细Hexo+Github博客搭建小白教程 如果实在不懂的小伙伴可以在下方留言，也可以参考一下这个大佬的视频hexo博客搭建 三、将第二步中的github和coding替换为自己的云服务器，下面介绍如何部署好云服务器1. 创建git用户当你做完前面两大步，这一步就相当的简单，原理都一样，首先在你的云服务机上，创建一个git用户,并指定密码 # useradd git # passwd git 2. 部署密钥到服务器上切换到git用户，创建.ssh文件夹，以及在.ssh下创建authorized_keys文件,将ssh_key（也就是第二大步里面的那个密钥内容）粘贴到authorized_keys文件中 # su git # 切换到git用户的家目录 # cd ~ $ mkdir .ssh $ vim ~/.ssh/autorized_keys # wq保存退出 # 修改一下.ssh 和 authorized_key 的权限，保证不被其他用户或用户组访问以及修改 $ chmod 600 ~/.ssh/authorized_key $ chmod 700 ~/.ssh 没有安装vim的 安装一下： yum install -y vim 3. 安装nginx# yum install -y nginx # systemctl start nginx.service # 启动nginx服务 当你通过外网访问你的服务器ip可以看到nginx的欢迎页面就说明你安装成功了。这里说一下，有可能你显示的时centos欢迎页面，这也没问题。（我的就是）打开/etc/nginx/nginx.conf配置文件（如果找不到，你也可以用nginx -t查看配置文件在哪） 接下来创建你的博客根目录(我创建的根目录是/home/git/blog) $ mkdir ~/blog 修改nginx配置文件如下（注意以下两个地方）第一个是权限问题第二个是访问路径配置好就重启一下nginx # systemctl restart nginx.service 4.创建git仓库创建git仓库以及用hooks钩子同步到你的博客根目录 $ cd ~ $ git init --bare blog.git $ ls -l blog.git # 修改一下权限 # chown git:git -R blog.git # 创建post-receive文件 $ vim blog.git/hooks/post-receive 添加以下内容： #!/bin/shgit –work-tree=/home/git/blog –git-dir=/home/git/blog.git checkout -f/home/git/blog这是你刚刚创建的博客根目录赋予其执行权限 $ chmod +x /home/git/blog.git/hooks/post-receive 接下来创建git-receive-pack和git-upload-pack软连接,以防执行hexo d 命令时报错找不到 # sudo ln -s /usr/local/git/bin/git-receive-pack /usr/bin/git-recei # sudo ln -s /usr/local/git/bin/git-upload-pack /usr/bin/git-upload-pack 5.修改配置文件到本地的虚拟机系统上修改博客_config.yml配置文件添加 git@yourserver_ip:/home/git/blog.gitgit服务器地址 特别注意：如果你之前跟我一样配置三个git服务器（github、coding、自己的云服务器）,那么你就要删除一下本地系统中的.ssh文件中的known_hosts只要你更改了_config.yml文件中git服务器地址，最好删除一下known_hosts执行hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 四、总结一下可能会碰到的错误 经常会发生的错误：权限问题引起的。（这是个家常便饭，但你清楚了权限的重要性，那么你以后在linux系统上配置安装一些程序就很容易了）有时候你在安装依赖文件或者执行某些命令如hexo d hexo clean hexo g等等会报错，那是因为你使用的当前用户权限不够。包括你在向git服务器推送项目时，你的服务器那边git用户权限不足而导致操作不了某些文件。 所以建议你把博客根目录下所有文件的使用者更改为你当前用户。当然你也可以用root用户去操作，但是经常切换用户很麻烦，或者使用sudo借用root权限也要输入密码。如：假设你的博客根目录路径为/home/jake/myblog那么使用以下命令更改权限 $ sudo chown jake:jake -R /home/jake/myblog/* 访问网页出现404错误，这种很好解决，一是你的nginx路径配错了，二是访问端口未开放，ip配置不对。 hexo d推送项目到git服务器时验证失败，首先确保你把本地的ssh_key密钥内容复制到了你的git服务器上了，然后删除你本地的.ssh文件夹下的known_hosts文件，重新hexo d,还有一种可能，你没有装推送必要的依赖插件hexo-deployer-git 五、讨论以及心得有人可能会问我为什么不直接用windows作为本地进行操作，而要大费周章地去搞个虚拟机系统操作。 或许你会觉得Windows上操作会更容易，当然有些小伙伴可能想用windows搭建hexo博客，这里我就不介绍了。 其实用windows去搭建hexo博客的话我个人感觉有些别扭，因为你在windows操作的话在安装完git之后也是用git bash来部署安装hexo博客的，等价于用git bash 来营造一个Linux系统终端； 显得有点多此一举，况且多用用Linux系统对某些小伙伴以后的学习是有帮助的。 比如：虚拟机系统如何查看端口状态以及端口的开放和关闭，如何开启和关闭防火墙、虚拟机网速问题、git服务器的安装和使用、github、coding版本项目管理工具的使用、初步认识nginx负载均衡等等，这些都是我在搭建hexo中需要了解的知识。另外最重要的是我又对Linux系统有了进一步的了解 六、参考链接 洪卫の博客:Hexo+Github博客搭建完全教程 韦阳的博客:超详细Hexo+Github博客搭建小白教程 Hexo 博客部署到腾讯云服务器全流程 centos7开放、关闭及查看端口 廖雪峰的Git教程 文章来源","categories":[{"name":"Linux","slug":"Linux","permalink":"https://blog.fifu.fun/categories/Linux/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://blog.fifu.fun/tags/Hexo/"},{"name":"转载","slug":"转载","permalink":"https://blog.fifu.fun/tags/%E8%BD%AC%E8%BD%BD/"},{"name":"Linux","slug":"Linux","permalink":"https://blog.fifu.fun/tags/Linux/"}]},{"title":"命令：Screen","slug":"CentOSCommandScreen","date":"2020-02-14T20:14:48.000Z","updated":"2021-11-25T05:20:28.967Z","comments":true,"path":"2020/02/15/CentOSCommandScreen/","link":"","permalink":"https://blog.fifu.fun/2020/02/15/CentOSCommandScreen/","excerpt":"","text":"一、背景系统管理员经常需要SSH 或者telent 远程登录到Linux 服务器，经常运行一些需要很长时间才能完成的任务，比如系统备份、ftp 传输等等。通常情况下我们都是为每一个这样的任务开一个远程终端窗口，因为它们执行的时间太长了。必须等待它们执行完毕，在此期间不能关掉窗口或者断开连接，否则这个任务就会被杀掉，一切半途而废了。 二、简介GNU Screen是一款由GNU计划开发的用于命令行终端切换的自由软件。用户可以通过该软件同时连接多个本地或远程的命令行会话，并在其间自由切换。 GNU Screen可以看作是窗口管理器的命令行界面版本。它提供了统一的管理多个会话的界面和相应的功能。 会话恢复只要Screen本身没有终止，在其内部运行的会话都可以恢复。这一点对于远程登录的用户特别有用——即使网络连接中断，用户也不会失去对已经打开的命令行会话的控制。只要再次登录到主机上执行screen -r就可以恢复会话的运行。同样在暂时离开的时候，也可以执行分离命令detach，在保证里面的程序正常运行的情况下让Screen挂起（切换到后台）。这一点和图形界面下的VNC很相似。 多窗口在Screen环境下，所有的会话都独立的运行，并拥有各自的编号、输入、输出和窗口缓存。用户可以通过快捷键在不同的窗口下切换，并可以自由的重定向各个窗口的输入和输出。Screen实现了基本的文本操作，如复制粘贴等；还提供了类似滚动条的功能，可以查看窗口状况的历史记录。窗口还可以被分区和命名，还可以监视后台窗口的活动。 会话共享Screen可以让一个或多个用户从不同终端多次登录一个会话，并共享会话的所有特性（比如可以看到完全相同的输出）。它同时提供了窗口访问权限的机制，可以对窗口进行密码保护。 GNU’s Screen 官方站点：http://www.gnu.org/software/screen/ 三、语法# screen [-AmRvx -ls -wipe][-d &lt;作业名称>][-h &lt;行数>][-r &lt;作业名称>][-s ][-S &lt;作业名称>] 参数说明 -A 将所有的视窗都调整为目前终端机的大小。 -d &lt;作业名称> 将指定的screen作业离线。 -h &lt;行数> 指定视窗的缓冲区行数。 -m 即使目前已在作业中的screen作业，仍强制建立新的screen作业。 -r &lt;作业名称> 恢复离线的screen作业。 -R 先试图恢复离线的作业。若找不到离线的作业，即建立新的screen作业。 -s 指定建立新视窗时，所要执行的shell。 -S &lt;作业名称> 指定screen作业的名称。 -v 显示版本信息。 -x 恢复之前离线的screen作业。 -ls或--list 显示目前所有的screen作业。 -wipe 检查目前所有的screen作业，并删除已经无法使用的screen作业。 四、常用screen参数screen -S yourname -> 新建一个叫yourname的session screen -ls -> 列出当前所有的session screen -r yourname -> 回到yourname这个session screen -d yourname -> 远程detach某个session screen -d -r yourname -> 结束当前session并回到yourname这个session 在每个screen session 下，所有命令都以 ctrl+a(C-a) 开始。 C-a ? -> 显示所有键绑定信息 C-a c -> 创建一个新的运行shell的窗口并切换到该窗口 C-a n -> Next，切换到下一个 window C-a p -> Previous，切换到前一个 window C-a 0..9 -> 切换到第 0..9 个 window Ctrl+a [Space] -> 由视窗0循序切换到视窗9 C-a C-a -> 在两个最近使用的 window 间切换 C-a x -> 锁住当前的 window，需用用户密码解锁 C-a d -> detach，暂时离开当前session，将目前的 screen session (可能含有多个 windows) 丢到后台执行，并会回到还没进 screen 时的状态，此时在 screen session 里，每个 window 内运行的 process (无论是前台/后台)都在继续执行，即使 logout 也不影响。 C-a z -> 把当前session放到后台执行，用 shell 的 fg 命令则可回去。 C-a w -> 显示所有窗口列表 C-a t -> Time，显示当前时间，和系统的 load C-a k -> kill window，强行关闭当前的 window C-a [ -> 进入 copy mode，在 copy mode 下可以回滚、搜索、复制就像用使用 vi 一样 C-b Backward，PageUp C-f Forward，PageDown H(大写) High，将光标移至左上角 L Low，将光标移至左下角 0 移到行首 $ 行末 w forward one word，以字为单位往前移 b backward one word，以字为单位往后移 Space 第一次按为标记区起点，第二次按为终点 Esc 结束 copy mode C-a ] -> Paste，把刚刚在 copy mode 选定的内容贴上 五、使用 screen5.1 安装screen流行的Linux发行版（例如Red Hat Enterprise Linux）通常会自带screen实用程序，如果没有的话，可以从GNU screen的官方网站下载。 [root@TS-DEV ~]# yum install screen [root@TS-DEV ~]# rpm -qa|grep screen screen-4.0.3-4.el5 [root@TS-DEV ~]# 5.2 创建一个新的窗口安装完成后，直接敲命令screen就可以启动它。但是这样启动的screen会话没有名字，实践上推荐为每个screen会话取一个名字，方便分辨： [root@TS-DEV ~]# screen -S david screen启动后，会创建第一个窗口，也就是窗口No. 0，并在其中打开一个系统默认的shell，一般都会是bash。所以你敲入命令screen之后，会立刻又返回到命令提示符，仿佛什么也没有发生似的，其实你已经进入Screen的世界了。当然，也可以在screen命令之后加入你喜欢的参数，使之直接打开你指定的程序，例如： [root@TS-DEV ~]# screen vi david.txt screen创建一个执行vi david.txt的单窗口会话，退出vi 将退出该窗口/会话。 5.3 查看窗口和窗口名称打开多个窗口后，可以使用快捷键C-a w列出当前所有窗口。如果使用文本终端，这个列表会列在屏幕左下角，如果使用X环境下的终端模拟器，这个列表会列在标题栏里。窗口列表的样子一般是这样： 0$ bash 1-$ bash 2*$ bash 这个例子中我开启了三个窗口，其中*号表示当前位于窗口2，-号表示上一次切换窗口时位于窗口1。 Screen默认会为窗口命名为编号和窗口中运行程序名的组合，上面的例子中窗口都是默认名字。练习了上面查看窗口的方法，你可能就希望各个窗口可以有不同的名字以方便区分了。可以使用快捷键C-a A来为当前窗口重命名，按下快捷键后，Screen会允许你为当前窗口输入新的名字，回车确认。 5.4 会话分离与恢复你可以不中断screen窗口中程序的运行而暂时断开（detach）screen会话，并在随后时间重新连接（attach）该会话，重新控制各窗口中运行的程序。例如，我们打开一个screen窗口编辑/tmp/david.txt文件： [root@TS-DEV ~]# screen vi /tmp/david.txt 之后我们想暂时退出做点别的事情，比如出去散散步，那么在screen窗口键入C-a d，Screen会给出detached提示：暂时中断会话 半个小时之后回来了，找到该screen会话： [root@TS-DEV ~]# screen -ls 重新连接会话： [root@TS-DEV ~]# screen -r 12865 一切都在。 当然，如果你在另一台机器上没有分离一个Screen会话，就无从恢复会话了。这时可以使用下面命令强制将这个会话从它所在的终端分离，转移到新的终端上来： 5.5 清除dead 会话如果由于某种原因其中一个会话死掉了（例如人为杀掉该会话），这时screen -list会显示该会话为dead状态。使用screen -wipe命令清除该会话： 5.6 关闭或杀死窗口正常情况下，当你退出一个窗口中最后一个程序（通常是bash）后，这个窗口就关闭了。另一个关闭窗口的方法是使用C-a k，这个快捷键杀死当前的窗口，同时也将杀死这个窗口中正在运行的进程。 如果一个Screen会话中最后一个窗口被关闭了，那么整个Screen会话也就退出了，screen进程会被终止。 除了依次退出/杀死当前Screen会话中所有窗口这种方法之外，还可以使用快捷键C-a :，然后输入quit命令退出Screen会话。需要注意的是，这样退出会杀死所有窗口并退出其中运行的所有程序。其实C-a :这个快捷键允许用户直接输入的命令有很多，包括分屏可以输入split等，这也是实现Screen功能的一个途径，不过个人认为还是快捷键比较方便些。 六、screen 高级应用6.1 会话共享还有一种比较好玩的会话恢复，可以实现会话共享。假设你在和朋友在不同地点以相同用户登录一台机器，然后你创建一个screen会话，你朋友可以在他的终端上命令： [root@TS-DEV ~]# screen -x 这个命令会将你朋友的终端Attach到你的Screen会话上，并且你的终端不会被Detach。这样你就可以和朋友共享同一个会话了，如果你们当前又处于同一个窗口，那就相当于坐在同一个显示器前面，你的操作会同步演示给你朋友，你朋友的操作也会同步演示给你。当然，如果你们切换到这个会话的不同窗口中去，那还是可以分别进行不同的操作的。 6.2 会话锁定与解锁Screen允许使用快捷键C-a s锁定会话。锁定以后，再进行任何输入屏幕都不会再有反应了。但是要注意虽然屏幕上看不到反应，但你的输入都会被Screen中的进程接收到。快捷键C-a q可以解锁一个会话。 也可以使用C-a x锁定会话，不同的是这样锁定之后，会话会被Screen所属用户的密码保护，需要输入密码才能继续访问这个会话。 6.3 发送命令到screen会话在Screen会话之外，可以通过screen命令操作一个Screen会话，这也为使用Screen作为脚本程序增加了便利。关于Screen在脚本中的应用超出了入门的范围，这里只看一个例子，体会一下在会话之外对Screen的操作： [root@TS-DEV ~]# screen -S sandy -X screen ping www.baidu.com 这个命令在一个叫做sandy的screen会话中创建一个新窗口，并在其中运行ping命令。 6.4 屏幕分割现在显示器那么大，将一个屏幕分割成不同区域显示不同的Screen窗口显然是个很酷的事情。可以使用快捷键C-a s将显示器水平分割，Screen 4.00.03版本以后，也支持垂直分屏，快捷键是C-a |。分屏以后，可以使用C-a 在各个区块间切换，每一区块上都可以创建窗口并在其中运行进程。 可以用C-a X快捷键关闭当前焦点所在的屏幕区块，也可以用C-a Q关闭除当前区块之外其他的所有区块。关闭的区块中的窗口并不会关闭，还可以通过窗口切换找到它。 6.5 C/P模式和操作screen的另一个很强大的功能就是可以在不同窗口之间进行复制粘贴了。使用快捷C-a键 &lt;Esc&gt;或者C-a [可以进入copy/paste模式，这个模式下可以像在vi中一样移动光标，并可以使用空格键设置标记。其实在这个模式下有很多类似vi的操作，譬如使用/进行搜索，使用y快速标记一行，使用w快速标记一个单词等。关于C/P模式下的高级操作，其文档的这一部分有比较详细的说明。 一般情况下，可以移动光标到指定位置，按下空格设置一个开头标记，然后移动光标到结尾位置，按下空格设置第二个标记，同时会将两个标记之间的部分储存在copy/paste buffer中，并退出copy/paste模式。在正常模式下，可以使用快捷键C-a ]将储存在buffer中的内容粘贴到当前窗口。 6.6 更多screen功能同大多数UNIX程序一样，GNU Screen提供了丰富强大的定制功能。你可以在Screen的默认两级配置文件/etc/screenrc和$HOME/.screenrc中指定更多，例如设定screen选项，定制绑定键，设定screen会话自启动窗口，启用多用户模式，定制用户访问权限控制等等。如果你愿意的话，也可以自己指定screen配置文件。 以多用户功能为例，screen默认是以单用户模式运行的，你需要在配置文件中指定multiuser on 来打开多用户模式，通过acl*（acladd,acldel,aclchg...）命令，你可以灵活配置其他用户访问你的screen会话。更多配置文件内容请参考screen的man页。","categories":[{"name":"学习","slug":"学习","permalink":"https://blog.fifu.fun/categories/%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"转载","slug":"转载","permalink":"https://blog.fifu.fun/tags/%E8%BD%AC%E8%BD%BD/"},{"name":"Linux","slug":"Linux","permalink":"https://blog.fifu.fun/tags/Linux/"}]},{"title":"一个开源、轻量且类似于Servo/Ngrok的内网穿透工具","slug":"AnOpenSource-LightweightIntranetPenetrationToolSimilarToServo-Ngrok","date":"2020-02-14T20:11:03.000Z","updated":"2021-11-24T11:00:32.102Z","comments":true,"path":"2020/02/15/AnOpenSource-LightweightIntranetPenetrationToolSimilarToServo-Ngrok/","link":"","permalink":"https://blog.fifu.fun/2020/02/15/AnOpenSource-LightweightIntranetPenetrationToolSimilarToServo-Ngrok/","excerpt":"","text":"说明：sish是一个SSH服务器，仅用于远程端口转发，可以快速将本地端口暴露在外网，作者声称其为Servo/Ngrok替代方案，仅使用SSH的HTTP(S)、WS(S)、TCP隧道连接到他们的localhost服务器，该工具和Servo差不多一样，不同就是Servo官方提供了免费的SSH客户端，而sish作者提供的客户端貌似因为滥用关闭了，所以就需要我们自己搭建了，这里就水下Docker和手动安装。 Docker安装Github地址：https://github.com/antoniomika/sish 1、安装Docker #CentOS 6 rpm -iUvh http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm yum update -y yum -y install docker-io service docker start chkconfig docker on #CentOS 7、Debian、Ubuntu curl -sSL https://get.docker.com/ | sh systemctl start docker systemctl enable docker2、拉取镜像这里由于直接使用ip的话，只能用于转发TCP，HTTP(S)等就需要配置下域名了，所以以下全部默认使用域名。 先解析一个主/泛域名到服务器ip，比如解析moerats.com、*.moerats.com到服务器ip。 然后再参考下面的参数详解，再自行修改部分参数后，使用命令： #配置http域名 docker run -d --name sish \\ --restart=always \\ -v ~/sish/keys:/keys \\ -v ~/sish/pubkeys:/pubkeys \\ --net=host antoniomika/sish \\ -sish.addr=:3333 \\ -sish.http=:80 \\ -sish.keysdir=/pubkeys \\ -sish.pkloc=/keys/ssh_key \\ -sish.forcerandomsubdomain=false \\ -sish.domain moerats.com \\ -sish.bindrandom=false \\ -sish.redirectrootlocation https://www.baidu.com #配置https域名，这里需要提供泛域名证书 docker run -d --name sish \\ --restart=always \\ -v ~/sish/ssl:/ssl \\ -v ~/sish/keys:/keys \\ -v ~/sish/pubkeys:/pubkeys \\ --net=host antoniomika/sish \\ -sish.addr=:3333 \\ -sish.https=:443 \\ -sish.http=:80 \\ -sish.httpsenabled=true \\ -sish.httpspems=/ssl \\ -sish.keysdir=/pubkeys \\ -sish.pkloc=/keys/ssh_key \\ -sish.forcerandomsubdomain=false \\ -sish.domain moerats.com \\ -sish.bindrandom=false \\ -sish.redirectrootlocation https://www.baidu.com部分参数如下： -sish.addr=:3333 #ssh监听地址 -sish.forcerandomsubdomain=false #是否强制随机子域，这个建议关掉 -sish.bindrandom=false #是否随机绑定端口，这个建议关掉 -sish.domain moerats.com #使用的域名 -sish.redirectrootlocation https://www.baidu.com #主域名(-sish.domain参数)强制跳转到该地址 -sish.httpspems=/ssl #泛域名SSL证书路径，存放路径~/sish/ssl，证书命名格式fullchain.pem和privkey.pem其他参数默认即可，也可以自行添加或修改其它参数。 全部参数如下： Usage of sish: -sish.addr string The address to listen for SSH connections (default &quot;localhost:2222&quot;) -sish.auth Whether or not to require auth on the SSH service -sish.bannedcountries string A comma separated list of banned countries -sish.bannedips string A comma separated list of banned ips -sish.bannedsubdomains string A comma separated list of banned subdomains (default &quot;localhost&quot;) -sish.bindrandom Bind ports randomly (OS chooses) (default true) -sish.bindrange string Ports that are allowed to be bound (default &quot;0,1024-65535&quot;) -sish.cleanupunbound Whether or not to cleanup unbound (forwarded) SSH connections (default true) -sish.debug Whether or not to print debug information -sish.domain string The domain for HTTP(S) multiplexing (default &quot;ssi.sh&quot;) -sish.forcerandomsubdomain Whether or not to force a random subdomain (default true) -sish.http string The address to listen for HTTP connections (default &quot;localhost:80&quot;) -sish.httpport int The port for HTTP connections. This is only for output messages (default 80) -sish.https string The address to listen for HTTPS connections (default &quot;localhost:443&quot;) -sish.httpsenabled Whether or not to listen for HTTPS connections -sish.httpspems string The location of pem files for HTTPS (fullchain.pem and privkey.pem) (default &quot;ssl/&quot;) -sish.httpsport int The port for HTTPS connections. This is only for output messages (default 443) -sish.keysdir string Directory for public keys for pubkey auth (default &quot;pubkeys/&quot;) -sish.password string Password to use for password auth (default &quot;S3Cr3tP4$$W0rD&quot;) -sish.pkloc string SSH server private key (default &quot;keys/ssh_key&quot;) -sish.pkpass string Passphrase to use for the server private key (default &quot;S3Cr3tP4$$phrAsE&quot;) -sish.proxyprotoenabled Whether or not to enable the use of the proxy protocol -sish.proxyprotoversion string What version of the proxy protocol to use. Can either be 1, 2, or userdefined. If userdefined, the user needs to add a command to SSH called proxy:version (ie proxy:1) (default &quot;1&quot;) -sish.redirectroot Whether or not to redirect the root domain (default true) -sish.redirectrootlocation string Where to redirect the root domain to (default &quot;https://github.com/antoniomika/sish&quot;) -sish.subdomainlen int The length of the random subdomain to generate (default 3) -sish.usegeodb Whether or not to use the maxmind geodb -sish.verifyorigin Whether or not to verify origin on websocket connection (default true) -sish.verifyssl Whether or not to verify SSL on proxy connection (default true) -sish.whitelistedcountries string A comma separated list of whitelisted countries -sish.whitelistedips string A comma separated list of whitelisted ips看不懂的，可以使用下谷歌翻译。 最后CentOS系统建议关闭防火墙使用，或者打开部分端口也行，关闭命令： #CentOS 6系统 service iptables stop chkconfig iptables off #CentOS 7系统 systemctl stop firewalld systemctl disable firewalld像阿里云等服务器，还需要去安全组那里开放下端口。 手动安装Docker虽然方便很多，但也有人会喜欢手动安装，这里作者没直接给出二进制文件，所以就需要我们手动来构建二进制文件了。 1、安装Go这里由于需要新版的Go环境，所以这里就使用Go二进制包安装环境，下载地址→传送门。 然后根据自己的服务器架构下载对应的最新安装包，一般可以直接使用命令： #32位系统下载 wget -O go.tar.gz https://dl.google.com/go/go1.13.3.linux-386.tar.gz #64位系统下载 wget -O go.tar.gz https://dl.google.com/go/go1.13.3.linux-amd64.tar.gz #解压压缩包 tar -zxvf go.tar.gz -C /usr/local #设置环境变量，将以下一起复制进ssh客户端运行 mkdir $HOME/go echo &#39;export GOROOT=/usr/local/go export GOPATH=$HOME/go export PATH=$PATH:$GOROOT/bin:$GOPATH/bin&#39; &gt;&gt; /etc/profile source /etc/profile #查看go版本，有输出即为安装成功 go version2、安装sish #下载源码到主目录 git clone https://github.com/antoniomika/sish cd sish #编译二进制文件 go install这里提示-bash: git: command not found的，可以先使用命令： #CentOS yum -y install git #Debian、Ubuntu apt install git -y3、运行sish运行参数这里就不贴了，直接参考上面Docker安装最下面的全部参数就行了。 先解析一个主/泛域名到服务器ip，比如解析moerats.com、*.moerats.com到服务器ip。 这里就贴个大概需要使用的参数，其它的根据需求自行修改，使用命令： #配置http域名 sish -sish.addr=:3333 -sish.http=:80 -sish.domain moerats.com -sish.forcerandomsubdomain=false -sish.bindrandom=false -sish.redirectrootlocation https://www.moerats.com -sish.keysdir=/sish/pubkeys -sish.pkloc=/sish/keys/ssh_key #配置https域名 sish -sish.addr=:3333 -sish.https=:443 -sish.http=:80 -sish.domain moerats.com -sish.forcerandomsubdomain=false -sish.bindrandom=false -sish.httpsenabled=true -sish.redirectrootlocation https://www.moerats.com -sish.keysdir=/sish/pubkeys -sish.pkloc=/sish/keys/ssh_key -sish.httpspems=/sish/ssl部分参数详解： -sish.addr=:3333 #ssh监听地址，这里为3333 -sish.forcerandomsubdomain=false #是否强制随机子域，这个建议关掉 -sish.bindrandom=false #是否随机绑定端口，这个建议关掉 -sish.domain moerats.com #使用的域名 -sish.redirectrootlocation https://www.baidu.com #主域名(-sish.domain参数)强制跳转到该地址 -sish.httpspems=/sish/ssl #泛域名SSL证书存放路径，证书命名格式fullchain.pem和privkey.pem -sish.keysdir=/sish/pubkeys #pubkey auth的公共密钥存放文件夹 -sish.pkloc=/sish/keys/ssh_key #SSH服务器私钥这里/sish/ssl、/sish/pubkeys、/sish/keys目录需要自己提前创建下，使用命令： mkdir -p /sish/ssl /sish/pubkeys /sish/keys4、开机自启如果你使用手动命令没问题了，先使用Ctrl+C断开命令。 再新建systemd配置文件，适用CentOS 7、Debian 8+、Ubuntu 16+。 #修改成你手动运行命令的全部参数 command=&quot;-sish.addr=:3333 -sish.http=:80 -sish.domain moerats.com -sish.forcerandomsubdomain=false -sish.bindrandom=false -sish.redirectrootlocation https://www.moerats.com -sish.keysdir=/sish/pubkeys -sish.pkloc=/sish/keys&quot; #将以下代码一起复制到SSH运行 cat &gt; /etc/systemd/system/sish.service &lt;&lt;EOF [Unit] Description=sish After=network.target [Service] Type=simple ExecStart=$(command -v sish) ${command} Restart=on-failure [Install] WantedBy=multi-user.target EOF启动并设置开机自启： systemctl start sish systemctl enable sish最后CentOS系统建议关闭防火墙使用，或者打开部分端口也行，关闭命令： #CentOS 6系统 service iptables stop chkconfig iptables off #CentOS 7系统 systemctl stop firewalld systemctl disable firewalld像阿里云等服务器，还需要去安全组那里开放下端口。 使用使用要求：可以使用SSH，并且能连接到互联网，Linux、Windows等系统都行。 以下所使用的的moerats.com为上面配置好的客户端域名地址，自行修改成自己的即可。 1、转发HTTP(S)将本地3000端口穿透到公网中，使用命令： #要转发其它端口的自行替换 ssh -p 3333 -R 80:localhost:3000 moerats.com第一次如果有提示，选择yes即可，之后会为你随机生成一个moerats.com的二级域名，然后就可以使用浏览器间接访问本地的localhost:3000了。 如果要指定二级域名，可以使用命令： #这里默认为no1.moerats.com，自行替换即可 ssh -p 3333 -R no1:80:localhost:3000 moerats.com此时你就可以在外网使用no1.moerats.com访问你本地的localhost:3000了。 2、转发TCP将本地6789端口穿透到公网的9876端口中，使用命令： #可以自行设置公网端口，这里默认6789，如果你要转发SSH端口，那就改成你的SSH端口 ssh -p 3333 -R 9876:localhost:6789 moerats.com这里只说了下简单用法，客户端我们还可以设置国家/地区、IP白名单等，使用参考→传送门。 最后没有泛域名证书的，可以查看该教程自己申请→传送门，或者等博主发码子→传送门。 版权声明：本文为原创文章，版权归 Rat’s Blog 所有，转载请注明出处！ 本文链接：https://www.moerats.com/archives/1002/","categories":[{"name":"工具","slug":"工具","permalink":"https://blog.fifu.fun/categories/%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"转载","slug":"转载","permalink":"https://blog.fifu.fun/tags/%E8%BD%AC%E8%BD%BD/"},{"name":"Linux","slug":"Linux","permalink":"https://blog.fifu.fun/tags/Linux/"},{"name":"搭建教程","slug":"搭建教程","permalink":"https://blog.fifu.fun/tags/%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/"}]},{"title":"一款二次元的Web多人在线网络聊天系统：Fiora的部署","slug":"ATwo-DimensionalWebMulti-PersonOnlineNetworkChatSystem","date":"2020-02-14T20:05:21.000Z","updated":"2021-11-25T05:21:47.785Z","comments":true,"path":"2020/02/15/ATwo-DimensionalWebMulti-PersonOnlineNetworkChatSystem/","link":"","permalink":"https://blog.fifu.fun/2020/02/15/ATwo-DimensionalWebMulti-PersonOnlineNetworkChatSystem/","excerpt":"","text":"InstallEnvironmental PreparationTo run Fiora, you need Node.js(recommend v14 LTS version), MongoDB and redis Install Node.js Official website https://nodejs.org/en/download/ It is recommended to use nvm to install Node.js Install nvm https://github.com/nvm-sh/nvm#install--update-script Install Node.js via nvm https://github.com/nvm-sh/nvm#usage Install MongoDB Official website https://docs.mongodb.com/manual/installation/#install-mongodb Install redis Official website https://docs.mongodb.com/manual/installation/#install-mongodb Recommended to running on Linux or MacOS systems How to run Clone the project git clone https://github.com/yinxin630/fiora.git -b master Ensure you have install yarn before, if not please run npm install -g yarn Install project dependencies yarn install Build client yarn build:web Config JwtSecret echo &quot;JwtSecret=&lt;string&gt;&quot; &gt; .env2. Change &lt;string&gt; to a secret text Start the server yarn start Open http://[ip]:[port](such as http://127.0.0.1:9200) in browser Run in the backgroundUsing yarn start to run the server will stop running after disconnecting the ssh connection, it is recommended to use pm2 to run # install pm2 npm install -g pm2 # use pm2 to run fiora pm2 start yarn --name fiora -- start # view pm2 apps status pm2 ls # view pm2 fiora logging pm2 logs fiora Run With Develop Mode Start the server yarn dev:server Start the client yarn dev:web Open http://localhost:8080 in browser Running on the dockerFirst install docker https://docs.docker.com/install/ Run directly from the DockerHub image# Pull mongo docker pull mongo # Pull redis docker pull redis # Pull fiora docker pull suisuijiang/fiora # Create a virtual network docker network create fiora-network # Run mongodB docker run --name fioradb -p 27017:27017 --network fiora-network mongo # Run redis docker run --name fioraredis -p 6379:6379 --network fiora-network redis # Run fiora docker run --name fiora -p 9200:9200 --network fiora-network -e Database=mongodb://fioradb:27017/fiora -e RedisHost=fioraredis suisuijiang/fiora Local build image and run Clone the project to the local git clone https://github.com/yinxin630/fiora.git -b master Build the imagedocker-compose build --no-cache --force-rm Run it docker-compose up","categories":[{"name":"学习","slug":"学习","permalink":"https://blog.fifu.fun/categories/%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://blog.fifu.fun/tags/Linux/"},{"name":"搭建教程","slug":"搭建教程","permalink":"https://blog.fifu.fun/tags/%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/"}]},{"title":"hexo引用本地图片无法显示","slug":"HexoReferencesToLocalImagesCannotBeDisplayed","date":"2020-02-14T19:39:30.000Z","updated":"2021-11-26T15:31:02.799Z","comments":true,"path":"2020/02/15/HexoReferencesToLocalImagesCannotBeDisplayed/","link":"","permalink":"https://blog.fifu.fun/2020/02/15/HexoReferencesToLocalImagesCannotBeDisplayed/","excerpt":"","text":"最近重新开始用起hexo，但是发现在文章中引用本地图片时总是显示不出来。花费了许久时间才解决这个问题。因此将一些解决经验整理出来，希望能帮助到大家。 一、插件安装与配置首先我们需要安装一个图片路径转换的插件，这个插件名字是hexo-asset-imagenpm install https://github.com/CodeFalling/hexo-asset-image --save 但是这个插件的内容需要修改【不然可能会出Bug】 打开/node_modules/hexo-asset-image/index.js，将内容更换为下面的代码'use strict'; var cheerio = require('cheerio'); // http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string function getPosition(str, m, i) { return str.split(m, i) .join(m) .length; } var version = String(hexo.version) .split('.'); hexo.extend.filter.register('after_post_render', function(data) { var config = hexo.config; if (config.post_asset_folder) { var link = data.permalink; if (version.length > 0 &amp;&amp; Number(version[0]) == 3) var beginPos = getPosition(link, '/', 1) + 1; else var beginPos = getPosition(link, '/', 3) + 1; // In hexo 3.1.1, the permalink of \"about\" page is like \".../about/index.html\". var endPos = link.lastIndexOf('/') + 1; link = link.substring(beginPos, endPos); var toprocess = ['excerpt', 'more', 'content']; for (var i = 0; i &lt; toprocess.length; i++) { var key = toprocess[i]; var $ = cheerio.load(data[key], { ignoreWhitespace: false, xmlMode: false, lowerCaseTags: false, decodeEntities: false }); $('img') .each(function() { if ($(this) .attr('src')) { // For windows style path, we replace '\\' to '/'. var src = $(this) .attr('src') .replace('\\\\', '/'); if (!/http[s]*.*|\\/\\/.*/.test(src) &amp;&amp; !/^\\s*\\//.test(src)) { // For \"about\" page, the first part of \"src\" can't be removed. // In addition, to support multi-level local directory. var linkArray = link.split('/') .filter(function(elem) { return elem != ''; }); var srcArray = src.split('/') .filter(function(elem) { return elem != '' &amp;&amp; elem != '.'; }); if (srcArray.length > 1) srcArray.shift(); src = srcArray.join('/'); $(this) .attr('src', config.root + link + src); console.info &amp;&amp; console.info(\"update link as:-->\" + config.root + link + src); } } else { console.info &amp;&amp; console.info(\"no src attr, skipped...\"); console.info &amp;&amp; console.info($(this)); } }); data[key] = $.html(); } } }); 二、问题推测（一）本地图片没有有效上传至github仓库中，导致引用无效解决方案：安装插件（回看前文） （二）本地图片没有存放在同名文件夹中解决方案：将需要引用的本地图片存放在与文章名相同的文件夹中 （三）图片路径出错这也是我出现的问题。 打开F12，发现下图问题。 因为我在github中关于Hexo的仓库名为850552586.github.io，并不是Ericam.com，所以导致了访问无效。 【这个问题可能是因为我更换电脑后重新配置Hexo忽略的地方】 解决方案：打开_config.yml修改下述内容 （四）相对路径引用的标签插件通过常规的 markdown 语法和相对路径来引用图片和其它资源可能会导致它们在存档页或者主页上显示不正确。在Hexo 2时代，社区创建了很多插件来解决这个问题。但是，随着Hexo 3 的发布，许多新的标签插件被加入到了核心代码中。这使得你可以更简单地在文章中引用你的资源。 也就是说在存档页和主页不能使用和文章内容中的常规语法来引用图片。 比如说：当你打开文章资源文件夹功能后，你把一个 example.jpg 图片放在了你的资源文件夹中，如果通过使用相对路径的常规 markdown 语法 ，它将 不会 出现在首页上。（但是它会在文章中按你期待的方式工作） 正确的引用图片方式是使用下列的标签插件而不是 markdown ： {% asset_img example.jpg This is an example image %} 原文链接：https://blog.csdn.net/xjm850552586/article/details/84101345","categories":[{"name":"Bugs","slug":"Bugs","permalink":"https://blog.fifu.fun/categories/Bugs/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://blog.fifu.fun/tags/Hexo/"},{"name":"转载","slug":"转载","permalink":"https://blog.fifu.fun/tags/%E8%BD%AC%E8%BD%BD/"}]},{"title":"使用Kali无线渗透获取WiFi密码","slug":"UseKaliWirelessPenetrationToGetTheWifiPassword","date":"2020-02-14T18:55:52.000Z","updated":"2021-11-26T15:31:21.145Z","comments":true,"path":"2020/02/15/UseKaliWirelessPenetrationToGetTheWifiPassword/","link":"","permalink":"https://blog.fifu.fun/2020/02/15/UseKaliWirelessPenetrationToGetTheWifiPassword/","excerpt":"","text":"仅供学习与交流，切勿对真实目标操作，否则后果自负！ 前期准备：在虚拟机Kali中是无法直接使用物理机本身的网卡的，需要自己买一块网卡插上去让Kali使用，而且对于网卡的类型也是有限制的，买得不好的话就用不了又得退货。本人在这用的无线网卡型号为EP-N8508GS，仅供参考。 Fighting：先将无线网卡插入Kali Linux，输入iwconfig命令查看得到，网卡名为wlan0： 接着通过以下命令将可能会影响进行无线实验的因素排除掉： 接着启动monitor模式： 输入iwconfig命令确认一遍，确实已进入monitor模式： 接着，输入airodump-ng wlan0mon命令来进行抓包： 在这里选择对加密类型为WPA的Tenda_490298进行抓包，可看到其BSSID为C8:3A:35:49:02:98，CH即信道为4。 接着输入airodump-ng wlan0mon --bssid C8:3A:35:49:02:98 -c 4 -w wpa只抓取该WPA的数据包： 可以看到，有三台设备连接到该路由WiFi，应该是手机，接着提示已经抓到了4步握手信息，然后可以关闭抓取。 上面可能是因为有个室友刚好去连WiFi而不是一直都连着吧，所以直接就可以看到。 若抓不到4步握手，则通过以下命令断开设备与WiFi的连接，使其重新建立连接从而可以抓取四步握手信息： aireplay-ng -0 2 -a 52:A5:89:BA:57:B3 -c 68:3E:34:A1:F7:27 wlan0mon 通过ls wpa*命令查看抓到的信息保存的文件（多的wpa包是之前做测试保存下来的）： 这里看最新的那个即wpa-04即可，可以看到总共有4个。 后面使用Kali Linux中默认存在的字典，目录为/usr/share/wordlists/rockyou.txt.zip，其中需要使用命令来解压： 这里顺便记录一下Kali中几个常用的字典文件的位置： /usr/share/john/password.lst /usr/share/wfuzz/wordlist /usr/share/wordlists 然后使用命令aircrack-ng -w /usr/share/wordlists/rockyou.txt wpa-04.cap进行破解： 可以看到，破解成功，密码为11223344 没到两秒钟的时间就暴破出WiFi密码，这个弱口令是一个室友当初想方便一点就弄的这个，后面赶紧改了个复杂的。 最后注意的是，WPA和WEP不同（具体的可以百度），如果在字典中没有对应的口令，换句话说，只要WiFi密码设置得够复杂、在口令字典文件中不存在，那么就别指望爆破出密码了。可以看出，也是需要点运气的~ 原文链接：https://blog.csdn.net/ski_12/article/details/76598873","categories":[{"name":"学习","slug":"学习","permalink":"https://blog.fifu.fun/categories/%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"Kali","slug":"Kali","permalink":"https://blog.fifu.fun/tags/Kali/"}]},{"title":"Hello World","slug":"hello-world","date":"2018-06-13T18:55:52.000Z","updated":"2021-11-25T05:23:40.681Z","comments":true,"path":"2018/06/14/hello-world/","link":"","permalink":"https://blog.fifu.fun/2018/06/14/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new &quot;My New Post&quot;More info: Writing Run server$ hexo serverMore info: Server Generate static files$ hexo generateMore info: Generating Deploy to remote sites$ hexo deployMore info: Deployment","categories":[],"tags":[]}],"categories":[{"name":"Linux","slug":"Linux","permalink":"https://blog.fifu.fun/categories/Linux/"},{"name":"学习","slug":"学习","permalink":"https://blog.fifu.fun/categories/%E5%AD%A6%E4%B9%A0/"},{"name":"工具","slug":"工具","permalink":"https://blog.fifu.fun/categories/%E5%B7%A5%E5%85%B7/"},{"name":"Bugs","slug":"Bugs","permalink":"https://blog.fifu.fun/categories/Bugs/"}],"tags":[{"name":"密码学","slug":"密码学","permalink":"https://blog.fifu.fun/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"},{"name":"心理学","slug":"心理学","permalink":"https://blog.fifu.fun/tags/%E5%BF%83%E7%90%86%E5%AD%A6/"},{"name":"Hexo","slug":"Hexo","permalink":"https://blog.fifu.fun/tags/Hexo/"},{"name":"转载","slug":"转载","permalink":"https://blog.fifu.fun/tags/%E8%BD%AC%E8%BD%BD/"},{"name":"Linux","slug":"Linux","permalink":"https://blog.fifu.fun/tags/Linux/"},{"name":"搭建教程","slug":"搭建教程","permalink":"https://blog.fifu.fun/tags/%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/"},{"name":"Kali","slug":"Kali","permalink":"https://blog.fifu.fun/tags/Kali/"}]}